"""
Django settings for rap_app_project project.
Generated by 'django-admin startproject' using Django 4.2.6.
"""

from pathlib import Path
from datetime import timedelta
import os
import sys
from decouple import config


import warnings
if not config("DEBUG", default="False").lower() == "true":
    warnings.filterwarnings("ignore", message=".*drf_spectacular.*")


# ==========
# BASE DIR
# ==========
BASE_DIR = Path(__file__).resolve().parent.parent

# ==========
# HELPERS
# ==========
def csv(name: str, default: str = "") -> list[str]:
    return [s.strip() for s in config(name, default=default).split(",") if s.strip()]

# ==========
# CORE / SECURITY
# ==========
SECRET_KEY = config("SECRET_KEY", default="django-insecure-fallback-key")
DEBUG = config("DEBUG", default="False").lower() == "true"

# Ex: .env -> ALLOWED_HOSTS=rap.adserv.fr,147.93.126.119
ALLOWED_HOSTS = csv("ALLOWED_HOSTS", default="localhost,rap.adserv.fr")

# ==========
# APPS
# ==========
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "rap_app",

    "rest_framework",
    "django_filters",
    "corsheaders",
    "rest_framework_simplejwt.token_blacklist",
    "rest_framework_simplejwt",
    "drf_spectacular",
    "drf_spectacular_sidecar",

    # À désactiver en prod si non utilisé
    "django_extensions",
]

# ==========
# MIDDLEWARE
# ==========
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # WhiteNoise doit être juste après SecurityMiddleware
    "whitenoise.middleware.WhiteNoiseMiddleware",
    # CORS avant CommonMiddleware
    "corsheaders.middleware.CorsMiddleware",

    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "rap_app_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "rap_app_project" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "rap_app_project.wsgi.application"

# ==========
# AUTH USER
# ==========
AUTH_USER_MODEL = "rap_app.CustomUser"

# ==========
# DATABASE (PostgreSQL)
# .env :
# DB_NAME=...
# DB_USER=...
# DB_PASSWORD=...
# DB_HOST=localhost
# DB_PORT=5432
# ==========
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST", default="localhost"),
        "PORT": config("DB_PORT", default="5432"),
        # Optionnel :
        # "ATOMIC_REQUESTS": True,
    }
}

# ==========
# DRF
# ==========
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
        "rap_app.api.permissions.IsStaffReadOnly",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    # En prod on ne sert que JSON ; en dev on garde le Browsable API
    "DEFAULT_RENDERER_CLASSES": (
        ["rest_framework.renderers.JSONRenderer"]
        if not DEBUG
        else [
            "rest_framework.renderers.JSONRenderer",
            "rest_framework.renderers.BrowsableAPIRenderer",
        ]
    ),
    "DEFAULT_PAGINATION_CLASS": "rap_app.api.paginations.RapAppPagination",
    "PAGE_SIZE": 10,
}

# ==========
# SIMPLE JWT
# Variables optionnelles :
# JWT_ACCESS_TOKEN_LIFETIME_MINUTES=30
# JWT_REFRESH_TOKEN_LIFETIME_DAYS=1
# ==========
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=int(os.getenv("JWT_ACCESS_TOKEN_LIFETIME_MINUTES", 30))
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=int(os.getenv("JWT_REFRESH_TOKEN_LIFETIME_DAYS", 1))
    ),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

# ==========
# SPECTACULAR
# ==========
SPECTACULAR_SETTINGS = {
    "TITLE": "Rap_app",
    "DESCRIPTION": "Documentation complète de l'API Rap_App pour l'application mobile et web.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "SCHEMA_PATH_PREFIX": "/api/",
    "COMPONENT_NO_READ_ONLY_REQUIRED": True,
    "SCHEMA_PATH_PREFIX_TRIM": True,
    "CONTACT": {"name": "Équipe Rap_app", "email": "support@rap_app.app"},
    "LICENSE": {"name": "Propriétaire"},
    "PREPROCESSING_HOOKS": ["rap_app.spectacular_hooks.preprocess_hook"],
    "POSTPROCESSING_HOOKS": ["rap_app.spectacular_hooks.postprocess_hook"],
    "ENUM_NAME_OVERRIDES": {
        "StatutProspection": "rap_app.models.ProspectionChoices.PROSPECTION_STATUS_CHOICES",
        "ObjectifProspection": "rap_app.models.ProspectionChoices.PROSPECTION_OBJECTIF_CHOICES",
        "MotifProspection": "rap_app.models.ProspectionChoices.PROSPECTION_MOTIF_CHOICES",
        "TypeContact": "rap_app.models.ProspectionChoices.TYPE_CONTACT_CHOICES",
        "MoyenContact": "rap_app.models.ProspectionChoices.MOYEN_CONTACT_CHOICES",
        "AncienStatut": "rap_app.models.ProspectionChoices.PROSPECTION_STATUS_CHOICES",
        "NouveauStatut": "rap_app.models.ProspectionChoices.PROSPECTION_STATUS_CHOICES",
    },
    "ENUM_RENAME_ALTERNATIVES": {
        "StatutF44Enum": "StatutProspection",
        "Statut120Enum": "StatutHistorique",
    },
    "ENUM_GENERATE_CHOICE_DESCRIPTION": False,
    "GENERIC_ADDITIONAL_PROPERTIES": None,
}

# ==========
# CSRF / CORS
# .env :
# CSRF_TRUSTED_ORIGINS=https://rap.adserv.fr
# CORS_ALLOWED_ORIGINS=https://rap.adserv.fr
# ==========
CSRF_TRUSTED_ORIGINS = csv("CSRF_TRUSTED_ORIGINS", default="https://rap.adserv.fr")
CORS_ALLOWED_ORIGINS = csv("CORS_ALLOWED_ORIGINS", default="https://rap.adserv.fr")
CORS_ALLOW_CREDENTIALS = True

# En dev, on autorise les origines locales
if DEBUG:
    CSRF_TRUSTED_ORIGINS += ["http://localhost:5173", "http://127.0.0.1:5173"]
    CORS_ALLOWED_ORIGINS += [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://localhost:3000",
    ]

# ==========
# EMAIL
# (prod typique Hostinger en SMTP via .env)
# EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
# EMAIL_HOST=smtp.hostinger.com
# EMAIL_PORT=465
# EMAIL_USE_SSL=True
# EMAIL_HOST_USER=...
# EMAIL_HOST_PASSWORD=...
# ==========
EMAIL_BACKEND = config(
    "EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend"
)

# ==========
# I18N / TZ
# ==========
LANGUAGE_CODE = "fr"
TIME_ZONE = "Europe/Paris"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# ==========
# STATIC & MEDIA
# WhiteNoise sert /static/ directement (mutualisé Hostinger)
# ==========
STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "rap_app/static/rap_app"),  # ton dossier principal
    os.path.join(BASE_DIR, "rap_app/static"),           # dossier racine de secours
]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ==========
# AUTH / REDIRECTS
# ==========
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
LOGIN_REDIRECT_URL = "profile"
LOGOUT_REDIRECT_URL = "login"
LOGIN_URL = "/login/"

# ==========
# PROD SECURITY (piloté par .env)
# SECURE_SSL_REDIRECT=True
# SESSION_COOKIE_SECURE=True
# CSRF_COOKIE_SECURE=True
# SECURE_HSTS_SECONDS=31536000
# SECURE_HSTS_INCLUDE_SUBDOMAINS=True
# SECURE_HSTS_PRELOAD=True
# ==========
SECURE_SSL_REDIRECT = config("SECURE_SSL_REDIRECT", default="True").lower() == "true"
SESSION_COOKIE_SECURE = config("SESSION_COOKIE_SECURE", default="True").lower() == "true"
CSRF_COOKIE_SECURE = config("CSRF_COOKIE_SECURE", default="True").lower() == "true"
SECURE_HSTS_SECONDS = int(config("SECURE_HSTS_SECONDS", default="0"))
SECURE_HSTS_INCLUDE_SUBDOMAINS = (
    config("SECURE_HSTS_INCLUDE_SUBDOMAINS", default="False").lower() == "true"
)
SECURE_HSTS_PRELOAD = config("SECURE_HSTS_PRELOAD", default="False").lower() == "true"

# ==========
# LOGGING
# ==========
LOG_SENSITIVE_FIELDS = [
    "password",
    "token",
    "secret",
    "api_key",
    "auth",
    "credential",
    "authorization",
]
LOG_SANITIZATION_WARNINGS = True

LOG_DIR = os.path.join(BASE_DIR, "logs")
Path(LOG_DIR).mkdir(exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {"format": "{levelname} {message}", "style": "{"},
        "audit": {
            "format": "{asctime} | {levelname} | {module} | {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": os.path.join(LOG_DIR, "errors.log"),
            "formatter": "verbose",
        },
        "console": {"level": "INFO", "class": "logging.StreamHandler", "formatter": "simple"},
        "audit_file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(LOG_DIR, "audit.log"),
            "formatter": "audit",
        },
    },
    "loggers": {
        "django": {"handlers": ["file", "console"], "level": "INFO", "propagate": True},
        "rap_app": {"handlers": ["file", "console", "audit_file"], "level": "INFO", "propagate": True},
        "rap_app.audit": {"handlers": ["audit_file"], "level": "INFO", "propagate": False},
        "rap_app.candidats": {
            "handlers": ["console", "audit_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        # "django.db.backends": {"handlers": ["console"], "level": "INFO", "propagate": False},
    },
}

# ==========
# MODEL LOGGING SWITCH
# ==========
ENABLE_MODEL_LOGGING = not DEBUG
LOG_MODELS = ["rap_app.ImportantModel", "rap_app.CriticalModel"]
LOG_EXCLUDED_MODELS = ["auth.User", "sessions.Session", "contenttypes.ContentType"]

if "test" in sys.argv:
    DISABLE_MODEL_LOGS = True
    LOGGING["loggers"]["rap_app"]["level"] = "CRITICAL"
else:
    DISABLE_MODEL_LOGS = False
