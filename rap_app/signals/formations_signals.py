import sys
import logging
from django.db import transaction
from django.utils.timezone import now
from django.db.models.signals import post_save, pre_delete
from django.dispatch import receiver
from django.apps import apps

from ..models.formations import Formation, HistoriqueFormation
from ..middleware import get_current_user

# Loggers
logger_formation = logging.getLogger("rap_app.formation")
logger_historique = logging.getLogger("rap_app.historiqueformation")


def skip_during_migrations() -> bool:
    """
    ‚õî Emp√™che l'ex√©cution des signaux pendant les migrations.

    Returns:
        bool: True si les migrations sont en cours, sinon False.
    """
    return not apps.ready or 'migrate' in sys.argv or 'makemigrations' in sys.argv


def get_user(instance):
    """
    üîç R√©cup√®re l'utilisateur li√© √† l'action depuis l'instance, ou via le middleware.

    Args:
        instance (Model): Instance Django √† inspecter.

    Returns:
        User | None: Utilisateur courant si trouv√©, sinon None.
    """
    return (
        getattr(instance, '_user', None)
        or getattr(instance, 'updated_by', None)
        or getattr(instance, 'created_by', None)
        or get_current_user()
    )


@receiver(post_save, sender=Formation)
def log_formation_saved(sender, instance, created, **kwargs):
    """
    üìù Enregistre un message dans le log lorsqu'une formation est cr√©√©e ou modifi√©e.
    Cr√©e aussi une ligne dans HistoriqueFormation si cr√©ation.

    Args:
        sender (Model): Le mod√®le ayant √©mis le signal.
        instance (Formation): L‚Äôinstance concern√©e.
        created (bool): True si nouvel objet, False si mise √† jour.
    """
    if skip_during_migrations():
        return

    action = "cr√©√©e" if created else "modifi√©e"
    user = get_user(instance)
    user_info = f"par {user.get_full_name() or user.username}" if user else "par Syst√®me"

    logger_formation.info(
        f"[Signal] Formation {action} : {instance.nom} (ID={instance.pk}) {user_info}"
    )

    if created:
        try:
            HistoriqueFormation.objects.create(
                formation=instance,
                action='cr√©ation',
                champ_modifie='formation',
                nouvelle_valeur=str(instance.nom),
                commentaire="Cr√©ation de la formation (via signal)",
                created_by=user
            )
        except Exception as e:
            logger_historique.error(f"[Signal] Erreur lors de l‚Äôhistorique de cr√©ation : {e}", exc_info=True)


@receiver(pre_delete, sender=Formation)
def log_formation_deleted(sender, instance, **kwargs):
    if skip_during_migrations():
        return

    user = get_user(instance)
    user_info = f"par {user.get_full_name() or user.username}" if user else "par Syst√®me"

    logger_formation.warning(
        f"[Signal] Formation supprim√©e : {instance.nom} (ID={instance.pk}) {user_info}"
    )

    try:
        with transaction.atomic():
            HistoriqueFormation.objects.create(
                formation=None,  # ‚õî surtout pas `formation=instance`
                action=HistoriqueFormation.ActionType.SUPPRESSION,
                champ_modifie='formation',
                ancienne_valeur=instance.nom,
                nouvelle_valeur=None,
                commentaire=f"Formation supprim√©e le {now().strftime('%d/%m/%Y √† %H:%M')}",
                created_by=user,
                details={
                    "id": instance.pk,
                    "nom": instance.nom,
                    "centre": str(instance.centre) if instance.centre_id else None,
                    "type_offre": str(instance.type_offre) if instance.type_offre_id else None,
                    "date_suppression": now().isoformat()
                }
            )
    except Exception as e:
        logger_historique.error(f"[Signal] Erreur lors de l‚Äôhistorique de suppression : {e}", exc_info=True)


@receiver(post_save, sender=HistoriqueFormation)
def log_historique_ajout(sender, instance, created, **kwargs):
    """
    üìò Enregistre un log quand une entr√©e HistoriqueFormation est cr√©√©e.

    Args:
        sender (Model): Le mod√®le ayant √©mis le signal.
        instance (HistoriqueFormation): L‚Äôinstance cr√©√©e.
        created (bool): True si nouvel objet.
    """
    if skip_during_migrations() or not created:
        return

    ancienne = instance.ancienne_valeur or "‚Äî"
    nouvelle = instance.nouvelle_valeur or "‚Äî"
    user = instance.created_by
    user_info = f"par {user.get_full_name() or user.username}" if user else "par Syst√®me"

    logger_historique.info(
        f"[Signal] Historique enregistr√© pour formation #{instance.formation_id} "
        f"{user_info} ‚Äì {instance.get_action_display()} du champ '{instance.champ_modifie}' : "
        f"{ancienne} ‚Üí {nouvelle}"
    )

    if instance.action == 'suppression':
        logger_historique.warning(
            f"[Signal] Suppression enregistr√©e pour formation #{instance.formation_id}"
        )


@receiver(pre_delete, sender=HistoriqueFormation)
def log_historique_suppression(sender, instance, **kwargs):
    """
    üóëÔ∏è Enregistre un log lorsqu‚Äôune ligne HistoriqueFormation est supprim√©e.

    Args:
        sender (Model): Le mod√®le ayant √©mis le signal.
        instance (HistoriqueFormation): L‚Äôinstance supprim√©e.
    """
    if skip_during_migrations():
        return

    logger_historique.warning(
        f"[Signal] Suppression d‚Äôun historique (ID={instance.pk}) li√© √† la formation #{instance.formation_id}"
    )
