import logging
from django.db import transaction
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from ..models.commentaires import Commentaire
from ..models.formations import Formation

logger = logging.getLogger(__name__)

# ========================
# üì¶ Fonctions m√©tier
# ========================

def update_formation_stats_on_save(commentaire: Commentaire):
    """
    Met √† jour la formation associ√©e apr√®s la sauvegarde d'un commentaire :
    - Dernier commentaire
    - Saturation si fournie
    - Statistiques calcul√©es (saturation moyenne, nombre de commentaires)
    
    Args:
        commentaire (Commentaire): L'instance de commentaire sauvegard√©e
    """
    try:
        with transaction.atomic():
            formation = commentaire.formation
            if not formation:
                return

            updates = {}
            
            # Mise √† jour de la saturation si fournie
            if commentaire.saturation is not None:
                updates['saturation'] = commentaire.saturation
                logger.info(
                    f"‚öôÔ∏è Saturation mise √† jour sur formation #{formation.id} ‚Üí {commentaire.saturation}%"
                )
            
            # R√©cup√©ration du dernier commentaire
            dernier = Commentaire.objects.filter(formation=formation).order_by('-created_at').first()
            if dernier:
                updates['dernier_commentaire'] = dernier.contenu
            
            # Calcul de la saturation moyenne si le champ existe
            if hasattr(formation, 'saturation_moyenne'):
                from django.db.models import Avg
                saturation_avg = (
                    Commentaire.objects.filter(
                        formation=formation, 
                        saturation__isnull=False
                    ).aggregate(Avg('saturation')).get('saturation__avg')
                )
                updates['saturation_moyenne'] = saturation_avg
                logger.info(f"üìä Saturation moyenne calcul√©e: {saturation_avg}%")
            
            # Mise √† jour du nombre de commentaires si le champ existe
            if hasattr(formation, 'nb_commentaires'):
                nb_commentaires = Commentaire.objects.filter(formation=formation).count()
                updates['nb_commentaires'] = nb_commentaires
                logger.info(f"üî¢ Nombre de commentaires mis √† jour: {nb_commentaires}")

            # Application des mises √† jour
            if updates:
                Formation.objects.filter(id=formation.id).update(**updates)
                logger.debug(f"‚úÖ Formation #{formation.id} mise √† jour suite √† post_save")
    except Exception as e:
        logger.error(f"‚ùå Erreur post_save Commentaire : {e}", exc_info=True)


def update_formation_stats_on_delete(commentaire: Commentaire):
    """
    Met √† jour la formation apr√®s suppression d'un commentaire :
    - R√©initialise le champ `dernier_commentaire`
    - Recalcule les statistiques (saturation moyenne, nombre de commentaires)
    
    Args:
        commentaire (Commentaire): L'instance de commentaire supprim√©e
    """
    try:
        with transaction.atomic():
            formation = commentaire.formation
            if not formation:
                return

            logger.info(f"üóëÔ∏è Commentaire supprim√©, mise √† jour formation #{formation.id}")

            updates = {}
            
            # Mise √† jour du dernier commentaire
            dernier = Commentaire.objects.filter(formation=formation).order_by('-created_at').first()
            contenu = dernier.contenu if dernier else ""
            updates['dernier_commentaire'] = contenu

            # Recalcul de la saturation moyenne si le champ existe
            if hasattr(formation, 'saturation_moyenne'):
                from django.db.models import Avg
                saturation_avg = (
                    Commentaire.objects.filter(
                        formation=formation, 
                        saturation__isnull=False
                    ).aggregate(Avg('saturation')).get('saturation__avg')
                )
                updates['saturation_moyenne'] = saturation_avg
                logger.info(f"üìä Saturation moyenne recalcul√©e: {saturation_avg}%")
            
            # Mise √† jour du nombre de commentaires si le champ existe
            if hasattr(formation, 'nb_commentaires'):
                nb_commentaires = Commentaire.objects.filter(formation=formation).count()
                updates['nb_commentaires'] = nb_commentaires
                logger.info(f"üî¢ Nombre de commentaires mis √† jour: {nb_commentaires}")
            
            # Application des mises √† jour
            Formation.objects.filter(id=formation.id).update(**updates)
            logger.debug(f"üîÅ Statistiques recalcul√©es sur formation #{formation.id}")
    except Exception as e:
        logger.error(f"‚ùå Erreur post_delete Commentaire : {e}", exc_info=True)

# ========================
# üß© Signaux
# ========================

@receiver(post_save, sender=Commentaire)
def commentaire_post_save(sender, instance, created, **kwargs):
    """
    Signal post_save pour les commentaires.
    Met √† jour les statistiques de la formation associ√©e.
    
    Args:
        sender: Classe du mod√®le envoyant le signal
        instance (Commentaire): Instance du commentaire sauvegard√©
        created (bool): True si cr√©ation, False si modification
    """
    action = "cr√©√©" if created else "modifi√©"
    logger.debug(f"[Signal] Commentaire #{instance.pk} {action} pour formation #{instance.formation_id}")
    update_formation_stats_on_save(instance)


@receiver(post_delete, sender=Commentaire)
def commentaire_post_delete(sender, instance, **kwargs):
    """
    Signal post_delete pour les commentaires.
    Met √† jour les statistiques de la formation apr√®s suppression.
    
    Args:
        sender: Classe du mod√®le envoyant le signal
        instance (Commentaire): Instance du commentaire supprim√©
    """
    logger.debug(f"[Signal] Commentaire #{instance.pk} supprim√© de formation #{instance.formation_id}")
    update_formation_stats_on_delete(instance)