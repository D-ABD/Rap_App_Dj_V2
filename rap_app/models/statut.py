import logging
import re
from django.db import models
from django.core.exceptions import ValidationError
from django.db.models.signals import post_delete
from django.urls import reverse

from django.dispatch import receiver
from django.utils.html import format_html
from .base import BaseModel

# Logger configur√© pour les statuts
logger = logging.getLogger("application.statut")


def get_default_color(statut_nom):
    """
    Retourne une couleur pr√©d√©finie selon le type de statut.
    
    Args:
        statut_nom (str): Le nom du statut (cl√© dans STATUT_CHOICES)
        
    Returns:
        str: Code couleur hexad√©cimal correspondant au statut
    """
    COULEURS_PREDEFINIES = {
        'non_defini': "#FFEB3B",             # Jaune
        'recrutement_en_cours': "#4CAF50",   # Vert
        'formation_en_cours': "#2196F3",     # Bleu
        'formation_a_annuler': "#FF9800",    # Orange
        'formation_a_repousser': "#FFEB3B",  # Jaune
        'formation_annulee': "#F44336",      # Rouge
        'pleine': "#9C27B0",                 # Violet
        'quasi_pleine': "#3F51B5",           # Indigo
        'autre': "#795548",                  # Marron
    }
    return COULEURS_PREDEFINIES.get(statut_nom, "#607D8B")  # Bleu-gris par d√©faut


def calculer_couleur_texte(couleur_fond):
    """
    Calcule si le texte doit √™tre noir ou blanc en fonction de la luminosit√© de la couleur de fond.
    
    Args:
        couleur_fond (str): Code hexad√©cimal de la couleur de fond (#RRGGBB)
        
    Returns:
        str: "#000000" (noir) ou "#FFFFFF" (blanc) selon la luminosit√©
    """
    # Extraire les composants RGB
    r = int(couleur_fond[1:3], 16)
    g = int(couleur_fond[3:5], 16)
    b = int(couleur_fond[5:7], 16)
    
    # Calculer la luminosit√© (formule standard)
    luminosite = (0.299 * r + 0.587 * g + 0.114 * b) / 255
    
    # Si luminosit√© > 0.5, le fond est clair, donc texte noir
    return "#000000" if luminosite > 0.5 else "#FFFFFF"


class Statut(BaseModel):
    """
    üîµ Mod√®le repr√©sentant les statuts possibles d'une formation.
    
    Ce mod√®le stocke les diff√©rents √©tats qu'une formation peut avoir,
    avec des couleurs associ√©es pour l'affichage visuel.
    
    Attributes:
        nom (str): L'identifiant du statut (choix pr√©d√©fini)
        couleur (str): Code couleur hexad√©cimal (#RRGGBB)
        description_autre (str): Description personnalis√©e pour le statut 'autre'
    """

    # Choix de statuts
    NON_DEFINI = 'non_defini'
    RECRUTEMENT_EN_COURS = 'recrutement_en_cours'
    FORMATION_EN_COURS = 'formation_en_cours'
    FORMATION_A_ANNULER = 'formation_a_annuler'
    FORMATION_A_REPOUSSER = 'formation_a_repousser'
    FORMATION_ANNULEE = 'formation_annulee'
    PLEINE = 'pleine'
    QUASI_PLEINE = 'quasi_pleine'
    AUTRE = 'autre'

    STATUT_CHOICES = [
        (NON_DEFINI, 'Non d√©fini'),
        (RECRUTEMENT_EN_COURS, 'Recrutement en cours'),
        (FORMATION_EN_COURS, 'Formation en cours'),
        (FORMATION_A_ANNULER, 'Formation √† annuler'),
        (FORMATION_A_REPOUSSER, 'Formation √† repousser'),
        (FORMATION_ANNULEE, 'Formation annul√©e'),
        (PLEINE, 'Pleine'),
        (QUASI_PLEINE, 'Quasi-pleine'),
        (AUTRE, 'Autre'),
    ]

    nom = models.CharField(
        max_length=100,
        choices=STATUT_CHOICES,
        verbose_name="Nom du statut"
    )

    couleur = models.CharField(
        max_length=7,
        blank=True,
        verbose_name="Couleur",
        help_text="Couleur hexad√©cimale (#RRGGBB)."
    )

    description_autre = models.CharField(
        max_length=255,
        blank=True,
        null=True,
        verbose_name="Description personnalis√©e"
    )

    def clean(self):
        """
        ‚úÖ Validation personnalis√©e :
        - V√©rifie `description_autre` si le statut est 'autre'
        - V√©rifie le format couleur si fourni (format et caract√®res valides)
        
        Raises:
            ValidationError: Si les donn√©es ne sont pas valides
        """
        if self.nom == self.AUTRE and not self.description_autre:
            raise ValidationError({
                'description_autre': "Le champ 'description personnalis√©e' est requis pour le statut 'Autre'."
            })

        if self.couleur:
            # V√©rification am√©lior√©e avec regex pour le format hexad√©cimal
            if not re.match(r'^#[0-9A-Fa-f]{6}$', self.couleur):
                raise ValidationError({
                    'couleur': "La couleur doit √™tre au format hexad√©cimal valide (#RRGGBB)."
                })

    def get_nom_display(self):
        """
        Affiche le libell√© du statut. Si 'Autre', retourne la description personnalis√©e.
        
        Returns:
            str: Le libell√© du statut √† afficher
        """
        if self.nom == self.AUTRE and self.description_autre:
            return self.description_autre
        return dict(self.STATUT_CHOICES).get(self.nom, self.nom)

    def get_badge_html(self):
        """
        G√©n√®re un badge HTML avec la couleur associ√©e et un texte contrast√©.
        
        Le texte sera en noir ou blanc selon la luminosit√© de la couleur de fond
        pour garantir une meilleure accessibilit√©.
        
        Returns:
            SafeString: Code HTML format√© pour l'affichage du badge
        """
        couleur_texte = calculer_couleur_texte(self.couleur)
        return format_html(
            '<span class="badge" style="background-color:{}; color:{}; padding: 3px 8px; border-radius: 5px;">{}</span>',
            self.couleur,
            couleur_texte,
            self.get_nom_display()
        )

    def save(self, *args, **kwargs):
        """
        üîÅ Sauvegarde du statut :
        - Applique une couleur par d√©faut si vide
        - Journalise cr√©ation ou modification
        - G√®re la tra√ßabilit√© utilisateur via BaseModel (user dans kwargs)
        """
        is_new = self.pk is None
        user = kwargs.pop('user', None)
        if user:
            self._user = user  # transmis √† BaseModel

        if not self.couleur:
            self.couleur = get_default_color(self.nom)

        # Possibilit√© de d√©sactiver la validation compl√®te avec skip_validation=True
        if not kwargs.pop('skip_validation', False):
            self.full_clean()

        super().save(*args, **kwargs)

        logger.info(
            f"{'üü¢ Nouveau statut' if is_new else 'üìù Statut modifi√©'} : "
            f"{self.get_nom_display()} ({self.couleur})"
        )

    def __str__(self):
        """
        Repr√©sentation textuelle du mod√®le.
        
        Returns:
            str: Le libell√© du statut
        """
        return self.get_nom_display()
    
    def get_absolute_url(self):
        """
        Retourne l'URL pour acc√©der √† la vue d√©taill√©e de ce statut.
        
        Returns:
            str: URL absolue vers la page de d√©tail du statut
        """
        return reverse("statut-detail", kwargs={"pk": self.pk})
    
    @property
    def serializable_data(self):
        """
        Retourne un dictionnaire des donn√©es du statut pour s√©rialisation.
        
        Cette propri√©t√© facilite la cr√©ation de serializers DRF.
        
        Returns:
            dict: Donn√©es du statut format√©es pour s√©rialisation
        """
        return {
            'id': self.id,
            'nom': self.nom,
            'libelle': self.get_nom_display(),
            'couleur': self.couleur,
            'description_autre': self.description_autre,
        }

    class Meta:
        verbose_name = "Statut"
        verbose_name_plural = "Statuts"
        ordering = ['nom']
        indexes = [
            models.Index(fields=['nom']),
            models.Index(fields=['couleur']),
        ]



# üî¥ Signal pour journaliser la suppression d'un statut
@receiver(post_delete, sender=Statut)
def log_statut_deleted(sender, instance, **kwargs):
    """
    Signal d√©clench√© lors de la suppression d'un statut.
    Journalise l'information de suppression.
    
    Args:
        sender: Le mod√®le qui a envoy√© le signal
        instance: L'instance du mod√®le qui a √©t√© supprim√©e
        **kwargs: Arguments suppl√©mentaires
    """
    logger.warning(f"‚ùå Statut supprim√© : {instance.get_nom_display()} ({instance.couleur})")