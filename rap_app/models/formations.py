import datetime
import logging
from django.db import models, transaction
from django.urls import reverse
from django.utils import timezone
from django.core.exceptions import ValidationError
from django.db.models import F, Q, Sum, Count, Case, When, Value, ExpressionWrapper, FloatField
from django.utils.translation import gettext_lazy as _
from django.utils.functional import cached_property


from .base import BaseModel
from .partenaires import Partenaire
from .centres import Centre
from .types_offre import TypeOffre
from .statut import Statut, get_default_color

logger = logging.getLogger("application.formation")

# ----------------------------------------------------
# Signaux d√©plac√©s dans un fichier signals/
# ----------------------------------------------------


class FormationManager(models.Manager):
    """
    Manager personnalis√© pour le mod√®le Formation.
    Fournit des m√©thodes utilitaires pour filtrer et trier les formations.
    
    Utilis√© dans les serializers pour:
    - Filtrer les formations selon leur √©tat (active, √† venir, termin√©e)
    - Trier les formations selon diff√©rents crit√®res
    - Identifier les formations avec des places disponibles
    """

    def formations_actives(self):
        """
        Retourne uniquement les formations actives actuellement.
        
        Returns:
            QuerySet: Formations dont la date de d√©but est pass√©e et la date de fin est future
        """
        today = timezone.now().date()
        return self.filter(start_date__lte=today, end_date__gte=today)

    def formations_a_venir(self):
        """
        Retourne uniquement les formations qui n'ont pas encore commenc√©.
        
        Returns:
            QuerySet: Formations dont la date de d√©but est dans le futur
        """
        return self.filter(start_date__gt=timezone.now().date())

    def formations_terminees(self):
        """
        Retourne uniquement les formations d√©j√† termin√©es.
        
        Returns:
            QuerySet: Formations dont la date de fin est pass√©e
        """
        return self.filter(end_date__lt=timezone.now().date())

    def formations_a_recruter(self):
        """
        Retourne les formations qui ont encore des places disponibles.
        Utilis√©e pour les pages de recrutement et les filtres de recherche.
        
        Returns:
            QuerySet: Formations avec des places disponibles
        """
        return self.annotate(
            total_places=models.F('prevus_crif') + models.F('prevus_mp'),
            total_inscrits=models.F('inscrits_crif') + models.F('inscrits_mp')
        ).filter(total_places__gt=models.F('total_inscrits'))

    def formations_toutes(self):
        """
        Retourne toutes les formations sans filtre.
        
        Returns:
            QuerySet: Toutes les formations
        """
        return self.all()

    def trier_par(self, champ_tri):
        """
        Trie les formations selon un champ donn√©, si autoris√©.
        Utilis√© pour les tris dans l'interface utilisateur.
        
        Args:
            champ_tri (str): Nom du champ √† utiliser pour le tri, peut inclure un '-' pour tri descendant
            
        Returns:
            QuerySet: Formations tri√©es selon le champ demand√©, ou sans tri si le champ n'est pas autoris√©
        """
        champs_autorises = [
            "centre", "-centre", "statut", "-statut",
            "type_offre", "-type_offre", "start_date", "-start_date",
            "end_date", "-end_date", "nom", "-nom",
            "total_places", "-total_places", "total_inscrits", "-total_inscrits",
            "taux_saturation", "-taux_saturation"
        ]
        
        if champ_tri in ["total_places", "-total_places", "total_inscrits", "-total_inscrits", 
                         "taux_saturation", "-taux_saturation"]:
            # Pour les champs calcul√©s, nous devons annoter le queryset
            queryset = self.get_queryset().annotate(
                total_places=models.F('prevus_crif') + models.F('prevus_mp'),
                total_inscrits=models.F('inscrits_crif') + models.F('inscrits_mp'),
                taux_saturation=Case(
                    When(total_places__gt=0, 
                         then=ExpressionWrapper(
                            100.0 * models.F('total_inscrits') / models.F('total_places'),
                            output_field=FloatField()
                         )),
                    default=Value(0.0),
                    output_field=FloatField()
                )
            )
            return queryset.order_by(champ_tri)
        
        return self.get_queryset().order_by(champ_tri) if champ_tri in champs_autorises else self.get_queryset()
        
    def recherche(self, texte=None, type_offre=None, centre=None, statut=None, 
                 date_debut=None, date_fin=None, places_disponibles=False):
        """
        Recherche avanc√©e de formations selon diff√©rents crit√®res.
        
        Args:
            texte (str, optional): Texte √† rechercher dans le nom ou les num√©ros
            type_offre (int, optional): ID du type d'offre
            centre (int, optional): ID du centre
            statut (int, optional): ID du statut
            date_debut (date, optional): Date de d√©but minimum
            date_fin (date, optional): Date de fin maximum
            places_disponibles (bool, optional): Si True, seulement les formations avec places
            
        Returns:
            QuerySet: Formations correspondant aux crit√®res
        """
        queryset = self.get_queryset()
        
        # Filtres textuels
        if texte:
            queryset = queryset.filter(
                Q(nom__icontains=texte) | 
                Q(num_kairos__icontains=texte) | 
                Q(num_offre__icontains=texte) |
                Q(num_produit__icontains=texte)
            )
        
        # Filtres sur les relations
        if type_offre:
            queryset = queryset.filter(type_offre_id=type_offre)
        if centre:
            queryset = queryset.filter(centre_id=centre)
        if statut:
            queryset = queryset.filter(statut_id=statut)
        
        # Filtres sur les dates
        if date_debut:
            queryset = queryset.filter(start_date__gte=date_debut)
        if date_fin:
            queryset = queryset.filter(end_date__lte=date_fin)
        
        # Filtre sur les places disponibles
        if places_disponibles:
            queryset = queryset.annotate(
                total_places=models.F('prevus_crif') + models.F('prevus_mp'),
                total_inscrits=models.F('inscrits_crif') + models.F('inscrits_mp')
            ).filter(total_places__gt=models.F('total_inscrits'))
        
        return queryset

    def get_formations_with_metrics(self):
        """
        R√©cup√®re les formations avec les m√©triques annot√©es pour optimiser les performances.
        
        Returns:
            QuerySet: Formations avec m√©triques pr√©-calcul√©es
        """
        return self.annotate(
            total_places=models.F('prevus_crif') + models.F('prevus_mp'),
            total_inscrits=models.F('inscrits_crif') + models.F('inscrits_mp'),
            places_disponibles=models.ExpressionWrapper(
                models.F('total_places') - models.F('total_inscrits'),
                output_field=models.IntegerField()
            ),
            taux_saturation=Case(
                When(total_places__gt=0, 
                    then=ExpressionWrapper(
                        100.0 * models.F('total_inscrits') / models.F('total_places'),
                        output_field=models.FloatField()
                    )),
                default=Value(0.0),
                output_field=models.FloatField()
            )
        )

    def increment_attendees(self, formation_id, count=1, user=None, crif=True):
        """
        Incr√©mente le nombre d'inscrits de fa√ßon thread-safe.
        
        Args:
            formation_id (int): ID de la formation
            count (int): Nombre d'inscrits √† ajouter
            user (User, optional): Utilisateur effectuant l'action
            crif (bool): Si True, incr√©mente les inscrits CRIF, sinon MP
            
        Returns:
            Formation: Instance mise √† jour
        """
        with transaction.atomic():
            formation = self.select_for_update().get(pk=formation_id)
            
            field = 'inscrits_crif' if crif else 'inscrits_mp'
            old_val = getattr(formation, field)
            setattr(formation, field, old_val + count)
            
            formation.save(update_fields=[field], user=user)
            return formation


class Formation(BaseModel):
    """
    üìö Mod√®le repr√©sentant une formation.
    
    Ce mod√®le stocke toutes les informations relatives √† une formation:
    - Informations g√©n√©rales (nom, centre, type, statut)
    - Dates et identifiants administratifs
    - Gestion des places et inscriptions
    - Statistiques et suivi
    
    Attributs:
        nom (str): Nom de la formation
        centre (Centre): Centre o√π se d√©roule la formation
        type_offre (TypeOffre): Type d'offre de formation
        statut (Statut): Statut actuel de la formation
        start_date (date): Date de d√©but
        end_date (date): Date de fin
        prevus_crif (int): Places pr√©vues CRIF
        prevus_mp (int): Places pr√©vues MP
        inscrits_crif (int): Inscrits CRIF
        inscrits_mp (int): Inscrits MP
        
    Propri√©t√©s:
        total_places (int): Somme des places CRIF et MP
        total_inscrits (int): Somme des inscrits CRIF et MP
        places_disponibles (int): Places restantes disponibles
        taux_saturation (float): Pourcentage d'occupation des places
        
    M√©thodes:
        add_commentaire: Ajoute un commentaire √† la formation
        add_document: Ajoute un document √† la formation
        add_evenement: Ajoute un √©v√©nement √† la formation
    """
    
    # Constantes pour les limites de champs
    NOM_MAX_LENGTH = 255
    NUM_MAX_LENGTH = 50
    ASSISTANTE_MAX_LENGTH = 255
    
    # Champs statistiques calcul√©s automatiquement
    FIELDS_CALCULATED = ['nombre_candidats', 'nombre_entretiens', 'nombre_evenements']
    
    # Champs √† journaliser dans l'historique
    FIELDS_TO_TRACK = [
        'nom', 'centre', 'type_offre', 'statut', 'start_date', 'end_date',
        'num_kairos', 'num_offre', 'num_produit', 'prevus_crif', 'prevus_mp',
        'inscrits_crif', 'inscrits_mp', 'assistante', 'cap', 'convocation_envoie',
        'entree_formation', 'nombre_candidats', 'nombre_entretiens', 'dernier_commentaire'
    ]

    # Informations g√©n√©rales
    nom = models.CharField(
        max_length=NOM_MAX_LENGTH, 
        verbose_name=_("Nom de la formation"),
        help_text=_("Intitul√© complet de la formation")
    )
    
    centre = models.ForeignKey(
        Centre, 
        on_delete=models.CASCADE, 
        related_name='formations', 
        verbose_name=_("Centre de formation"),
        help_text=_("Centre o√π se d√©roule la formation")
    )
    
    type_offre = models.ForeignKey(
        TypeOffre, 
        on_delete=models.CASCADE, 
        related_name="formations", 
        verbose_name=_("Type d'offre"),
        help_text=_("Cat√©gorie d'offre de formation")
    )
    
    statut = models.ForeignKey(
        Statut, 
        on_delete=models.CASCADE, 
        related_name="formations", 
        verbose_name=_("Statut de la formation"),
        help_text=_("√âtat actuel de la formation")
    )

    # Dates et identifiants
    start_date = models.DateField(
        null=True, 
        blank=True, 
        verbose_name=_("Date de d√©but"),
        help_text=_("Date de d√©but de la formation")
    )
    
    end_date = models.DateField(
        null=True, 
        blank=True, 
        verbose_name=_("Date de fin"),
        help_text=_("Date de fin de la formation")
    )
    
    num_kairos = models.CharField(
        max_length=NUM_MAX_LENGTH, 
        null=True, 
        blank=True, 
        verbose_name=_("Num√©ro Kairos"),
        help_text=_("Identifiant Kairos de la formation")
    )
    
    num_offre = models.CharField(
        max_length=NUM_MAX_LENGTH, 
        null=True, 
        blank=True, 
        verbose_name=_("Num√©ro de l'offre"),
        help_text=_("Identifiant de l'offre")
    )
    
    num_produit = models.CharField(
        max_length=NUM_MAX_LENGTH, 
        null=True, 
        blank=True, 
        verbose_name=_("Num√©ro du produit"),
        help_text=_("Identifiant du produit de formation")
    )

    # Gestion des places et inscriptions
    prevus_crif = models.PositiveIntegerField(
        default=0, 
        verbose_name=_("Places pr√©vues CRIF"),
        help_text=_("Nombre de places disponibles CRIF")
    )
    
    prevus_mp = models.PositiveIntegerField(
        default=0, 
        verbose_name=_("Places pr√©vues MP"),
        help_text=_("Nombre de places disponibles MP")
    )
    
    inscrits_crif = models.PositiveIntegerField(
        default=0, 
        verbose_name=_("Inscrits CRIF"),
        help_text=_("Nombre d'inscrits CRIF")
    )
    
    inscrits_mp = models.PositiveIntegerField(
        default=0, 
        verbose_name=_("Inscrits MP"),
        help_text=_("Nombre d'inscrits MP")
    )

    saturation = models.FloatField(
        null=True, 
        blank=True, 
        verbose_name=_("Niveau de saturation moyen"),
        help_text=_("Pourcentage moyen de saturation bas√© sur les commentaires")
    )

    # Informations suppl√©mentaires
    assistante = models.CharField(
        max_length=ASSISTANTE_MAX_LENGTH, 
        null=True, 
        blank=True, 
        verbose_name=_("Assistante"),
        help_text=_("Nom de l'assistante responsable")
    )
    
    cap = models.PositiveIntegerField(
        null=True, 
        blank=True, 
        verbose_name=_("Capacit√© maximale"),
        help_text=_("Capacit√© maximale d'accueil")
    )
    
    convocation_envoie = models.BooleanField(
        default=False, 
        verbose_name=_("Convocation envoy√©e"),
        help_text=_("Indique si les convocations ont √©t√© envoy√©es")
    )
    
    entree_formation = models.PositiveIntegerField(
        default=0, 
        verbose_name=_("Entr√©es en formation"),
        help_text=_("Nombre de personnes entr√©es en formation")
    )

    # Statistiques de recrutement
    nombre_candidats = models.PositiveIntegerField(
        default=0, 
        verbose_name=_("Nombre de candidats"),
        help_text=_("Nombre total de candidats pour cette formation")
    )
    
    nombre_entretiens = models.PositiveIntegerField(
        default=0, 
        verbose_name=_("Nombre d'entretiens"),
        help_text=_("Nombre d'entretiens r√©alis√©s")
    )
    
    nombre_evenements = models.PositiveIntegerField(
        default=0, 
        verbose_name=_("Nombre d'√©v√©nements"),
        help_text=_("Nombre d'√©v√©nements li√©s √† cette formation")
    )
    
    dernier_commentaire = models.TextField(
        null=True, 
        blank=True, 
        verbose_name=_("Dernier commentaire"),
        help_text=_("Contenu du dernier commentaire ajout√©")
    )

    partenaires = models.ManyToManyField(
        Partenaire, 
        related_name="formations", 
        verbose_name=_("Partenaires"), 
        blank=True,
        help_text=_("Partenaires associ√©s √† cette formation")
    )
    
    # Managers
    objects = FormationManager()

    def clean(self):
        """
        Validation des donn√©es avant sauvegarde.
        
        Raises:
            ValidationError: Si les donn√©es ne sont pas valides
        """
        super().clean()
        
        # Validation des dates
        if self.start_date and self.end_date and self.start_date > self.end_date:
            raise ValidationError({
                'start_date': _("La date de d√©but doit √™tre ant√©rieure √† la date de fin."),
                'end_date': _("La date de fin doit √™tre post√©rieure √† la date de d√©but."),
            })
            
        # Validation des places
        if self.inscrits_crif > self.prevus_crif and self.prevus_crif > 0:
            logger.warning(f"Inscrits CRIF ({self.inscrits_crif}) sup√©rieurs aux pr√©vus ({self.prevus_crif}) pour {self.nom}")
            
        if self.inscrits_mp > self.prevus_mp and self.prevus_mp > 0:
            logger.warning(f"Inscrits MP ({self.inscrits_mp}) sup√©rieurs aux pr√©vus ({self.prevus_mp}) pour {self.nom}")
            
        # Validation du nom
        if not self.nom.strip():
            raise ValidationError({'nom': _("Le nom de la formation ne peut pas √™tre vide.")})

    def save(self, *args, **kwargs):
        """
        üíæ Sauvegarde la formation avec journalisation des modifications.
        
        - Valide les donn√©es avec `full_clean()`
        - Utilise `transaction.atomic` pour la coh√©rence
        - Cr√©e des entr√©es dans l'historique pour chaque champ modifi√©
        - Permet le suivi utilisateur via `user=...` dans `kwargs`
        
        Args:
            *args: Arguments positionnels pour super().save()
            **kwargs: Arguments nomm√©s, notamment user
        """
        user = kwargs.pop("user", None)
        skip_history = kwargs.pop("skip_history", False)  # Option pour d√©sactiver l'historique
        update_fields = kwargs.get("update_fields", None)  # Champs √† mettre √† jour
        
        is_new = self.pk is None
        original = None if is_new else self.__class__.objects.filter(pk=self.pk).first()
        
        # Validation des donn√©es
        self.full_clean()

        with transaction.atomic():
            # Transmission de l'utilisateur au BaseModel si fourni
            if user:
                self._user = user
                
            # Journalisation de l'action
            if is_new:
                logger.info(f"[Formation] Cr√©√©e : {self.nom}")
            else:
                logger.info(f"[Formation] Modifi√©e : {self.nom} (#{self.pk})")
            
            # Sauvegarde
            super().save(*args, **kwargs)
            
            # Cr√©ation de l'historique pour chaque champ modifi√©
            if not skip_history and original:
                self._create_history_entries(original, user, update_fields)

    def _create_history_entries(self, original, user, update_fields=None):
        """
        Cr√©e des entr√©es d'historique pour les champs modifi√©s.
        
        Args:
            original (Formation): Instance originale avant modifications
            user (User): Utilisateur ayant effectu√© les modifications
            update_fields (list, optional): Liste des champs mis √† jour
        """
        fields_to_check = update_fields or self.FIELDS_TO_TRACK
        
        for field in fields_to_check:
            if field not in self.FIELDS_TO_TRACK:
                continue
                
            old_val = getattr(original, field)
            new_val = getattr(self, field)
            
            if old_val != new_val:
                # Formatage des valeurs pour les champs sp√©ciaux
                old_val_str = self._format_field_for_history(field, old_val)
                new_val_str = self._format_field_for_history(field, new_val)
                
                # Cr√©ation de l'entr√©e d'historique
                HistoriqueFormation.objects.create(
                    formation=self,
                    champ_modifie=field,
                    ancienne_valeur=old_val_str,
                    nouvelle_valeur=new_val_str,
                    commentaire=f"Changement dans le champ {field}",
                    created_by=user,
                    details={"user": user.pk if user else None}
                )
                
                logger.debug(f"[Formation] Historique cr√©√© pour {field}: {old_val_str} ‚Üí {new_val_str}")
    
    def _format_field_for_history(self, field_name, value):
        """
        Formate une valeur de champ pour l'historique.
        
        Args:
            field_name (str): Nom du champ
            value: Valeur √† formater
            
        Returns:
            str: Valeur format√©e pour l'historique
        """
        if value is None:
            return ""
            
        if isinstance(value, models.Model):
            return str(value.pk)
            
        if isinstance(value, (datetime.date, datetime.datetime)):
            return value.isoformat()
            
        return str(value)

    def to_serializable_dict(self):
        """
        üì¶ Retourne une repr√©sentation s√©rialisable pour API.
        
        Returns:
            dict: Donn√©es s√©rialisables de la formation
        """
        def convert_value(value):
            if isinstance(value, datetime.datetime):
                return value.strftime('%Y-%m-%d %H:%M')
            elif isinstance(value, datetime.date):
                return value.strftime('%Y-%m-%d')
            elif isinstance(value, models.Model):
                return {"id": value.pk, "nom": str(value)}
            return value

        # Donn√©es de base
        base_data = {key: convert_value(getattr(self, key)) for key in [
            "nom", "start_date", "end_date", "num_kairos", "num_offre", "num_produit",
            "prevus_crif", "prevus_mp", "inscrits_crif", "inscrits_mp", "assistante", "cap",
            "convocation_envoie", "entree_formation", "nombre_candidats",
            "nombre_entretiens", "nombre_evenements", "dernier_commentaire"
        ]}

        # Relations
        base_data.update({
            "id": self.pk,
            "centre": convert_value(self.centre),
            "type_offre": convert_value(self.type_offre),
            "statut": convert_value(self.statut),
            "statut_color": self.get_status_color(),
            "created_at": convert_value(self.created_at),
            "updated_at": convert_value(self.updated_at),
            "status_temporel": self.status_temporel,  # Ajout du statut temporel
        })

        # Propri√©t√©s calcul√©es
        for prop in ["total_places", "total_inscrits", "taux_transformation", 
                    "taux_saturation", "places_disponibles", "is_a_recruter"]:
            base_data[prop] = getattr(self, prop)

        return base_data

    def __str__(self):
        """Repr√©sentation textuelle de la formation."""
        return f"{self.nom} ({self.centre.nom if self.centre else 'Centre inconnu'})"
        
    def __repr__(self):
        """Repr√©sentation technique pour le d√©bogage."""
        return f"<Formation(id={self.pk}, nom='{self.nom}', statut='{self.statut}' if self.statut else 'None')>"

        
    def get_edit_url(self):
        """
        üîó URL vers la page d'√©dition de la formation.
        
        Returns:
            str: URL de la page d'√©dition
        """
        return reverse('formation-edit', kwargs={'pk': self.pk})
        
    def get_delete_url(self):
        """
        üîó URL vers la page de suppression de la formation.
        
        Returns:
            str: URL de la page de suppression
        """
        return reverse('formation-delete', kwargs={'pk': self.pk})

    # ===== Propri√©t√©s calcul√©es =====
    
    @property
    def total_places(self): 
        """Nombre total de places disponibles (CRIF + MP)."""
        return self.prevus_crif + self.prevus_mp
        
    @property
    def total_inscrits(self): 
        """Nombre total d'inscrits (CRIF + MP)."""
        return self.inscrits_crif + self.inscrits_mp
        
    @property
    def places_restantes_crif(self): 
        """Places restantes pour CRIF."""
        return max(self.prevus_crif - self.inscrits_crif, 0)
        
    @property
    def places_restantes_mp(self): 
        """Places restantes pour MP."""
        return max(self.prevus_mp - self.inscrits_mp, 0)
        
    @property
    def places_disponibles(self): 
        """Nombre total de places encore disponibles."""
        return max(0, self.total_places - self.total_inscrits)
        
    @property
    def taux_saturation(self): 
        """Taux d'occupation des places en pourcentage."""
        return round(100.0 * self.total_inscrits / self.total_places, 2) if self.total_places else 0.0
        
    @property
    def taux_transformation(self): 
        """Taux de transformation candidats ‚Üí inscrits."""
        return round(100.0 * self.total_inscrits / (self.nombre_candidats or 1), 2)
        
    @property
    def a_recruter(self): 
        """Nombre de places √† pourvoir (legacy)."""
        return self.places_disponibles
        
    @property
    def is_a_recruter(self): 
        """Indique s'il reste des places disponibles."""
        return self.places_disponibles > 0
        
    @property
    def is_active(self):
        """
        D√©termine si la formation est actuellement active.
        
        Returns:
            bool: True si la formation est en cours
        """
        today = timezone.now().date()
        return (self.start_date <= today <= self.end_date) if (self.start_date and self.end_date) else False
        
    @property
    def is_future(self):
        """
        D√©termine si la formation n'a pas encore commenc√©.
        
        Returns:
            bool: True si la formation est √† venir
        """
        today = timezone.now().date()
        return (self.start_date > today) if self.start_date else False
        
    @property
    def is_past(self):
        """
        D√©termine si la formation est termin√©e.
        
        Returns:
            bool: True si la formation est termin√©e
        """
        today = timezone.now().date()
        return (self.end_date < today) if self.end_date else False
        
    @cached_property
    def status_temporel(self):
        """
        Statut temporel de la formation (actif, pass√©, futur).
        
        Returns:
            str: 'active', 'past', 'future' ou 'unknown'
        """
        if self.is_active:
            return 'active'
        elif self.is_future:
            return 'future'
        elif self.is_past:
            return 'past'
        return 'unknown'

    # ===== M√©thodes d'ajout de contenu =====

    def add_commentaire(self, user, contenu: str, saturation=None):
            """
            Ajoute un commentaire √† la formation.
            
            Args:
                user (User): Utilisateur cr√©ant le commentaire
                contenu (str): Texte du commentaire
                saturation (int, optional): Niveau de saturation (0-100)
                
            Returns:
                Commentaire: Instance du commentaire cr√©√©
            """
            from .commentaires import Commentaire
            
            # Validation de base
            if not contenu.strip():
                raise ValidationError("Le commentaire ne peut pas √™tre vide.")
                
            # Cr√©ation du commentaire
            commentaire = Commentaire.objects.create(
                formation=self,
                contenu=contenu,
                saturation=saturation,
                created_by=user
            )
            
            # Mise √† jour du dernier commentaire
            ancien_commentaire = self.dernier_commentaire
            self.dernier_commentaire = contenu
            self.save(
                update_fields=['dernier_commentaire'], 
                skip_history=True
            )

            # Cr√©ation de l'historique
            HistoriqueFormation.objects.create(
                formation=self,
                champ_modifie="dernier_commentaire",
                ancienne_valeur=ancien_commentaire or "",
                nouvelle_valeur=contenu,
                commentaire=f"Commentaire ajout√© par {user.get_full_name() or user.username}",
                created_by=user
            )
            
            # Mise √† jour de la saturation si fournie
            if saturation is not None:
                self.update_saturation_from_commentaires()
                
            return commentaire

    def add_document(self, user, fichier, titre: str, type_document=None):
        """
        Ajoute un document √† la formation.

        Args:
            user (User): Utilisateur ajoutant le document.
            fichier (File): Fichier √† t√©l√©verser.
            titre (str): Titre du document (nom lisible).
            type_document (str): Type du document (pdf, image, contrat, autre...).

        Returns:
            Document: Instance du document cr√©√©.
        """
        from .documents import Document
        from .formations import HistoriqueFormation

        # Validations
        if not titre or not titre.strip():
            raise ValidationError("Le titre du document ne peut pas √™tre vide.")
        if not fichier:
            raise ValidationError("Aucun fichier fourni.")

        titre = titre.strip()

        # Cr√©ation du document
        document = Document.objects.create(
            formation=self,
            fichier=fichier,
            nom_fichier=titre,
            type_document=type_document or Document.AUTRE,
            created_by=user
        )

        # Ajout dans l'historique
        HistoriqueFormation.objects.create(
            formation=self,
            champ_modifie="document",
            ancienne_valeur="‚Äî",
            nouvelle_valeur=titre,
            commentaire=f"Ajout du document ¬´ {titre} ¬ª",
            created_by=user
        )

        return document


    def add_evenement(self, type_evenement, event_date, details=None, description_autre=None, user=None):
        """
        Ajoute un √©v√©nement √† la formation.

        Args:
            type_evenement (str): Type d'√©v√©nement (utiliser Evenement.TypeEvenement.*)
            event_date (date): Date de l'√©v√©nement
            details (str, optional): D√©tails suppl√©mentaires
            description_autre (str, optional): Description si type = 'autre'
            user (User, optional): Utilisateur cr√©ant l'√©v√©nement

        Returns:
            Evenement: Instance de l'√©v√©nement cr√©√©

        Raises:
            ValidationError: Si description manquante pour un √©v√©nement de type 'Autre'
        """
        from .evenements import Evenement

        # Validation pour type 'autre'
        if type_evenement == Evenement.TypeEvenement.AUTRE and not description_autre:
            raise ValidationError("Veuillez fournir une description pour un √©v√©nement de type 'Autre'.")

        # Cr√©ation de l'√©v√©nement
        evenement = Evenement.objects.create(
            formation=self,
            type_evenement=type_evenement,
            event_date=event_date,
            details=details,
            description_autre=description_autre if type_evenement == Evenement.TypeEvenement.AUTRE else None,
            created_by=user
        )

        # Mise √† jour du compteur d'√©v√©nements
        Formation.objects.filter(pk=self.pk).update(nombre_evenements=F('nombre_evenements') + 1)
        self.refresh_from_db(fields=['nombre_evenements'])


        # Cr√©ation de l'historique
        event_date_str = event_date.strftime('%Y-%m-%d') if event_date else "Date non d√©finie"
        type_display = (
            description_autre if type_evenement == Evenement.TypeEvenement.AUTRE
            else dict(Evenement.TypeEvenement.choices).get(type_evenement, type_evenement)
        )

        from .formations import HistoriqueFormation
        HistoriqueFormation.objects.create(
            formation=self,
            champ_modifie="evenement",
            nouvelle_valeur=f"{type_display} le {event_date_str}",
            commentaire="Ajout d'un √©v√©nement",
            created_by=user
        )

        return evenement

    def add_partenaire(self, partenaire: Partenaire, user=None) -> None:
        """
        Ajoute un partenaire √† la formation avec journalisation.
        
        Args:
            partenaire (Partenaire): Instance du partenaire √† ajouter
            user (User, optional): Utilisateur effectuant l'ajout
        """
        if partenaire in self.partenaires.all():
            raise ValidationError(f"Le partenaire ¬´ {partenaire.nom} ¬ª est d√©j√† li√© √† cette formation.")

        self.partenaires.add(partenaire)
        self.save(update_fields=[], skip_history=True)

        HistoriqueFormation.objects.create(
            formation=self,
            champ_modifie="partenaire",
            ancienne_valeur="‚Äî",
            nouvelle_valeur=partenaire.nom,
            commentaire=f"Ajout du partenaire ¬´ {partenaire.nom} ¬ª",
            created_by=user,
            action=HistoriqueFormation.ActionType.AJOUT
        )


    # ===== M√©thodes de r√©cup√©ration de donn√©es li√©es =====
    
    def get_partenaires(self):
        """
        R√©cup√®re tous les partenaires li√©s √† cette formation.
        
        Returns:
            QuerySet: Partenaires associ√©s
        """
        return self.partenaires.all().prefetch_related()

    def get_commentaires(self, include_saturation=False, limit=None):
        """
        R√©cup√®re tous les commentaires li√©s √† cette formation.
        Optimis√© avec annotation optionnelle du niveau de saturation.
        
        Args:
            include_saturation (bool): Si True, inclut les commentaires avec saturation non nulle
            limit (int, optional): Limite le nombre de commentaires retourn√©s
            
        Returns:
            QuerySet: Commentaires tri√©s par date (plus r√©cents en premier)
        """
        queryset = self.commentaires.select_related("created_by")
        
        # Filtrer les commentaires avec saturation si demand√©
        if include_saturation:
            queryset = queryset.filter(saturation__isnull=False)
            
        # Appliquer le tri standard
        queryset = queryset.order_by('-created_at')
        
        # Limiter le nombre de r√©sultats si n√©cessaire
        if limit is not None:
            queryset = queryset[:limit]
            
        return queryset

    def get_evenements(self):
        """
        R√©cup√®re tous les √©v√©nements li√©s √† cette formation.
        
        Returns:
            QuerySet: √âv√©nements tri√©s par date (plus r√©cents en premier)
        """
        return self.evenements.select_related("created_by").order_by('-event_date')

    def get_documents(self, est_public=None):
        """
        R√©cup√®re tous les documents li√©s √† cette formation.
        
        Args:
            est_public (bool, optional): Si sp√©cifi√©, filtre les documents publics/priv√©s
            
        Returns:
            QuerySet: Documents associ√©s
        """
        queryset = self.documents.select_related("uploaded_by")
        
        # Filtrer par visibilit√© si sp√©cifi√©
        if est_public is not None:
            queryset = queryset.filter(est_public=est_public)
            
        return queryset

    def get_prospections(self):
        """
        Retourne toutes les prospections li√©es √† cette formation.

        Returns:
            QuerySet[Prospection]: Liste des prospections li√©es.
        """
        return self.prospection_set.all()

    def get_historique(self, limit=None):
        """
        R√©cup√®re l'historique des modifications de cette formation.
        
        Args:
            limit (int, optional): Nombre maximum d'entr√©es √† retourner
            
        Returns:
            QuerySet: Entr√©es d'historique tri√©es par date (plus r√©centes en premier)
        """
        queryset = self.historiques.select_related("created_by").order_by('-created_at')
        return queryset[:limit] if limit else queryset

    # ===== M√©thodes de calcul et mise √† jour =====

    def update_saturation_from_commentaires(self):
        """
        Met √† jour le niveau de saturation moyen bas√© sur les commentaires.
        
        Returns:
            bool: True si la mise √† jour a √©t√© effectu√©e
        """
        from .commentaires import Commentaire
        
        # R√©cup√©ration des valeurs de saturation
        saturations = Commentaire.objects.filter(
            formation=self,
            saturation__isnull=False
        ).values_list('saturation', flat=True)
        
        # Calcul de la moyenne si des donn√©es existent
        if saturations:
            self.saturation = round(sum(saturations) / len(saturations), 2)
            self.save(update_fields=['saturation'])
            logger.info(f"[Formation] Saturation mise √† jour pour {self.nom}: {self.saturation}%")
            return True
            
        return False

    def get_saturation_moyenne_commentaires(self):
        """
        Calcule la saturation moyenne bas√©e sur les commentaires.
        
        Returns:
            float: Saturation moyenne ou None
        """
        from .commentaires import Commentaire
        
        saturations = Commentaire.objects.filter(
            formation=self,
            saturation__isnull=False
        ).values_list('saturation', flat=True)
        
        return round(sum(saturations) / len(saturations), 2) if saturations else None

    def get_status_color(self):
        """
        Retourne la couleur associ√©e au statut de la formation.
        
        Returns:
            str: Code couleur CSS
        """
        return self.statut.couleur if self.statut and self.statut.couleur else get_default_color(self.statut.nom if self.statut else "")
    
    def duplicate(self, user=None, **kwargs):
        """
        Cr√©e une copie de cette formation avec possibilit√© de modifier certains champs.
        
        Args:
            user (User, optional): Utilisateur effectuant la duplication
            **kwargs: Champs √† modifier dans la copie
            
        Returns:
            Formation: Nouvelle instance de formation
        """
        # Exclure les champs qui ne doivent pas √™tre copi√©s
        exclude_fields = ['id', 'pk', 'created_at', 'updated_at', 'created_by', 
                          'updated_by', 'dernier_commentaire', 'nombre_candidats',
                          'nombre_entretiens', 'nombre_evenements']
        
        # Cr√©er un dictionnaire avec les valeurs des champs √† copier
        field_dict = {f.name: getattr(self, f.name) 
                     for f in self._meta.fields 
                     if f.name not in exclude_fields}
        
        # Appliquer les modifications sp√©cifi√©es
        field_dict.update(kwargs)
        
        # Par d√©faut, ajouter "(Copie)" au nom si non sp√©cifi√©
        if 'nom' not in kwargs:
            field_dict['nom'] = f"{self.nom} (Copie)"
        
        # Cr√©er la nouvelle instance
        new_formation = Formation.objects.create(**field_dict)
        
        # Copier les relations many-to-many si n√©cessaire
        new_formation.partenaires.set(self.partenaires.all())
        
        # Journaliser la duplication
        HistoriqueFormation.objects.create(
            formation=new_formation,
            champ_modifie="creation",
            nouvelle_valeur="Duplication",
            commentaire=f"Dupliqu√© depuis la formation #{self.pk}: {self.nom}",
            created_by=user,
            action=HistoriqueFormation.ActionType.AJOUT
        )
        
        return new_formation
    
    @classmethod
    def get_csv_fields(cls):
        """
        Liste des champs √† inclure dans un export CSV/Excel.
        
        Returns:
            list: Noms des champs
        """
        return [
            'id', 'nom', 'centre', 'type_offre', 'statut', 'start_date', 'end_date',
        'num_kairos', 'num_offre', 'num_produit', 'prevus_crif', 'prevus_mp',
        'inscrits_crif', 'inscrits_mp', 'assistante', 'cap', 'convocation_envoie',
        'entree_formation',
        ]

    @classmethod
    def get_csv_headers(cls):
        return [
            'ID', 'Nom', 'Centre', 'Type d\'offre', 'Statut',
            'Date de d√©but', 'Date de fin', 'Num Kairos', 'Num Offre', 'Num Produit',
            'Places CRIF', 'Places MP', 'Inscrits CRIF', 'Inscrits MP',
            'Assistante', 'CAP', 'Convocation envoy√©e', 'Entr√©e en formation'
        ]

    def to_csv_row(self):
        return [
            self.pk,
            self.nom,
            self.centre.nom if self.centre else '',
            self.type_offre.nom if self.type_offre else '',
            self.statut.nom if self.statut else '',
            self.start_date.strftime('%d/%m/%Y') if self.start_date else '',
            self.end_date.strftime('%d/%m/%Y') if self.end_date else '',
            self.num_kairos or '',
            self.num_offre or '',
            self.num_produit or '',
            self.prevus_crif,
            self.prevus_mp,
            self.inscrits_crif,
            self.inscrits_mp,
            self.assistante or '',
            self.cap or '',
            self.convocation_envoie,
            self.entree_formation,         ]
        
    @classmethod
    def get_stats_par_mois(cls, annee=None):
        """
        Calcule des statistiques mensuelles sur les formations.
        
        Args:
            annee (int, optional): Ann√©e pour les statistiques, par d√©faut l'ann√©e en cours
            
        Returns:
            dict: Statistiques par mois
        """
        annee = annee or timezone.now().year
        
        # Pr√©paration du dictionnaire de r√©sultat
        mois_labels = [
            "Janvier", "F√©vrier", "Mars", "Avril", "Mai", "Juin", 
            "Juillet", "Ao√ªt", "Septembre", "Octobre", "Novembre", "D√©cembre"
        ]
        result = {i+1: {"label": mois_labels[i], "count": 0, "inscrits": 0} for i in range(12)}
        
        # Requ√™te pour compter les formations par mois
        formations_par_mois = cls.objects.filter(
            start_date__year=annee
        ).values(
            'start_date__month'
        ).annotate(
            count=Count('id'),
            inscrits=Sum(F('inscrits_crif') + F('inscrits_mp'))
        )
        
        # Remplissage des r√©sultats
        for item in formations_par_mois:
            mois = item['start_date__month']
            if mois in result:
                result[mois]["count"] = item['count']
                result[mois]["inscrits"] = item['inscrits'] or 0
                
        return result

    class Meta:
        verbose_name = _("Formation")
        verbose_name_plural = _("Formations")
        ordering = ['-start_date', 'nom']
        indexes = [
            models.Index(fields=['start_date'], name='form_start_date_idx'),
            models.Index(fields=['end_date'], name='form_end_date_idx'),
            models.Index(fields=['nom'], name='form_nom_idx'),
            models.Index(fields=['statut'], name='form_statut_idx'),
            models.Index(fields=['type_offre'], name='form_type_offre_idx'),
            models.Index(fields=['convocation_envoie'], name='form_convoc_idx'),
            models.Index(fields=['centre'], name='form_centre_idx'),
            models.Index(fields=['start_date', 'end_date'], name='form_dates_idx'),
        ]
        constraints = [
            models.CheckConstraint(
                check=Q(
                    Q(start_date__isnull=True) | 
                    Q(end_date__isnull=True) | 
                    Q(start_date__lte=F('end_date'))
                ),
                name="formation_dates_coherentes"
            )
        ]


class HistoriqueFormation(BaseModel):
    """
    üïì Historique de modification d'une formation.

    Ce mod√®le trace tous les changements appliqu√©s √† une formation, champ par champ,
    avec la date, l'utilisateur et un commentaire facultatif.
    
    Attributs:
        formation (Formation): Formation concern√©e par la modification
        action (str): Type d'action (modification, ajout, suppression)
        champ_modifie (str): Nom du champ modifi√©
        ancienne_valeur (str): Valeur avant modification
        nouvelle_valeur (str): Valeur apr√®s modification
        commentaire (str): Commentaire explicatif
        details (dict): Donn√©es contextuelles suppl√©mentaires
        
    Propri√©t√©s:
        utilisateur_nom (str): Nom de l'utilisateur ayant fait la modification
    """
    
    # Constantes pour les limites de champs
    ACTION_MAX_LENGTH = 100
    CHAMP_MAX_LENGTH = 100
    
    # Choix pour le type d'action
    class ActionType(models.TextChoices):
        MODIFICATION = 'modification', _('Modification')
        AJOUT = 'ajout', _('Ajout')
        SUPPRESSION = 'suppression', _('Suppression')
        COMMENTAIRE = 'commentaire', _('Commentaire')
        DOCUMENT = 'document', _('Document')
        EVENEMENT = 'evenement', _('√âv√©nement')

    formation = models.ForeignKey(
        'Formation',
        on_delete=models.CASCADE,
        related_name="historiques",
        verbose_name=_("Formation concern√©e"),
        help_text=_("Formation √† laquelle ce changement est associ√©")
    )

    action = models.CharField(
        max_length=ACTION_MAX_LENGTH,
        choices=ActionType.choices,
        default=ActionType.MODIFICATION,
        verbose_name=_("Type d'action"),
        help_text=_("Nature de l'action r√©alis√©e (ex : modification, ajout)")
    )

    champ_modifie = models.CharField(
        max_length=CHAMP_MAX_LENGTH,
        verbose_name=_("Champ modifi√©"),
        help_text=_("Nom du champ ayant √©t√© modifi√©")
    )

    ancienne_valeur = models.TextField(
        null=True,
        blank=True,
        verbose_name=_("Ancienne valeur"),
        help_text=_("Valeur avant la modification")
    )

    nouvelle_valeur = models.TextField(
        null=True,
        blank=True,
        verbose_name=_("Nouvelle valeur"),
        help_text=_("Valeur apr√®s la modification")
    )

    commentaire = models.TextField(
        null=True,
        blank=True,
        verbose_name=_("Commentaire de modification"),
        help_text=_("Commentaire explicatif (facultatif)")
    )

    details = models.JSONField(
        default=dict,
        blank=True,
        verbose_name=_("D√©tails suppl√©mentaires"),
        help_text=_("Donn√©es contextuelles (ex : ID utilisateur, origine, etc.)")
    )

    class Meta:
        ordering = ['-created_at']
        verbose_name = _("Historique de modification de formation")
        verbose_name_plural = _("Historiques de modifications de formations")
        indexes = [
            models.Index(fields=['-created_at'], name='hist_form_date_idx'),
            models.Index(fields=['formation'], name='hist_form_formation_idx'),
            models.Index(fields=['action'], name='hist_form_action_idx'),
            models.Index(fields=['champ_modifie'], name='hist_form_champ_idx'),
        ]

    def __str__(self):
        """Repr√©sentation textuelle de l'entr√©e d'historique."""
        return f"Modification de {self.champ_modifie} le {self.created_at.strftime('%d/%m/%Y √† %H:%M')}"

    def save(self, *args, **kwargs):
        """
        Sauvegarde l'entr√©e d'historique de formation dans une transaction atomique.

        Cette m√©thode surcharge `save()` pour garantir que chaque cr√©ation ou mise √† jour
        d'une instance de `HistoriqueFormation` est encapsul√©e dans une transaction.
        Elle v√©rifie √©galement les doublons potentiels (m√™me champ modifi√©, m√™me utilisateur,
        m√™me valeur dans un intervalle court) pour √©viter la duplication d'entr√©es.

        Args:
            *args: Arguments positionnels transmis √† `super().save()`.
            **kwargs: Arguments nomm√©s transmis √† `super().save()`, notamment:
                skip_duplicate_check (bool): Si True, d√©sactive la v√©rification des doublons

        Returns:
            bool: True si sauvegard√©, False si doublon d√©tect√© et ignor√©
        """
        skip_duplicate_check = kwargs.pop("skip_duplicate_check", False)
        
        # V√©rification des doublons seulement pour les nouvelles entr√©es
        if not skip_duplicate_check and not self.pk:
            # Intervalle de temps pour consid√©rer les mises √† jour comme doublons (5 minutes par d√©faut)
            time_threshold = kwargs.pop("time_threshold", timezone.timedelta(minutes=5))
            cutoff_time = timezone.now() - time_threshold
            
            # Recherche des entr√©es similaires r√©centes
            recent_similar = HistoriqueFormation.objects.filter(
                formation=self.formation,
                champ_modifie=self.champ_modifie,
                created_by=self.created_by,
                nouvelle_valeur=self.nouvelle_valeur,
                created_at__gte=cutoff_time
            ).exists()
            
            if recent_similar:
                logger.info(f"[Historique] Doublon ignor√©: {self.champ_modifie} pour {self.formation}")
                return False

        with transaction.atomic():
            super().save(*args, **kwargs)
        
        logger.info(f"[Historique] {self}")
        return True


    def to_serializable_dict(self):
        """
        üì¶ Repr√©sentation JSON de l'entr√©e d'historique.

        Returns:
            dict: Contenu API-friendly.
        """
        return {
            "id": self.pk,
            "formation_id": self.formation_id,
            "formation_nom": str(self.formation),
            "champ": self.champ_modifie,
            "ancienne_valeur": self.ancienne_valeur,
            "nouvelle_valeur": self.nouvelle_valeur,
            "commentaire": self.commentaire,
            "action": self.action,
            "action_display": self.get_action_display(),
            "created_at": self.created_at.strftime('%Y-%m-%d %H:%M'),
            "utilisateur": self.utilisateur_nom,
            "details": self.details,
        }

    @property
    def utilisateur_nom(self):
        """
        üë§ Nom de l'utilisateur ayant r√©alis√© la modification.
        
        Returns:
            str: Nom complet de l'utilisateur ou "Inconnu"
        """
        if self.created_by:
            return f"{self.created_by.first_name} {self.created_by.last_name}".strip() or self.created_by.username
        return "Inconnu"
        
    @property
    def valeur_changement(self):
        """
        üí´ R√©cup√®re une repr√©sentation du changement effectu√©.
        
        Returns:
            str: Repr√©sentation du changement
        """
        if self.ancienne_valeur and self.nouvelle_valeur:
            return f"{self.ancienne_valeur} ‚Üí {self.nouvelle_valeur}"
        elif self.nouvelle_valeur:
            return f"Ajout: {self.nouvelle_valeur}"
        elif self.ancienne_valeur:
            return f"Suppression: {self.ancienne_valeur}"
        return "Aucun changement sp√©cifi√©"
        
    @classmethod
    def get_latest_changes(cls, limit=10):
        """
        R√©cup√®re les derniers changements, toutes formations confondues.
        
        Args:
            limit (int): Nombre maximum de changements √† retourner
            
        Returns:
            QuerySet: Derniers changements
        """
        return cls.objects.select_related('formation', 'created_by').order_by('-created_at')[:limit]