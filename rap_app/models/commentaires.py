import logging
from datetime import timedelta
from django.db import models
from django.db.models import Q, F, Avg, Count
from django.urls import reverse
from django.utils.html import strip_tags
from django.utils import timezone
from django.core.validators import MinValueValidator, MaxValueValidator
from django.core.exceptions import ValidationError
from django.template.loader import render_to_string
from weasyprint import HTML
from .base import BaseModel
from .formations import Formation
import csv
import io
from docx import Document
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from django.http import HttpResponse
from rest_framework.decorators import action

logger = logging.getLogger(__name__)

# ----------------------------------------------------
# Signaux d√©plac√©s dans signals/commentaires.py
# ----------------------------------------------------


class CommentaireManager(models.Manager):
    """
    Manager personnalis√© pour le mod√®le Commentaire.
    Fournit des m√©thodes optimis√©es pour les requ√™tes courantes.
    """
    
    def recents(self, days=7):
        """
        Retourne les commentaires post√©s dans les derniers jours.
        
        Args:
            days (int): Nombre de jours √† consid√©rer comme r√©cents
            
        Returns:
            QuerySet: Commentaires r√©cents
        """
        date_limite = timezone.now() - timedelta(days=days)
        return self.filter(created_at__gte=date_limite)
    
    def for_formation(self, formation_id):
        """
        Retourne tous les commentaires pour une formation donn√©e.
        
        Args:
            formation_id (int): ID de la formation
            
        Returns:
            QuerySet: Commentaires li√©s √† la formation sp√©cifi√©e
        """
        return self.filter(formation_id=formation_id).select_related('created_by')
    
    def with_saturation(self):
        """
        Retourne uniquement les commentaires avec une valeur de saturation.
        
        Returns:
            QuerySet: Commentaires avec saturation renseign√©e
        """
        return self.exclude(saturation__isnull=True)
    
    def search(self, query):
        """
        Recherche dans les commentaires.
        
        Args:
            query (str): Terme de recherche
            
        Returns:
            QuerySet: Commentaires correspondants
        """
        if not query:
            return self.all()
        
        return self.filter(Q(contenu__icontains=query) | 
                          Q(created_by__username__icontains=query) |
                          Q(formation__nom__icontains=query))


class Commentaire(BaseModel):
    """
    üí¨ Mod√®le repr√©sentant un commentaire associ√© √† une formation.

    Un commentaire est r√©dig√© par un utilisateur (ou anonyme) et li√© √† une formation.
    Il peut contenir un contenu libre, une saturation exprim√©e en %, et des m√©tadonn√©es utiles.
    
    Attributs:
        formation (Formation): Formation comment√©e (relation ForeignKey)
        contenu (str): Texte du commentaire
        saturation (int, optional): Niveau de saturation per√ßue (0-100%)
        
    Propri√©t√©s:
        auteur_nom (str): Nom de l'auteur ou "Anonyme"
        date_formatee (str): Date format√©e (JJ/MM/AAAA)
        heure_formatee (str): Heure format√©e (HH:MM)
        is_recent (bool): Indique si le commentaire est r√©cent
        
    M√©thodes:
        get_content_preview: Aper√ßu tronqu√© du contenu
        is_recent: V√©rifie si le commentaire est r√©cent
        to_serializable_dict: Dict s√©rialisable du commentaire
    """
    
    # Constantes pour √©viter les valeurs magiques
    SATURATION_MIN = 0
    SATURATION_MAX = 100
    PREVIEW_DEFAULT_LENGTH = 50
    RECENT_DEFAULT_DAYS = 7

    # === Champs relationnels ===
    formation = models.ForeignKey(
        Formation,
        on_delete=models.CASCADE,
        related_name="commentaires",
        verbose_name="Formation",
        help_text="Formation √† laquelle ce commentaire est associ√©"
    )

    # === Champs principaux ===
    contenu = models.TextField(
        verbose_name="Contenu du commentaire",
        help_text="Texte du commentaire (le HTML est automatiquement nettoy√©)"
    )

    saturation = models.PositiveIntegerField(
        null=True,
        blank=True,
        verbose_name="Niveau de saturation (%)",
        help_text="Pourcentage de saturation per√ßue dans la formation (entre 0 et 100)",
        validators=[
            MinValueValidator(SATURATION_MIN, message="La saturation ne peut pas √™tre n√©gative"),
            MaxValueValidator(SATURATION_MAX, message="La saturation ne peut pas d√©passer 100%")
        ]
    )
    
    saturation_formation = models.PositiveIntegerField(
    null=True,
    blank=True,
    verbose_name="Saturation de la formation (copi√©e)",
    help_text="Valeur de la saturation de la formation au moment du commentaire"
    )

    # === Managers === 
    objects = models.Manager()  # Manager par d√©faut
    custom = CommentaireManager()  # Manager personnalis√©

    # === M√©ta options ===
    class Meta:
        verbose_name = "Commentaire"
        verbose_name_plural = "Commentaires"
        ordering = ['formation', '-created_at']
        indexes = [
            models.Index(fields=['created_at'], name='comment_created_idx'),
            models.Index(fields=['formation', 'created_at'], name='comment_form_date_idx'),
            models.Index(fields=['created_by'], name='comment_author_idx'),
            models.Index(fields=['saturation'], name='comment_satur_idx'),
        ]
        constraints = [
            models.CheckConstraint(
                check=Q(saturation__isnull=True) | Q(saturation__gte=0) & Q(saturation__lte=100),
                name='commentaire_saturation_range'
            )
        ]

    def __str__(self):
        """
        üîÅ Repr√©sentation textuelle du commentaire.
        """
        auteur = self.created_by.username if self.created_by else "Anonyme"
        return f"Commentaire de {auteur} sur {self.formation.nom} ({self.created_at.strftime('%d/%m/%Y')})"
        
    def __repr__(self):
        """
        Repr√©sentation technique pour le d√©bogage.
        """
        return f"<Commentaire(id={self.pk}, formation={self.formation_id}, auteur={self.created_by_id})>"

    def clean(self):
        """
        Validation m√©tier sp√©cifique pour le commentaire.
        
        Raises:
            ValidationError: Si les donn√©es ne sont pas valides
        """
        super().clean()
        
        # Validation de la saturation
        if self.saturation is not None:
            if self.saturation < self.SATURATION_MIN or self.saturation > self.SATURATION_MAX:
                raise ValidationError({
                    'saturation': f"La saturation doit √™tre comprise entre {self.SATURATION_MIN} et {self.SATURATION_MAX}%"
                })
        
        # Validation du contenu (non vide)
        if not self.contenu.strip():
            raise ValidationError({
                'contenu': "Le contenu ne peut pas √™tre vide"
            })

    def save(self, *args, **kwargs):
        """
        üíæ Sauvegarde le commentaire apr√®s nettoyage et validation.

        - V√©rifie et contraint la valeur de `saturation` entre 0 et 100.
        - Copie la saturation de la formation (si disponible).
        - Validation des donn√©es m√©tier via `clean()`.
        """

        # ‚úÖ NE PAS nettoyer ici : on suppose que le frontend a d√©j√† valid√©/s√©curis√© le HTML
        pass

        # Clamp de la saturation
        if self.saturation is not None:
            self.saturation = max(self.SATURATION_MIN, min(self.SATURATION_MAX, self.saturation))

        # Copier la saturation de la formation (au moment de la cr√©ation)
        if self.formation and hasattr(self.formation, 'saturation'):
            self.saturation_formation = self.formation.saturation

        # Validation m√©tier
        self.clean()

        is_new = self.pk is None

        super().save(*args, **kwargs)

        logger.debug(f"Commentaire #{self.pk} {'cr√©√©' if is_new else 'mis √† jour'} pour la formation #{self.formation_id}")
        
    def delete(self, *args, **kwargs):
        """
        üóëÔ∏è Supprime le commentaire et met √† jour la formation associ√©e.
        
        Args:
            *args: Arguments positionnels pour `super().delete()`.
            **kwargs: Arguments nomm√©s pour `super().delete()`.
            update_formation (bool, optional): Mettre √† jour les infos de la formation
            
        Returns:
            tuple: R√©sultat de la suppression
        """
        # R√©cup√©rer et supprimer le param√®tre update_formation
        update_formation = kwargs.pop('update_formation', True)
        
        # Conserver une r√©f√©rence √† la formation
        formation = self.formation if update_formation else None
        
        # Supprimer l'objet
        result = super().delete(*args, **kwargs)
        
        # Mettre √† jour la formation si demand√©
        if update_formation and formation:
            self.update_formation_static(formation)
            
        logger.debug(f"Commentaire #{self.pk} supprim√© pour la formation #{self.formation_id}")
        
        return result

    def update_formation(self):
        """
        üîÑ Met √† jour les informations de la formation li√©e √† ce commentaire.
        
        Met √† jour:
        - Le champ dernier_commentaire de la formation
        - La saturation moyenne si applicable
        - Le compteur de commentaires
        
        Notes:
            Cette m√©thode ne devrait g√©n√©ralement pas √™tre appel√©e directement.
        """
        # Assurez-vous que cette m√©thode existe dans votre mod√®le Formation
        if hasattr(self.formation, 'update_from_commentaires'):
            self.formation.update_from_commentaires()
        else:
            # Impl√©mentation de secours si la m√©thode n'existe pas
            from django.db.models import Avg
            
            # Mise √† jour du dernier commentaire
            self.formation.dernier_commentaire = (
                Commentaire.objects.filter(formation=self.formation)
                .order_by('-created_at')
                .first()
            )
            
            # Calcul de la saturation moyenne
            saturation_avg = (
                Commentaire.objects.filter(formation=self.formation, saturation__isnull=False)
                .aggregate(Avg('saturation'))
                .get('saturation__avg')
            )
            
            # Mise √† jour de la formation
            if hasattr(self.formation, 'saturation_moyenne'):
                self.formation.saturation_moyenne = saturation_avg
                
            # Compter les commentaires
            if hasattr(self.formation, 'nb_commentaires'):
                self.formation.nb_commentaires = (
                    Commentaire.objects.filter(formation=self.formation).count()
                )
                
            # Sauvegarder la formation (avec update_fields si possible)
            update_fields = ['dernier_commentaire']
            if hasattr(self.formation, 'saturation_moyenne'):
                update_fields.append('saturation_moyenne')
            if hasattr(self.formation, 'nb_commentaires'):
                update_fields.append('nb_commentaires')
                
            self.formation.save(update_fields=update_fields)

    @staticmethod
    def update_formation_static(formation):
        """
        üîÑ Version statique de update_formation.
        Utilis√©e lors de la suppression d'un commentaire.
        
        Args:
            formation (Formation): La formation √† mettre √† jour
        """
        # Assurez-vous que cette m√©thode existe dans votre mod√®le Formation
        if hasattr(formation, 'update_from_commentaires'):
            formation.update_from_commentaires()
        else:
            # Impl√©mentation de secours similaire √† update_formation
            from django.db.models import Avg
            
            # Mise √† jour du dernier commentaire
            formation.dernier_commentaire = (
                Commentaire.objects.filter(formation=formation)
                .order_by('-created_at')
                .first()
            )
            
            # Calcul de la saturation moyenne
            saturation_avg = (
                Commentaire.objects.filter(formation=formation, saturation__isnull=False)
                .aggregate(Avg('saturation'))
                .get('saturation__avg')
            )
            
            # Mise √† jour de la formation
            if hasattr(formation, 'saturation_moyenne'):
                formation.saturation_moyenne = saturation_avg
                
            # Compter les commentaires
            if hasattr(formation, 'nb_commentaires'):
                formation.nb_commentaires = (
                    Commentaire.objects.filter(formation=formation).count()
                )
                
            # Sauvegarder la formation
            update_fields = ['dernier_commentaire']
            if hasattr(formation, 'saturation_moyenne'):
                update_fields.append('saturation_moyenne')
            if hasattr(formation, 'nb_commentaires'):
                update_fields.append('nb_commentaires')
                
            formation.save(update_fields=update_fields)

    # === Propri√©t√©s utiles ===

    @property
    def auteur_nom(self) -> str:
        """
        üîç Retourne le nom complet de l'auteur ou 'Anonyme' si non renseign√©.
        
        Returns:
            str: Nom complet de l'auteur ou "Anonyme"
        """
        if not self.created_by:
            return "Anonyme"
        full = f"{self.created_by.first_name} {self.created_by.last_name}".strip()
        return full or self.created_by.username

    @property
    def date_formatee(self) -> str:
        """
        üìÖ Retourne la date de cr√©ation format√©e (jour/mois/ann√©e).
        
        Returns:
            str: Date format√©e (JJ/MM/AAAA)
        """
        return self.created_at.strftime('%d/%m/%Y')

    @property
    def heure_formatee(self) -> str:
        """
        üïí Retourne l'heure de cr√©ation format√©e (heure:minute).
        
        Returns:
            str: Heure format√©e (HH:MM)
        """
        return self.created_at.strftime('%H:%M')
        
    @property 
    def contenu_sans_html(self) -> str:
        """
        üßπ Retourne le contenu nettoy√© de tout HTML.
        
        Returns:
            str: Contenu sans HTML
        """
        return strip_tags(self.contenu)

    @property
    def formation_nom(self) -> str:
        """
        üè´ Retourne le nom de la formation associ√©e.
        
        Returns:
            str: Nom de la formation
        """
        return self.formation.nom if self.formation else "Formation inconnue"

    # === M√©thodes utilitaires ===

    def get_content_preview(self, length=None) -> str:
        """
        üìù R√©cup√®re un aper√ßu tronqu√© du contenu du commentaire.

        Args:
            length (int, optional): Nombre de caract√®res √† afficher avant troncature.
                Si None, utilise la valeur par d√©faut PREVIEW_DEFAULT_LENGTH.

        Returns:
            str: Contenu court avec '...' si n√©cessaire
        """
        length = length or self.PREVIEW_DEFAULT_LENGTH
        return self.contenu if len(self.contenu) <= length else f"{self.contenu[:length]}..."

    def is_recent(self, days=None) -> bool:
        """
        ‚è±Ô∏è Indique si le commentaire a √©t√© post√© r√©cemment.

        Args:
            days (int, optional): Nombre de jours √† consid√©rer pour 'r√©cent'.
                Si None, utilise la valeur par d√©faut RECENT_DEFAULT_DAYS.

        Returns:
            bool: True si r√©cent, sinon False.
        """
        days = days or self.RECENT_DEFAULT_DAYS
        return self.created_at >= timezone.now() - timedelta(days=days)
        
    def is_edited(self) -> bool:
        """
        ‚úèÔ∏è Indique si le commentaire a √©t√© modifi√© apr√®s sa cr√©ation.
        
        Returns:
            bool: True si modifi√©, False sinon
        """
        # Tol√©rance de 1 minute entre cr√©ation et modification
        tolerance = timedelta(minutes=1)
        return self.updated_at and (self.updated_at - self.created_at > tolerance)

    # === M√©thodes de classe ===

    @classmethod
    def get_all_commentaires(cls, formation_id=None, auteur_id=None, search_query=None, order_by="-created_at"):
        """
        üìä R√©cup√®re dynamiquement les commentaires selon des filtres.

        Args:
            formation_id (int, optional): ID de la formation concern√©e.
            auteur_id (int, optional): ID de l'auteur.
            search_query (str, optional): Filtre sur le contenu (texte libre).
            order_by (str, optional): Champ de tri, par d√©faut date d√©croissante.

        Returns:
            QuerySet: Liste filtr√©e de commentaires.
        """
        logger.debug(f"Chargement des commentaires filtr√©s")

        queryset = cls.objects.select_related('formation', 'created_by').order_by(order_by)
        filters = Q()

        if formation_id:
            filters &= Q(formation_id=formation_id)
        if auteur_id:
            filters &= Q(created_by_id=auteur_id)
        if search_query:
            filters &= Q(contenu__icontains=search_query)

        queryset = queryset.filter(filters)
        logger.debug(f"{queryset.count()} commentaire(s) trouv√©(s)")
        return queryset if queryset.exists() else cls.objects.none()

    @classmethod
    def get_recent_commentaires(cls, days=None, limit=5):
        """
        üìÖ R√©cup√®re les commentaires r√©cents dans une p√©riode donn√©e.

        Args:
            days (int, optional): Nombre de jours √† consid√©rer comme r√©cents.
                Si None, utilise la valeur par d√©faut RECENT_DEFAULT_DAYS.
            limit (int): Nombre maximum de commentaires √† retourner.

        Returns:
            QuerySet: Commentaires r√©cents les plus r√©cents d'abord.
        """
        days = days or cls.RECENT_DEFAULT_DAYS
        date_limite = timezone.now() - timedelta(days=days)
        return cls.objects.select_related('formation', 'created_by')\
            .filter(created_at__gte=date_limite)\
            .order_by('-created_at')[:limit]
            
    @classmethod
    def get_saturation_stats(cls, formation_id=None):
        """
        üìä R√©cup√®re des statistiques sur la saturation.
        
        Args:
            formation_id (int, optional): Si fourni, filtre par formation
            
        Returns:
            dict: Statistiques de saturation (moyenne, min, max, count)
        """
        queryset = cls.objects.filter(saturation__isnull=False)
        
        if formation_id:
            queryset = queryset.filter(formation_id=formation_id)
            
        stats = queryset.aggregate(
            avg=Avg('saturation'),
            min=models.Min('saturation'),
            max=models.Max('saturation'),
            count=Count('id')
        )
        
        return stats

    def to_serializable_dict(self, include_full_content=False):
        formation = self.formation

        """
        üì¶ Retourne une repr√©sentation s√©rialisable du commentaire.

        Args:
            include_full_content (bool): Si True, inclut le contenu complet
                                        sinon, inclut seulement un aper√ßu

        Returns:
            dict: Dictionnaire des champs exposables du commentaire.
        """
        return {
            "id": self.pk,
            "formation_id": formation.id if formation else None,
            "formation_nom": formation.nom if formation else "N/A",
            "num_offre": getattr(formation, "num_offre", None),
            "centre_nom": getattr(formation.centre, "nom", None) if getattr(formation, "centre", None) else None,
            "start_date": formation.start_date.isoformat() if getattr(formation, "start_date", None) else None,
            "end_date": formation.end_date.isoformat() if getattr(formation, "end_date", None) else None,
            "type_offre": formation.type_offre.nom if getattr(formation, "type_offre", None) else None,
            "statut": formation.statut.nom if getattr(formation, "statut", None) else None,
            "contenu": self.contenu if include_full_content else self.get_content_preview(),
            "saturation": self.saturation,
            "saturation_formation": self.saturation_formation,  # ‚úÖ valeur historique au moment du commentaire
            "auteur": self.auteur_nom,
            "date": self.date_formatee,
            "heure": self.heure_formatee,
            "is_recent": self.is_recent(),
            "is_edited": self.is_edited(),
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }
        
    def get_edit_url(self):
        """
        ‚úèÔ∏è Retourne l'URL vers la vue de modification du commentaire.
        
        Returns:
            str: URL d'√©dition pour ce commentaire
        """
        return reverse("commentaire-edit", kwargs={"pk": self.pk})
        
    def get_delete_url(self):
        """
        üóëÔ∏è Retourne l'URL vers la vue de suppression du commentaire.
        
        Returns:
            str: URL de suppression pour ce commentaire
        """
        return reverse("commentaire-delete", kwargs={"pk": self.pk})
    
    @action(detail=False, methods=["get"], url_path="export-pdf")
    def export_pdf(self, request):
        ids = request.GET.getlist("ids")
        commentaires = self.queryset.filter(id__in=ids)

        html_string = render_to_string("commentaires/export_pdf.html", {"commentaires": commentaires})
        pdf_file = HTML(string=html_string).write_pdf()

        return HttpResponse(
            pdf_file,
            content_type="application/pdf",
            headers={"Content-Disposition": 'attachment; filename="commentaires.pdf"'}
        )



