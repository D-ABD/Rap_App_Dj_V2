from django.db import models
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.core.validators import MinValueValidator
from decimal import Decimal, InvalidOperation
from django.db.models import Sum, Count, Case, When, F, Q
from django.utils import timezone
from django.core.exceptions import ValidationError
import logging
from django.db import transaction

from .centres import Centre
from .base import BaseModel 
# Configuration du logger
logger = logging.getLogger("application.vae")

# ----------------------------------------------------
# Signaux d√©plac√©s dans un fichier signals/
# ----------------------------------------------------


from datetime import date

class PeriodeMixin(models.Model):
    """
    üìÖ Classe abstraite pour les √©l√©ments li√©s √† une p√©riode (mois/ann√©e) et un centre.
    
    Cette classe fournit les champs et m√©thodes communs pour tous les mod√®les
    qui n√©cessitent un suivi temporel (par mois et ann√©e) et un lien avec un centre.
    
    Attributes:
        centre (Centre): Centre associ√© √† l'enregistrement
        annee (int): Ann√©e concern√©e
        mois (int): Mois concern√© (1-12)
    """

    MOIS_CHOICES = [
        (1, _("Janvier")), (2, _("F√©vrier")), (3, _("Mars")), (4, _("Avril")),
        (5, _("Mai")), (6, _("Juin")), (7, _("Juillet")), (8, _("Ao√ªt")),
        (9, _("Septembre")), (10, _("Octobre")), (11, _("Novembre")), (12, _("D√©cembre")),
    ]

    centre = models.ForeignKey(
        Centre, 
        on_delete=models.CASCADE,
        verbose_name=_("Centre"),
        help_text=_("Centre associ√© √† cet enregistrement")
    )
    annee = models.PositiveIntegerField(
        default=date.today().year,
        validators=[MinValueValidator(2000)],
        verbose_name=_("Ann√©e"),
        help_text=_("Ann√©e au format YYYY (ex: 2024)")
    )
    mois = models.PositiveSmallIntegerField(
        default=date.today().month,
        choices=MOIS_CHOICES,
        verbose_name=_("Mois"),
        help_text=_("Mois de l'ann√©e (1-12)")
    )
    
    class Meta:
        abstract = True
        ordering = ['annee', 'mois', 'centre']
        indexes = [
            models.Index(fields=['annee', 'mois'], name='periode_idx'),
            models.Index(fields=['centre', 'annee', 'mois'], name='cent_periode_idx'),
        ]


    def clean(self):
        """
        üîç Validation des contraintes sur les champs.
        
        V√©rifie que le mois est compris entre 1 et 12.
        
        Raises:
            ValidationError: Si le mois n'est pas valide
        """
        super().clean()
        if self.mois < 1 or self.mois > 12:
            raise ValidationError({
                'mois': _("Le mois doit √™tre compris entre 1 et 12.")
            })

    def get_periode_display(self):
        """
        üìã Retourne une repr√©sentation textuelle de la p√©riode.
        
        Returns:
            str: Mois et ann√©e format√©s (ex: "Janvier 2024")
        """
        return f"{self.get_mois_display()} {self.annee}"
    
class SuiviJury(BaseModel, PeriodeMixin):
    """
    üìä Mod√®le pour le suivi des jurys par centre, par mois et par ann√©e.
    
    Ce mod√®le permet de suivre les objectifs et r√©alisations des jurys
    pour chaque centre, sur une base mensuelle.
    
    Attributes:
        objectif_jury (int): Nombre de jurys √† r√©aliser (objectif mensuel)
        jurys_realises (int): Nombre de jurys effectivement r√©alis√©s
        pourcentage_mensuel (Decimal): Pourcentage d'atteinte de l'objectif (calcul√© automatiquement)
    """
    objectif_jury = models.PositiveIntegerField(
        default=0,
        verbose_name=_("Objectif jury"),
        help_text=_("Nombre de jurys √† r√©aliser pour le mois")
    )
    jurys_realises = models.PositiveIntegerField(
        default=0,
        verbose_name=_("Jurys r√©alis√©s"),
        help_text=_("Nombre de jurys effectivement r√©alis√©s ce mois")
    )
    pourcentage_mensuel = models.DecimalField(
        max_digits=6, 
        decimal_places=2,
        default=Decimal('0.00'),
        editable=False,
        verbose_name=_("Pourcentage mensuel"),
        help_text=_("Pourcentage d'atteinte de l'objectif mensuel (calcul√© automatiquement)")
    )

    
    def to_serializable_dict(self, exclude=None):
        """
        üì¶ Retourne un dictionnaire des donn√©es de l'instance pour une s√©rialisation simple.
        
        Args:
            exclude (list[str], optional): Liste de champs √† exclure
            
        Returns:
            dict: Donn√©es s√©rialisables du suivi jury
        """
        exclude = exclude or []
        data = super().to_serializable_dict(exclude)
        
        # Ajouter des donn√©es sp√©cifiques
        data.update({
            "centre_id": self.centre_id,
            "centre_nom": str(self.centre),
            "annee": self.annee,
            "mois": self.mois,
            "mois_libelle": self.get_mois_display(),
            "periode": self.get_periode_display(),
            "objectif_jury": self.objectif_jury,
            "jurys_realises": self.jurys_realises,
            "ecart": self.ecart(),
            "pourcentage_atteinte": float(self.pourcentage_atteinte),
            "objectif_auto": self.get_objectif_auto(),
        })
        
        return data

    def get_objectif_auto(self):
        """
        üéØ Retourne l'objectif de jury √† utiliser pour les calculs.
        
        Utilise l'objectif sp√©cifique s'il est d√©fini, sinon l'objectif
        mensuel standard du centre.
        
        Returns:
            int: L'objectif de jury √† utiliser
        """
        if self.objectif_jury and self.objectif_jury > 0:
            return self.objectif_jury
        return self.centre.objectif_mensuel_jury or 0

    def get_pourcentage_atteinte(self):
        """
        üìà Calcule dynamiquement le pourcentage d'atteinte de l'objectif.
        
        Cette m√©thode recalcule le pourcentage √† la vol√©e, contrairement
        √† la propri√©t√© pourcentage_atteinte qui retourne la valeur stock√©e.
        
        Returns:
            float: Pourcentage d'atteinte arrondi √† une d√©cimale
        """
        objectif = self.get_objectif_auto()
        if objectif > 0:
            return round((self.jurys_realises or 0) / objectif * 100, 1)
        return 0

    class Meta(PeriodeMixin.Meta):
        unique_together = ('centre', 'annee', 'mois')
        verbose_name = _("Suivi des jurys")
        verbose_name_plural = _("Suivis des jurys")
        # Index pour 'pourcentage_mensuel' retir√©
        indexes = PeriodeMixin.Meta.indexes + [
            models.Index(fields=['pourcentage_mensuel'], name='sj_pct_idx'),
            models.Index(fields=['objectif_jury', 'jurys_realises'], name='sj_obj_jr_idx'),
    ]


        
    def __str__(self):
        """
        üîÅ Repr√©sentation textuelle de l'instance.
        
        Returns:
            str: Description du suivi avec centre, mois et ann√©e
        """
        return f"Jurys {self.centre} - {self.get_mois_display()} {self.annee}"
    
    def __repr__(self):
        """
        üìù Repr√©sentation technique pour le d√©bogage.
        
        Returns:
            str: Format technique d√©taill√©
        """
        return f"<SuiviJury(id={self.pk}, centre='{self.centre}', periode='{self.get_periode_display()}')>"

    def save(self, *args, **kwargs):
        """
        üíæ Sauvegarde atomique du suivi jury avec calcul du pourcentage et journalisation.
        
        Args:
            *args: Arguments positionnels
            **kwargs: Arguments nomm√©s pouvant contenir :
                - user: Utilisateur effectuant l'action
                - skip_validation: Bool√©en pour sauter la validation
        """
        try:
            with transaction.atomic():
                # Calcul du pourcentage avec gestion des erreurs
                try:
                    if self.objectif_jury > 0:
                        self.pourcentage_mensuel = Decimal(self.jurys_realises) / Decimal(self.objectif_jury) * 100
                        self.pourcentage_mensuel = self.pourcentage_mensuel.quantize(Decimal('0.01'))
                    else:
                        self.pourcentage_mensuel = Decimal('0.00')
                except (ZeroDivisionError, InvalidOperation) as e:
                    logger.error(f"Erreur calcul pourcentage jury {self}: {str(e)}")
                    self.pourcentage_mensuel = Decimal('0.00')

                is_new = self.pk is None
                user = kwargs.pop("user", None)

                # Journalisation avant sauvegarde
                log_msg = f"{'Cr√©ation' if is_new else 'Mise √† jour'} suivi jury {self}"
                if user:
                    log_msg += f" par {user.username}"
                logger.info(log_msg)

                # Validation optionnelle
                if not kwargs.pop('skip_validation', False):
                    self.full_clean()

                # Sauvegarde parentale
                super().save(*args, user=user, **kwargs)

                # Post-save logging
                logger.debug(f"Suivi jury {self.pk} sauvegard√© avec succ√®s")

        except Exception as e:
            logger.critical(
                f"√âchec sauvegarde suivi jury {getattr(self, 'pk', 'Nouveau')} | "
                f"Centre: {getattr(self.centre, 'pk', None)} | "
                f"Erreur: {str(e)}",
                exc_info=True
            )
            raise  # Re-l√®ve l'exception pour ne pas masquer l'erreur

    def invalidate_caches(self):
        """
        üîÑ Invalide les caches associ√©s √† ce suivi de jury.
        """
        super().invalidate_caches()
        
        # Invalider les caches sp√©cifiques
        from django.core.cache import cache
        cache_keys = [
            f"suivijury_{self.pk}",
            f"suivijury_centre_{self.centre_id}",
            f"suivijury_periode_{self.annee}_{self.mois}",
            f"suivijury_stats_{self.centre_id}_{self.annee}"
        ]
        
        for key in cache_keys:
            cache.delete(key)

    def ecart(self):
        """
        üìä Calcule l'√©cart entre les jurys r√©alis√©s et l'objectif.
        
        Returns:
            int: Diff√©rence entre jurys r√©alis√©s et objectif (peut √™tre n√©gatif)
        """
        return self.jurys_realises - self.objectif_jury
    
    @property
    def pourcentage_atteinte(self):
        """
        üìà Propri√©t√© qui retourne le pourcentage d'atteinte stock√©.
        
        Cette propri√©t√© retourne la valeur calcul√©e et stock√©e lors de la
        sauvegarde, par opposition √† get_pourcentage_atteinte() qui recalcule.
        
        Returns:
            Decimal: Pourcentage d'atteinte stock√©
        """
        return self.pourcentage_mensuel
    
    def to_csv_row(self):
        """
        üì§ Retourne une ligne CSV repr√©sentant ce suivi de jury.

        Returns:
            list: Valeurs format√©es pour une exportation CSV
        """
        return [
            self.id,
            self.centre.nom if self.centre else '',
            self.annee,
            self.mois,
            self.get_mois_display(),
            self.objectif_jury,
            self.jurys_realises,
            self.ecart(),
            float(self.pourcentage_atteinte),
            self.get_objectif_auto(),
        ]
    
class VAE(BaseModel):
    """
    üìù Mod√®le repr√©sentant une VAE individuelle avec son statut.
    
    Ce mod√®le permet de suivre l'√©volution d'une Validation des Acquis de l'Exp√©rience
    √† travers diff√©rents statuts, depuis la demande d'information jusqu'√† sa compl√©tion
    ou son abandon.
    
    Attributes:
        centre (Centre): Centre responsable de cette VAE
        reference (str): R√©f√©rence unique de la VAE
        created_at (datetime): Date √† laquelle la VAE a √©t√© cr√©√©e
        statut (str): Statut actuel de la VAE
        commentaire (str): Notes suppl√©mentaires sur la VAE
    """
    STATUT_CHOICES = [
        ('info', _("Demande d'informations")),
        ('dossier', _("Dossier en cours")),
        ('attente_financement', _("En attente de financement")),
        ('accompagnement', _("Accompagnement en cours")),
        ('jury', _("En attente de jury")),
        ('terminee', _("VAE termin√©e")),
        ('abandonnee', _("VAE abandonn√©e")),
    ]
    
    # Statuts consid√©r√©s comme "en cours"
    STATUTS_EN_COURS = ['info', 'dossier', 'attente_financement', 'accompagnement', 'jury']
    
    # Statuts consid√©r√©s comme "termin√©s" (positivement ou n√©gativement)
    STATUTS_TERMINES = ['terminee', 'abandonnee']
    
    centre = models.ForeignKey(
        Centre, 
        on_delete=models.CASCADE,
        related_name='vaes',
        verbose_name=_("Centre"),
        help_text=_("Centre responsable de cette VAE")
    )
    
    # Informations g√©n√©rales
    reference = models.CharField(
        max_length=50, 
        blank=True,
        verbose_name=_("R√©f√©rence"),
        help_text=_("R√©f√©rence unique de la VAE (g√©n√©r√©e automatiquement si vide)")
    )
    
    # Statut actuel
    statut = models.CharField(
        max_length=20,
        choices=STATUT_CHOICES,
        default='info',
        verbose_name=_("Statut"),
        help_text=_("Statut actuel de la VAE")
    )

    # Champs optionnels
    commentaire = models.TextField(
        blank=True,
        verbose_name=_("Commentaire"),
        help_text=_("Notes ou informations suppl√©mentaires sur cette VAE")
    )
    
    class Meta:
        verbose_name = _("VAE")
        verbose_name_plural = _("VAEs")
        ordering = ['-created_at', 'centre']
        indexes = [
            models.Index(fields=['statut'], name='vae_statut_idx'),
            models.Index(fields=['created_at'], name='vae_created_idx'),
            models.Index(fields=['reference'], name='vae_reference_idx'),
            models.Index(fields=['centre', 'statut'], name='vae_centre_statut_idx'),
            models.Index(fields=['centre', 'created_at'], name='vae_centre_created_idx'),
        ]
    
    def __str__(self):
        """
        üîÅ Repr√©sentation textuelle de la VAE.
        
        Returns:
            str: Identification de la VAE avec sa r√©f√©rence et son statut
        """
        return f"VAE {self.reference or self.id} - {self.get_statut_display()}"
    
    def __repr__(self):
        """
        üìù Repr√©sentation technique pour le d√©bogage.
        
        Returns:
            str: Format technique d√©taill√©
        """
        return f"<VAE(id={self.pk}, ref='{self.reference}', statut='{self.statut}')>"
    
    def save(self, *args, **kwargs):
        """
        üíæ Personnalisation de la sauvegarde pour g√©n√©rer la r√©f√©rence automatiquement
        et journaliser l'action.

        Args:
            *args: Arguments positionnels
            **kwargs: Arguments nomm√©s, dont 'user' et 'skip_validation' optionnels
        """
        skip_validation = kwargs.pop('skip_validation', False)
        user = kwargs.pop("user", None)
        is_new = self.pk is None

        # Date de cr√©ation explicite si non renseign√©e
        if not self.created_at:
            self.created_at = timezone.now()

        # R√©f√©rence automatique
        if not self.reference:
            prefix = "VAE"
            date_str = self.created_at.strftime('%Y%m%d')
            centre_id = self.centre.id if self.centre_id else "000"
            existing_refs = VAE.objects.filter(reference__startswith=f"{prefix}-{date_str}-{centre_id}").count()
            self.reference = f"{prefix}-{date_str}-{centre_id}-{existing_refs + 1:03d}"

        # Validation facultative
        if not skip_validation:
            self.full_clean()

        # Journalisation
        if is_new:
            logger.info(f"üÜï Cr√©ation VAE {self.reference} pour centre {self.centre}")
        else:
            logger.info(f"‚úèÔ∏è Mise √† jour VAE {self.reference} - Statut: {self.get_statut_display()}")

        # Sauvegarde r√©elle
        super().save(*args, user=user, **kwargs)
        
    def invalidate_caches(self):
        """
        üîÑ Invalide les caches associ√©s √† cette VAE.
        """
        super().invalidate_caches()
        
        # Invalider les caches sp√©cifiques
        from django.core.cache import cache
        cache_keys = [
            f"vae_{self.pk}",
            f"vae_reference_{self.reference}",
            f"vae_centre_{self.centre_id}",
            f"vae_statut_{self.statut}",
            f"vae_stats_{self.centre_id}_{self.annee_creation}"
        ]
        
        for key in cache_keys:
            cache.delete(key)
    
    @property
    def annee_creation(self):
        """
        üìÖ Retourne l'ann√©e de cr√©ation de la VAE.
        
        Returns:
            int: Ann√©e de cr√©ation
        """
        return self.created_at.year
    
    @property
    def mois_creation(self):
        """
        üìÖ Retourne le mois de cr√©ation de la VAE.
        
        Returns:
            int: Mois de cr√©ation (1-12)
        """
        return self.created_at.month
        
    @property
    def duree_jours(self):
        """
        ‚è±Ô∏è Calcule la dur√©e en jours depuis la cr√©ation de la VAE.
        
        Returns:
            int: Nombre de jours √©coul√©s depuis la cr√©ation
        """
        today = timezone.now().date()
        return (today - self.created_at.date()).days
        
    def is_en_cours(self):
        """
        üîç V√©rifie si la VAE est en cours (non termin√©e ou abandonn√©e).
        
        Returns:
            bool: True si la VAE est en cours, False sinon
        """
        return self.statut in self.STATUTS_EN_COURS
        
    def is_terminee(self):
        """
        üîç V√©rifie si la VAE est termin√©e ou abandonn√©e.
        
        Returns:
            bool: True si la VAE est termin√©e ou abandonn√©e, False sinon
        """
        return self.statut in self.STATUTS_TERMINES
        
    def dernier_changement_statut(self):
        """
        üìã Retourne le dernier changement de statut de cette VAE.
        
        Returns:
            HistoriqueStatutVAE: Dernier historique de statut, ou None si aucun
        """
        return self.historique_statuts.order_by('-date_changement_effectif', '-created_at').first()
        
    def duree_statut_actuel(self):
        """
        ‚è±Ô∏è Calcule la dur√©e (en jours) depuis le dernier changement de statut.
        
        Returns:
            int: Nombre de jours √©coul√©s depuis le dernier changement de statut
        """
        dernier_changement = self.dernier_changement_statut()
        if dernier_changement:
            today = timezone.now().date()
            return (today - dernier_changement.date_changement_effectif).days
        return self.duree_jours

    @classmethod
    def get_count_by_statut_optimized(cls, centre=None, annee=None, mois=None):
        """
        üìä Version optimis√©e des comptages par statut avec annotation
        
        Args:
            centre (Centre, optional): Centre pour filtrer les r√©sultats
            annee (int, optional): Ann√©e pour filtrer les r√©sultats
            mois (int, optional): Mois pour filtrer les r√©sultats
            
        Returns:
            dict: Dictionnaire des comptages par statut
        """
        queryset = cls.objects.all()
        
        if centre:
            queryset = queryset.filter(centre=centre)
        if annee:
            queryset = queryset.filter(created_at__year=annee)
        if mois:
            queryset = queryset.filter(created_at__month=mois)
        
        return queryset.aggregate(
            total=Count('id'),
            en_cours=Count(Case(When(statut__in=cls.STATUTS_EN_COURS, then=1))),
            terminees=Count(Case(When(statut='terminee', then=1))),
            abandonnees=Count(Case(When(statut='abandonnee', then=1))),
            **{statut: Count(Case(When(statut=statut, then=1))) for statut, _ in cls.STATUT_CHOICES}
        )
    
    def changer_statut(self, nouveau_statut, date_effet=None, commentaire="", user=None):
        """
        üìù Change le statut de mani√®re contr√¥l√©e avec historique
        
        Args:
            nouveau_statut (str): Nouveau statut √† appliquer
            date_effet (date, optional): Date d'effet du changement
            commentaire (str, optional): Commentaire sur le changement
            user (User, optional): Utilisateur effectuant le changement
            
        Raises:
            ValidationError: Si le statut est invalide
        """
        if nouveau_statut not in dict(self.STATUT_CHOICES):
            raise ValidationError(f"Statut invalide: {nouveau_statut}")
        
        date_effet = date_effet or timezone.now().date()
        self.statut = nouveau_statut
        self.save(user=user)
        
        # Cr√©ation de l'historique
        HistoriqueStatutVAE.objects.create(
            vae=self,
            statut=nouveau_statut,
            date_changement_effectif=date_effet,
            commentaire=commentaire
        )

    def to_csv_row(self):
        """
        üì§ Retourne une ligne CSV repr√©sentant cette VAE.

        Returns:
            list: Valeurs format√©es pour une exportation CSV
        """
        return [
            self.id,
            self.reference,
            self.centre.nom if self.centre else '',
            self.get_statut_display(),
            self.created_at.strftime('%Y-%m-%d %H:%M:%S') if self.created_at else '',
            self.commentaire,
            self.duree_jours,
            self.is_en_cours(),
            self.is_terminee(),
            self.dernier_changement_statut().get_statut_display() if self.dernier_changement_statut() else '',
            self.duree_statut_actuel(),
        ]
                
    def to_serializable_dict(self, exclude=None):
        """
        üì¶ Retourne un dictionnaire s√©rialisable de la VAE.
        
        Args:
            exclude (list[str], optional): Liste de champs √† exclure
            
        Returns:
            dict: Donn√©es s√©rialisables de la VAE
        """
        exclude = exclude or []
        data = super().to_serializable_dict(exclude)
        
        dernier_changement = self.dernier_changement_statut()
        
        # Ajouter des donn√©es sp√©cifiques
        data.update({
            'reference': self.reference,
            'centre_id': self.centre_id,
            'centre_nom': str(self.centre),
            'statut': self.statut,
            'statut_libelle': self.get_statut_display(),
            'commentaire': self.commentaire,
            'duree_jours': self.duree_jours,
            'is_en_cours': self.is_en_cours(),
            'is_terminee': self.is_terminee(),
            'dernier_changement_statut': {
                'date': dernier_changement.date_changement_effectif.isoformat() if dernier_changement else None,
                'statut': dernier_changement.statut if dernier_changement else None,
                'statut_libelle': dernier_changement.get_statut_display() if dernier_changement else None,
            } if dernier_changement else None,
            'duree_statut_actuel': self.duree_statut_actuel(),
        })
        
        return data

    def clean(self):
        """
        üîç Validation suppl√©mentaire
        
        Raises:
            ValidationError: Si les donn√©es ne sont pas valides
        """
        super().clean()

        # Validation de la r√©f√©rence
        if self.reference and not self.reference.startswith('VAE-'):
            raise ValidationError({'reference': "La r√©f√©rence doit commencer par 'VAE-'"})
            
class HistoriqueStatutVAE(BaseModel):
    """
    üìú Mod√®le pour suivre l'historique des changements de statut d'une VAE.
    
    Ce mod√®le enregistre chaque changement de statut d'une VAE, permettant
    ainsi de suivre son √©volution dans le temps et de calculer des statistiques
    sur les dur√©es des diff√©rentes √©tapes.
    
    Attributes:
        vae (VAE): La VAE concern√©e par ce changement de statut
        statut (str): Le nouveau statut
        date_changement_effectif (date): Date √† laquelle le changement a eu lieu
        commentaire (str): Notes suppl√©mentaires sur ce changement
    """
    vae = models.ForeignKey(
        VAE,
        on_delete=models.CASCADE,
        related_name='historique_statuts',
        verbose_name=_("VAE"),
        help_text=_("VAE concern√©e par ce changement de statut")
    )
    statut = models.CharField(
        max_length=20,
        choices=VAE.STATUT_CHOICES,
        verbose_name=_("Statut"),
        help_text=_("Nouveau statut de la VAE")
    )
    
    # Date configurable manuellement pour le changement de statut
    date_changement_effectif = models.DateField(
        verbose_name=_("Date effective du changement"),
        help_text=_("Date √† laquelle le changement de statut a eu lieu (pas n√©cessairement aujourd'hui)")
    )
    
    commentaire = models.TextField(
        blank=True,
        verbose_name=_("Commentaire"),
        help_text=_("Notes ou informations suppl√©mentaires sur ce changement de statut")
    )
    
    class Meta:
        verbose_name = _("Historique de statut VAE")
        verbose_name_plural = _("Historiques de statuts VAE")
        ordering = ['-date_changement_effectif', '-created_at']
        indexes = [
            models.Index(fields=['vae', 'statut'], name='hist_vae_statut_idx'),
            models.Index(fields=['date_changement_effectif'], name='hist_vae_date_idx'),
            models.Index(fields=['vae', 'date_changement_effectif'], name='hist_vae_vae_date_idx'),
        ]
    
    def to_csv_row(self):
        """
        üì§ Retourne une ligne CSV repr√©sentant cet historique de statut.

        Returns:
            list: Valeurs format√©es pour une exportation CSV
        """
        return [
            self.id,
            self.vae.reference if self.vae else '',
            self.get_statut_display(),
            self.date_changement_effectif.strftime('%Y-%m-%d') if self.date_changement_effectif else '',
            self.commentaire,
        ]
    
    def __str__(self):
        """
        üîÅ Repr√©sentation textuelle de l'historique de statut.
        
        Returns:
            str: Description du changement de statut avec la VAE et la date
        """
        return f"{self.vae} - {self.get_statut_display()} le {self.date_changement_effectif.strftime('%d/%m/%Y')}"
    
    def __repr__(self):
        """
        üìù Repr√©sentation technique pour le d√©bogage.
        
        Returns:
            str: Format technique d√©taill√©
        """
        return f"<HistoriqueStatutVAE(id={self.pk}, vae='{self.vae_id}', statut='{self.statut}')>"
        
        
    def clean(self):
        """
        üîç Validation des contraintes sur les champs.
        
        V√©rifie notamment que la date du changement n'est pas dans le futur et
        qu'elle n'est pas ant√©rieure √† la date de cr√©ation de la VAE.
        
        Raises:
            ValidationError: Si les contraintes ne sont pas respect√©es
        """
        super().clean()
        
        if self.date_changement_effectif and self.date_changement_effectif > timezone.now().date():
            raise ValidationError({
                'date_changement_effectif': _("La date du changement ne peut pas √™tre dans le futur.")
            })
            
        if hasattr(self, 'vae') and self.vae and self.vae.created_at:
            if self.date_changement_effectif < self.vae.created_at.date():
                raise ValidationError({
                    'date_changement_effectif': _("La date du changement ne peut pas √™tre ant√©rieure √† la date de cr√©ation de la VAE.")
                })
                
    def save(self, *args, **kwargs):
        """
        üíæ Personnalisation de la sauvegarde.
        
        Args:
            *args: Arguments positionnels
            **kwargs: Arguments nomm√©s pouvant contenir skip_validation (bool)
        """
        skip_validation = kwargs.pop('skip_validation', False)
        is_new = self.pk is None
        user = kwargs.pop("user", None)
        
        # Validation compl√®te sauf si d√©sactiv√©e
        if not skip_validation:
            self.full_clean()
        
        # Journalisation
        if is_new:
            logger.info(f"üìù Nouveau statut enregistr√© pour {self.vae}: {self.get_statut_display()} le {self.date_changement_effectif}")
            
        super().save(*args, user=user, **kwargs)
        
    def invalidate_caches(self):
        """
        üîÑ Invalide les caches associ√©s √† cet historique.
        """
        super().invalidate_caches()
        
        # Invalider les caches sp√©cifiques
        from django.core.cache import cache
        cache_keys = [
            f"historiquestatut_{self.pk}",
            f"vae_{self.vae_id}_historique",
            f"vae_statuts_{self.vae_id}",
            f"vae_historique_{self.vae.reference}" if hasattr(self, 'vae') and self.vae else None
        ]
        
        for key in cache_keys:
            if key:  # √âviter les cl√©s None
                cache.delete(key)
        
    def to_serializable_dict(self, exclude=None):
        """
        üì¶ Retourne un dictionnaire s√©rialisable de l'historique.
        
        Args:
            exclude (list[str], optional): Liste de champs √† exclure
            
        Returns:
            dict: Donn√©es s√©rialisables de l'historique
        """
        exclude = exclude or []
        data = super().to_serializable_dict(exclude)
        
        # Ajouter des donn√©es sp√©cifiques
        data.update({
            'vae_id': self.vae_id,
            'vae_reference': self.vae.reference if hasattr(self, 'vae') and self.vae else None,
            'statut': self.statut,
            'statut_libelle': self.get_statut_display(),
            'date_changement_effectif': self.date_changement_effectif.isoformat(),
            'commentaire': self.commentaire,
        })
        
        return data