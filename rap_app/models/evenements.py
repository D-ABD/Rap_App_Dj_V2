import logging
from django.db import models, transaction
from django.utils import timezone
from django.core.exceptions import ValidationError
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.utils.functional import cached_property
from django.db.models import Q, F, Avg, Count, Sum

from .base import BaseModel
from .formations import Formation

logger = logging.getLogger("application.evenements")

# ----------------------------------------------------
# Signaux d√©plac√©s dans un fichier signals/
# ----------------------------------------------------


class EvenementManager(models.Manager):
    """
    Manager personnalis√© pour le mod√®le Evenement.
    Fournit des m√©thodes utilitaires pour les requ√™tes courantes.
    """
    
    def a_venir(self, days=30):
        """
        Retourne les √©v√©nements √† venir dans les prochains jours.
        
        Args:
            days (int): Nombre de jours √† consid√©rer
            
        Returns:
            QuerySet: √âv√©nements √† venir
        """
        today = timezone.now().date()
        limit_date = today + timezone.timedelta(days=days)
        return self.filter(
            event_date__gte=today,
            event_date__lte=limit_date
        ).order_by('event_date')
    
    def passes(self):
        """
        Retourne les √©v√©nements d√©j√† pass√©s.
        
        Returns:
            QuerySet: √âv√©nements pass√©s
        """
        today = timezone.now().date()
        return self.filter(event_date__lt=today).order_by('-event_date')
    
    def aujourd_hui(self):
        """
        Retourne les √©v√©nements ayant lieu aujourd'hui.
        
        Returns:
            QuerySet: √âv√©nements du jour
        """
        today = timezone.now().date()
        return self.filter(event_date=today)
    
    def par_type(self, type_evenement):
        """
        Filtre les √©v√©nements par type.
        
        Args:
            type_evenement (str): Type d'√©v√©nement (utiliser les constantes TypeEvenement)
            
        Returns:
            QuerySet: √âv√©nements filtr√©s par type
        """
        return self.filter(type_evenement=type_evenement)
    
    def par_formation(self, formation_id):
        """
        Filtre les √©v√©nements par formation.
        
        Args:
            formation_id (int): ID de la formation
            
        Returns:
            QuerySet: √âv√©nements li√©s √† la formation
        """
        return self.filter(formation_id=formation_id)
    
    def avec_statistiques(self):
        """
        Ajoute des statistiques calcul√©es aux √©v√©nements.
        
        Returns:
            QuerySet: √âv√©nements avec des annotations
        """
        return self.annotate(
            taux_participation=models.Case(
                models.When(
                    participants_prevus__gt=0,
                    then=models.ExpressionWrapper(
                        100 * F('participants_reels') / F('participants_prevus'),
                        output_field=models.FloatField()
                    )
                ),
                default=None,
                output_field=models.FloatField()
            )
        )


class Evenement(BaseModel):
    """
    üìÖ Mod√®le repr√©sentant un √©v√©nement li√© √† une formation (job dating, forum, etc.).
    
    Permet de suivre les types d'√©v√©nements, leur date, lieu, et le nombre de participants.
    
    Attributs:
        formation (Formation): Formation associ√©e √† l'√©v√©nement (optionnel)
        type_evenement (str): Type d'√©v√©nement selon les choix pr√©d√©finis
        description_autre (str): Description personnalis√©e pour le type 'Autre'
        details (str): D√©tails ou informations suppl√©mentaires
        event_date (date): Date de l'√©v√©nement
        lieu (str): Lieu o√π se d√©roule l'√©v√©nement
        participants_prevus (int): Nombre de participants attendus
        participants_reels (int): Nombre de participants effectifs
        
    Propri√©t√©s:
        status_label (str): Statut textuel (Pass√©, Aujourd'hui, √Ä venir)
        status_color (str): Classe CSS pour la couleur du statut
        
    M√©thodes:
        get_temporal_status(): Calcule le statut temporel (past, today, soon, future)
        get_participation_rate(): Calcule le taux de participation si possible
        to_serializable_dict(): Repr√©sentation s√©rialisable pour API
    """
    
    # Constantes pour les limites de champs
    MAX_TYPE_LENGTH = 100
    MAX_DESC_LENGTH = 255
    MAX_LIEU_LENGTH = 255
    DAYS_SOON = 7  # Nombre de jours pour consid√©rer un √©v√©nement comme "bient√¥t"
    
    # ===== Choix de types d'√©v√©nements =====
    class TypeEvenement(models.TextChoices):
        INFO_PRESENTIEL = 'info_collective_presentiel', _('Information collective pr√©sentiel')
        INFO_DISTANCIEL = 'info_collective_distanciel', _('Information collective distanciel')
        JOB_DATING = 'job_dating', _('Job dating')
        EVENEMENT_EMPLOI = 'evenement_emploi', _('√âv√©nement emploi')
        FORUM = 'forum', _('Forum')
        JPO = 'jpo', _('Journ√©e Portes Ouvertes')
        AUTRE = 'autre', _('Autre')
    
    # ===== Statuts temporels =====
    class StatutTemporel(models.TextChoices):
        PASSE = 'past', _('Pass√©')
        AUJOURD_HUI = 'today', _('Aujourd\'hui')
        BIENTOT = 'soon', _('Bient√¥t')
        FUTUR = 'future', _('√Ä venir')
        INCONNU = 'unknown', _('Inconnu')

    # ===== Champs du mod√®le =====
    formation = models.ForeignKey(
        Formation,
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name="evenements",
        verbose_name=_("Formation"),
        help_text=_("Formation associ√©e √† l'√©v√©nement")
    )

    type_evenement = models.CharField(
        max_length=MAX_TYPE_LENGTH,
        choices=TypeEvenement.choices,
        db_index=True,
        verbose_name=_("Type d'√©v√©nement"),
        help_text=_("Cat√©gorie de l'√©v√©nement (ex : forum, job dating, etc.)")
    )

    description_autre = models.CharField(
        max_length=MAX_DESC_LENGTH,
        blank=True,
        null=True,
        verbose_name=_("Description personnalis√©e"),
        help_text=_("D√©tail du type si 'Autre' est s√©lectionn√©")
    )

    details = models.TextField(
        blank=True,
        null=True,
        verbose_name=_("D√©tails compl√©mentaires"),
        help_text=_("D√©tails ou informations suppl√©mentaires")
    )

    event_date = models.DateField(
        blank=True,
        null=True,
        verbose_name=_("Date de l'√©v√©nement"),
        help_text=_("Date pr√©vue pour l'√©v√©nement")
    )

    lieu = models.CharField(
        max_length=MAX_LIEU_LENGTH,
        blank=True,
        null=True,
        verbose_name=_("Lieu"),
        help_text=_("Lieu o√π se d√©roule l'√©v√©nement")
    )

    participants_prevus = models.PositiveIntegerField(
        blank=True,
        null=True,
        verbose_name=_("Participants pr√©vus"),
        help_text=_("Nombre de personnes attendues")
    )

    participants_reels = models.PositiveIntegerField(
        blank=True,
        null=True,
        verbose_name=_("Participants r√©els"),
        help_text=_("Nombre de participants pr√©sents")
    )
    
    # ===== Managers =====
    objects = models.Manager()
    custom = EvenementManager()

    # ===== Meta =====
    class Meta:
        verbose_name = _("√âv√©nement")
        verbose_name_plural = _("√âv√©nements")
        ordering = ['-event_date']
        indexes = [
            models.Index(fields=['event_date'], name='event_date_idx'),
            models.Index(fields=['type_evenement'], name='event_type_idx'),
            models.Index(fields=['formation'], name='event_formation_idx'),
        ]
        constraints = [
            models.CheckConstraint(
                check=Q(type_evenement='autre', description_autre__isnull=False) | ~Q(type_evenement='autre'),
                name='autre_needs_description'
            )
        ]

    # ===== Repr√©sentation =====
    def __str__(self):
        """Repr√©sentation textuelle de l'√©v√©nement."""
        label = self.description_autre if self.type_evenement == self.TypeEvenement.AUTRE and self.description_autre else self.get_type_evenement_display()
        date_str = self.event_date.strftime('%d/%m/%Y') if self.event_date else "Date inconnue"
        return f"{label} - {date_str} - {self.status_label}"
    
    def __repr__(self):
        """Repr√©sentation pour le d√©bogage."""
        return f"<Evenement(id={self.pk}, type='{self.type_evenement}', date='{self.event_date}')>"

    
    def get_edit_url(self):
        """
        üîó Retourne l'URL de modification de l'√©v√©nement.
        
        Returns:
            str: URL de la page d'√©dition
        """
        return reverse("evenement-edit", kwargs={"pk": self.pk})
    
    def get_delete_url(self):
        """
        üîó Retourne l'URL de suppression de l'√©v√©nement.
        
        Returns:
            str: URL de la page de suppression
        """
        return reverse("evenement-delete", kwargs={"pk": self.pk})

    # ===== S√©rialisation =====
    def to_serializable_dict(self):
        """
        üì¶ Retourne une repr√©sentation s√©rialisable pour API.
        
        Returns:
            dict: Donn√©es s√©rialisables de l'√©v√©nement
        """
        return {
            "id": self.pk,
            "formation_id": self.formation_id,
            "formation_nom": self.formation.nom if self.formation else None,
            "type_evenement": self.type_evenement,
            "type_evenement_display": self.get_type_evenement_display(),
            "description_autre": self.description_autre,
            "details": self.details,
            "event_date": self.event_date.isoformat() if self.event_date else None,
            "event_date_formatted": self.event_date.strftime('%d/%m/%Y') if self.event_date else None,
            "lieu": self.lieu,
            "participants_prevus": self.participants_prevus,
            "participants_reels": self.participants_reels,
            "taux_participation": self.get_participation_rate(),
            "status": self.get_temporal_status(),
            "status_label": self.status_label,
            "status_color": self.status_color,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }

    # ===== Validation =====
    def clean(self):
        """
        Validation des donn√©es avant sauvegarde.
        
        Raises:
            ValidationError: Si les donn√©es ne sont pas valides
        """
        super().clean()
        
        today = timezone.now().date()
        
        # Validation type "Autre"
        if self.type_evenement == self.TypeEvenement.AUTRE and not self.description_autre:
            raise ValidationError({
                'description_autre': _("Veuillez d√©crire l'√©v√©nement de type 'Autre'.")
            })
        
        # Validation de date ancienne (warning uniquement)
        if self.event_date and self.event_date < today - timezone.timedelta(days=365):
            logger.warning(f"Date ancienne pour l'√©v√©nement #{self.pk} : {self.event_date}")
        
        # Validation participants
        if self.participants_reels is not None and self.participants_prevus:
            if self.participants_reels > self.participants_prevus * 1.5:
                logger.warning(f"Participants r√©els ({self.participants_reels}) d√©passent largement les pr√©visions ({self.participants_prevus}) pour l'√©v√©nement #{self.pk}")
                
            if self.participants_reels == 0 and self.get_temporal_status() == self.StatutTemporel.PASSE:
                logger.warning(f"√âv√©nement pass√© #{self.pk} avec 0 participant r√©el")

    # ===== Sauvegarde =====
    def save(self, *args, **kwargs):
        """
        üíæ Sauvegarde l'√©v√©nement avec nettoyage, validation, et journalisation des modifications.

        - Valide les champs (`full_clean`)
        - Utilise `transaction.atomic` pour la coh√©rence
        - Logue les diff√©rences si modification d√©tect√©e
        - Permet le suivi utilisateur via `user=...` dans `kwargs`
        
        Args:
            *args: Arguments positionnels
            **kwargs: Arguments nomm√©s, notamment user
        """
        user = kwargs.pop("user", None)
        is_new = self.pk is None
        original = None if is_new else self.__class__.objects.filter(pk=self.pk).first()

        # Validation des donn√©es
        self.full_clean()

        with transaction.atomic():
            # Sauvegarde
            super().save(*args, user=user, **kwargs)
            
            # Journalisation
            if is_new:
                logger.info(f"Nouvel √©v√©nement '{self}' cr√©√© (ID: {self.pk}).")
            elif original:
                self._log_changes(original)

    def _log_changes(self, original):
        """
        üìù Enregistre les modifications d√©tect√©es par comparaison avec l'instance originale.

        Args:
            original (Evenement): Ancienne version de l'objet avant modification.
        """
        # Liste des champs √† surveiller
        fields_to_watch = [
            ('type_evenement', 'Type d\'√©v√©nement'),
            ('event_date', 'Date'),
            ('formation_id', 'Formation'),
            ('lieu', 'Lieu'),
            ('participants_prevus', 'Participants pr√©vus'),
            ('participants_reels', 'Participants r√©els'),
            ('description_autre', 'Description personnalis√©e'),
        ]
        
        # D√©tection des changements
        changes = []
        for field, label in fields_to_watch:
            old_value = getattr(original, field)
            new_value = getattr(self, field)
            
            if old_value != new_value:
                old_display = self._format_field_value(field, old_value)
                new_display = self._format_field_value(field, new_value)
                changes.append(f"{label}: '{old_display}' ‚Üí '{new_display}'")
        
        # Journalisation si des changements sont d√©tect√©s
        if changes:
            logger.info(f"Modification de l'√©v√©nement #{self.pk} : {', '.join(changes)}")
    
    def _format_field_value(self, field_name, value):
        """
        Formate une valeur de champ pour l'affichage dans les logs.
        
        Args:
            field_name (str): Nom du champ
            value: Valeur √† formater
            
        Returns:
            str: Valeur format√©e
        """
        if value is None:
            return "Non d√©fini"
            
        if field_name == 'event_date' and value:
            return value.strftime('%d/%m/%Y')
            
        if field_name == 'type_evenement':
            return dict(self.TypeEvenement.choices).get(value, value)
            
        if field_name == 'formation_id' and value:
            try:
                formation = Formation.objects.get(pk=value)
                return formation.nom
            except Formation.DoesNotExist:
                return f"Formation #{value}"
                
        return str(value)

    # ===== Status temporel =====
    def get_temporal_status(self, days=None):
        """
        üß≠ Retourne le statut temporel de l'√©v√©nement.
        
        Args:
            days (int, optional): Jours √† consid√©rer pour "bient√¥t"
                Si None, utilise la valeur par d√©faut DAYS_SOON
        
        Returns:
            str: Statut temporel (past, today, soon, future, unknown)
        """
        days = days or self.DAYS_SOON
        
        if not self.event_date:
            return self.StatutTemporel.INCONNU
            
        today = timezone.now().date()
        
        if self.event_date < today:
            return self.StatutTemporel.PASSE
            
        if self.event_date == today:
            return self.StatutTemporel.AUJOURD_HUI
            
        if self.event_date <= today + timezone.timedelta(days=days):
            return self.StatutTemporel.BIENTOT
            
        return self.StatutTemporel.FUTUR

    @property
    def status_label(self):
        """
        Libell√© du statut temporel, adapt√© pour l'affichage.
        
        Returns:
            str: Libell√© du statut (Pass√©, Aujourd'hui, √Ä venir, etc.)
        """
        return {
            self.StatutTemporel.PASSE: _("Pass√©"),
            self.StatutTemporel.AUJOURD_HUI: _("Aujourd'hui"),
            self.StatutTemporel.BIENTOT: _("Bient√¥t"),
            self.StatutTemporel.FUTUR: _("√Ä venir"),
            self.StatutTemporel.INCONNU: _("Date inconnue"),
        }.get(self.get_temporal_status(), _("Inconnu"))

    @property
    def status_color(self):
        """
        Classe CSS pour la couleur du statut.
        
        Returns:
            str: Classe CSS Bootstrap (text-*)
        """
        return {
            self.StatutTemporel.PASSE: "text-secondary",
            self.StatutTemporel.AUJOURD_HUI: "text-danger",
            self.StatutTemporel.BIENTOT: "text-warning",
            self.StatutTemporel.FUTUR: "text-primary",
            self.StatutTemporel.INCONNU: "text-muted",
        }.get(self.get_temporal_status(), "text-muted")
    
    @property
    def status_badge_class(self):
        """
        Classe CSS pour un badge de statut.
        
        Returns:
            str: Classe CSS Bootstrap (badge-*)
        """
        return {
            self.StatutTemporel.PASSE: "badge-secondary",
            self.StatutTemporel.AUJOURD_HUI: "badge-danger",
            self.StatutTemporel.BIENTOT: "badge-warning",
            self.StatutTemporel.FUTUR: "badge-primary",
            self.StatutTemporel.INCONNU: "badge-light",
        }.get(self.get_temporal_status(), "badge-light")
    
    @property
    def is_past(self):
        """
        Indique si l'√©v√©nement est pass√©.
        
        Returns:
            bool: True si l'√©v√©nement est pass√©
        """
        return self.get_temporal_status() == self.StatutTemporel.PASSE
    
    @property
    def is_today(self):
        """
        Indique si l'√©v√©nement a lieu aujourd'hui.
        
        Returns:
            bool: True si l'√©v√©nement est aujourd'hui
        """
        return self.get_temporal_status() == self.StatutTemporel.AUJOURD_HUI
    
    @property
    def is_future(self):
        """
        Indique si l'√©v√©nement est √† venir.
        
        Returns:
            bool: True si l'√©v√©nement est √† venir
        """
        status = self.get_temporal_status()
        return status in [self.StatutTemporel.BIENTOT, self.StatutTemporel.FUTUR]

    # ===== Statistiques =====
    def get_participation_rate(self):
        """
        üìä Calcule le taux de participation si possible.
        
        Returns:
            float: Taux de participation en pourcentage, ou None
        """
        if self.participants_prevus and self.participants_reels is not None and self.participants_prevus > 0:
            return round((self.participants_reels / self.participants_prevus) * 100, 1)
        return None
    
    @property
    def taux_participation(self):
        """Alias pour get_participation_rate."""
        return self.get_participation_rate()
    
    @property
    def taux_participation_formatted(self):
        """
        Taux de participation format√© pour l'affichage.
        
        Returns:
            str: Taux format√© avec % ou "N/A"
        """
        taux = self.get_participation_rate()
        return f"{taux}%" if taux is not None else "N/A"
    
    @cached_property
    def participation_status(self):
        """
        √âvalue le niveau de participation.
        
        Returns:
            str: 'success', 'warning', 'danger' ou 'neutral'
        """
        taux = self.get_participation_rate()
        if taux is None:
            return 'neutral'
            
        if taux >= 90:
            return 'success'
        if taux >= 60:
            return 'warning'
        return 'danger'
    
    # ===== M√©thodes de classe =====
    @classmethod
    def get_evenements_du_mois(cls, annee=None, mois=None):
        """
        R√©cup√®re les √©v√©nements pour un mois donn√©.
        
        Args:
            annee (int, optional): Ann√©e, par d√©faut l'ann√©e en cours
            mois (int, optional): Mois (1-12), par d√©faut le mois en cours
            
        Returns:
            QuerySet: √âv√©nements du mois sp√©cifi√©
        """
        today = timezone.now().date()
        annee = annee or today.year
        mois = mois or today.month
        
        return cls.objects.filter(
            event_date__year=annee,
            event_date__month=mois
        ).order_by('event_date')
    
    @classmethod
    def get_stats_by_type(cls, start_date=None, end_date=None):
        """
        Statistiques de participation par type d'√©v√©nement.
        
        Args:
            start_date (date, optional): Date de d√©but pour le filtre
            end_date (date, optional): Date de fin pour le filtre
            
        Returns:
            dict: Statistiques par type d'√©v√©nement
        """
        queryset = cls.objects.all()
        
        # Appliquer les filtres de date si fournis
        if start_date:
            queryset = queryset.filter(event_date__gte=start_date)
        if end_date:
            queryset = queryset.filter(event_date__lte=end_date)
        
        # Agr√©gation par type d'√©v√©nement
        stats = queryset.values('type_evenement').annotate(
            count=Count('id'),
            total_prevus=Sum('participants_prevus'),
            total_reels=Sum('participants_reels'),
            taux_moyen=Avg(
                models.Case(
                    models.When(
                        participants_prevus__gt=0,
                        then=100 * F('participants_reels') / F('participants_prevus')
                    ),
                    default=None,
                    output_field=models.FloatField()
                )
            )
        ).order_by('-count')
        
        # Conversion en dictionnaire avec libell√©s
        result = {}
        type_choices = dict(cls.TypeEvenement.choices)
        
        for item in stats:
            type_key = item['type_evenement']
            result[type_key] = {
                'libelle': type_choices.get(type_key, type_key),
                'nombre': item['count'],
                'participants_prevus': item['total_prevus'] or 0,
                'participants_reels': item['total_reels'] or 0,
                'taux_participation': round(item['taux_moyen'], 1) if item['taux_moyen'] else None
            }
        
        return result