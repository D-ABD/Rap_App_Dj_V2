import logging
import re
from django.db import models, transaction
from django.core.exceptions import ValidationError
from django.utils.text import slugify
from django.utils.html import format_html
from django.urls import reverse
from .base import BaseModel

# Configuration du logger
logger = logging.getLogger("application.typeoffre")

# ----------------------------------------------------
# Signaux d√©plac√©s dans un fichier signals/
# ----------------------------------------------------


class TypeOffre(BaseModel):
    """
    üìã Mod√®le repr√©sentant les types d'offres de formation.

    Ce mod√®le d√©finit les diff√©rents types d'offres disponibles dans l'application, 
    comme CRIF, Alternance, POEC, POEI, etc. Il permet √©galement d'ajouter un type personnalis√© 
    via l'option "Autre".

    Attributes:
        nom: Type d'offre s√©lectionn√© parmi les choix pr√©d√©finis
        autre: Description personnalis√©e si le type est "Autre"
        couleur: Code couleur hexad√©cimal pour l'affichage visuel
        created_at: Date de cr√©ation (de BaseModel)
        updated_at: Date de derni√®re modification (de BaseModel)
    
    ‚úÖ Utilisation principale :
    - Associer un type d'offre √† une formation.
    - Filtrer les formations par type d'offre.
    - Permettre l'ajout d'un type personnalis√© si besoin.
    - S√©rialisation facilit√© pour l'API REST.
    """

    # Constantes pour les choix de types d'offre
    CRIF = 'crif'
    ALTERNANCE = 'alternance'
    POEC = 'poec'
    POEI = 'poei'
    TOSA = 'tosa'
    AUTRE = 'autre'
    NON_DEFINI = 'non_defini'
    
    TYPE_OFFRE_CHOICES = [
        (CRIF, 'CRIF'),
        (ALTERNANCE, 'Alternance'),
        (POEC, 'POEC'),
        (POEI, 'POEI'),
        (TOSA, 'TOSA'),
        (AUTRE, 'Autre'),
        (NON_DEFINI, 'Non d√©fini'),
    ]
    
    # Mapping des couleurs par d√©faut pour chaque type d'offre
    COULEURS_PAR_DEFAUT = {
        CRIF: "#D735B4",        # üîµ Bleu (CRIF)
        ALTERNANCE: "#063c68",  # üü¢ Vert (Alternance)
        POEC: "#260a5b",        # üü£ Violet (POEC)
        POEI: "#0b4f04",        # üü† Orange (POEI)
        TOSA: "#323435",         # ‚öôÔ∏è Gris (TOSA)
        AUTRE: "#ff6207",        # üü° Jaune (Autre)
        NON_DEFINI: "#000000",   # ‚ö´ Noir (Non d√©fini)
    }
    
    nom = models.CharField(
        max_length=100, 
        choices=TYPE_OFFRE_CHOICES, 
        default=NON_DEFINI, 
        verbose_name="Type d'offre",
        help_text="S√©lectionnez le type d'offre de formation parmi les choix pr√©d√©finis"
    )
    
    autre = models.CharField(
        max_length=255, 
        blank=True,
        verbose_name="Autre (personnalis√©)",
        help_text="Si vous avez choisi 'Autre', pr√©cisez le type d'offre personnalis√©"
    )
    
    couleur = models.CharField(
        max_length=7,
        blank=True,
        null=True,
        verbose_name="Couleur associ√©e (hexad√©cimal)",
        help_text="Code couleur hexad√©cimal (ex: #FF5733) pour l'affichage visuel"
    )


    def to_csv_row(self) -> list[str]:
        """
        üì§ Convertit le type d'offre en ligne pour export CSV.

        Returns:
            list: Valeurs ordonn√©es correspondant aux en-t√™tes CSV
        """
        return [
            str(self.pk),
            self.get_nom_display(),
            self.nom,
            self.autre or '',
            self.couleur,
            str(self.get_formations_count()),
            self.created_at.strftime('%Y-%m-%d %H:%M:%S') if self.created_at else '',
            self.updated_at.strftime('%Y-%m-%d %H:%M:%S') if self.updated_at else '',
            self.created_by.username if self.created_by else 'Syst√®me',
        ]

    @classmethod
    def get_csv_fields(cls) -> list[str]:
        """
        üóÇÔ∏è Liste des champs exportables.

        Returns:
            list: Noms de champs (correspondant aux colonnes)
        """
        return ['id', 'libelle_affiche', 'nom_technique', 'autre', 'couleur', 'nb_formations', 'created_at', 'updated_at', 'created_by']

    @classmethod
    def get_csv_headers(cls) -> list[str]:
        """
        üè∑Ô∏è En-t√™tes lisibles pour l‚Äôexport CSV.

        Returns:
            list: En-t√™tes pour la premi√®re ligne du CSV
        """
        return ['ID', 'Libell√© affich√©', 'Nom technique', 'Autre (perso)', 'Couleur', 'Nb formations', 'Cr√©√© le', 'Modifi√© le', 'Cr√©√© par']

    def clean(self):
        """
        üîç Validation personnalis√©e des donn√©es avant sauvegarde.
        
        V√©rifications:
        - Si le type d'offre est 'Autre', alors `autre` doit √™tre rempli
        - Format valide pour le code couleur hexad√©cimal
        - Unicit√© du champ 'autre' pour les types personnalis√©s
        
        Raises:
            ValidationError: Si les conditions de validation ne sont pas remplies
        """
        super().clean()
        
        # Validation du type "Autre"
        if self.nom == self.AUTRE and not self.autre:
            raise ValidationError({
                'autre': "Le champ 'autre' doit √™tre renseign√© lorsque le type d'offre est 'Autre'."
            })
        
        # Validation du format du code couleur
        if self.couleur:
            # V√©rification du format hexad√©cimal (#RRGGBB ou #RGB)
            if not re.match(r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$', self.couleur):
                raise ValidationError({
                    'couleur': "Le format de couleur doit √™tre un code hexad√©cimal valide (ex: #FF5733)."
                })
        
        # V√©rification de l'unicit√© du champ 'autre' pour les types personnalis√©s
        if self.nom == self.AUTRE and self.autre:
            # V√©rifier si un autre objet avec le m√™me 'autre' existe d√©j√†
            # Exclure l'objet actuel si on est en train de le modifier
            queryset = TypeOffre.objects.filter(nom=self.AUTRE, autre=self.autre)
            if self.pk:
                queryset = queryset.exclude(pk=self.pk)
            
            if queryset.exists():
                raise ValidationError({
                    'autre': f"Un type d'offre personnalis√© avec le nom '{self.autre}' existe d√©j√†."
                })

    def save(self, *args, **kwargs):
        """
        üíæ Sauvegarde personnalis√©e du mod√®le TypeOffre.

        G√®re :
        - La validation conditionnelle via `skip_validation`
        - L‚Äôattribution automatique d‚Äôune couleur par d√©faut
        - La journalisation d√©taill√©e des changements
        - La compatibilit√© avec le champ `user` de BaseModel

        Args:
            *args: Arguments positionnels transmis √† `super().save()`
            **kwargs:
                - user (User): Utilisateur √† l‚Äôorigine de la modification
                - skip_validation (bool): Si True, d√©sactive la validation (`.full_clean()`)
        """
        is_new = self.pk is None
        user = kwargs.pop("user", None)
        skip_validation = kwargs.pop("skip_validation", False)

        if user:
            self._user = user  # transmis √† BaseModel pour journalisation

        # Nettoyage des champs
        if self.autre:
            self.autre = self.autre.strip()

        if not self.couleur:
            self.couleur = "#6c757d"
        else:
            self.couleur = self.couleur.lower()

        # Affecter une couleur par d√©faut si n√©cessaire
        self.assign_default_color()

        # Appliquer la validation uniquement si non d√©sactiv√©e
        if not skip_validation:
            self.full_clean()

        with transaction.atomic():
            old_instance = None
            if not is_new:
                try:
                    old_instance = TypeOffre.objects.get(pk=self.pk)
                except TypeOffre.DoesNotExist:
                    pass

            # Appel √† BaseModel.save() avec les bons kwargs
            super().save(*args, user=user, skip_validation=skip_validation, **kwargs)

            # Logging
            if is_new:
                logger.info(f"üÜï Cr√©ation du type d'offre : {self}")
            elif old_instance:
                modifications = []
                if old_instance.nom != self.nom:
                    modifications.append(f"nom: {old_instance.nom} ‚Üí {self.nom}")
                if old_instance.autre != self.autre:
                    modifications.append(f"autre: {old_instance.autre} ‚Üí {self.autre}")
                if old_instance.couleur != self.couleur:
                    modifications.append(f"couleur: {old_instance.couleur} ‚Üí {self.couleur}")

                if modifications:
                    logger.info(f"‚úèÔ∏è Modification du type d'offre #{self.pk} : " + ", ".join(modifications))

    def assign_default_color(self):
        """
        üé® Assigne une couleur par d√©faut selon le type d'offre si aucune 
        couleur personnalis√©e n'est d√©finie.
        """
        # On affecte seulement si aucune couleur personnalis√©e ou si c'est la couleur grise par d√©faut
        if not self.couleur or self.couleur == "#6c757d":
            self.couleur = self.COULEURS_PAR_DEFAUT.get(self.nom, "#6c757d")
            logger.debug(f"Couleur par d√©faut assign√©e au type d'offre {self}: {self.couleur}")

    def __str__(self):
        """
        üîÅ Repr√©sentation textuelle du mod√®le dans l'admin Django et les logs.

        Returns:
            str: Nom personnalis√© si le type est "Autre", sinon le nom standard ou cl√© brute
        """
        if self.nom == self.AUTRE and self.autre:
            return self.autre
        return dict(self.TYPE_OFFRE_CHOICES).get(self.nom, self.nom)

    
    def __repr__(self):
        """
        üìù Repr√©sentation technique pour le d√©bogage.
        
        Returns:
            str: Format technique d√©taill√©
        """
        return f"<TypeOffre(id={self.pk}, nom='{self.nom}', autre='{self.autre if self.nom == self.AUTRE else ''}')>"
    
    
    def is_personnalise(self):
        """
        üîç V√©rifie si le type d'offre est personnalis√© (Autre).
        
        Returns:
            bool: True si le type est "Autre", False sinon
        """
        return self.nom == self.AUTRE
    
    def calculer_couleur_texte(self):
        """
        üé® D√©termine la couleur de texte adapt√©e (blanc ou noir) en fonction de la couleur de fond.
        
        Utilise une heuristique simple: les couleurs claires (jaune) ont un texte noir,
        les autres ont un texte blanc pour assurer la lisibilit√©.
        
        Returns:
            str: '#000000' pour les fonds clairs, '#FFFFFF' pour les fonds fonc√©s
        """
        try:
            # Convertir le code hexad√©cimal en valeurs RGB
            hex_color = self.couleur.lstrip('#')
            if len(hex_color) == 3:
                # Convertir les formats courts (#RGB) en format long (#RRGGBB)
                hex_color = ''.join([c*2 for c in hex_color])
            
            r, g, b = [int(hex_color[i:i+2], 16) for i in (0, 2, 4)]
            
            # Calculer la luminosit√© (formule standard)
            luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255
            
            # Si la luminosit√© est sup√©rieure √† 0.5, la couleur est consid√©r√©e comme claire
            if luminance > 0.5:
                return '#000000'  # Texte noir pour les fonds clairs
            return '#FFFFFF'  # Texte blanc pour les fonds fonc√©s
        except Exception as e:
            # En cas d'erreur, utiliser du texte blanc par d√©faut
            logger.warning(f"Erreur lors du calcul de la luminosit√© pour {self.couleur}: {str(e)}")
            return '#FFFFFF'
    
    def get_badge_html(self):
        """
        üè∑Ô∏è G√©n√®re le HTML pour afficher un badge avec la couleur du type d'offre.
        
        Returns:
            SafeString: Code HTML format√© pour le badge
        """
        couleur_texte = self.calculer_couleur_texte()
        return format_html(
            '<span class="badge" style="background-color:{}; color:{}; padding: 3px 8px; border-radius: 5px;">{}</span>',
            self.couleur,
            couleur_texte,
            self.__str__()
        )
    
    def get_formations_count(self):
        """
        üìä Retourne le nombre de formations associ√©es √† ce type d'offre.
        
        Returns:
            int: Nombre de formations utilisant ce type d'offre
        """
        return self.formations.count()
    
    def to_serializable_dict(self, exclude=None):
        """
        üì¶ Retourne un dictionnaire s√©rialisable du type d'offre.
        
        Args:
            exclude (list[str], optional): Liste de champs √† exclure
            
        Returns:
            dict: Donn√©es s√©rialisables du type d'offre
        """
        exclude = exclude or []
        data = super().to_serializable_dict(exclude)
        
        # Ajouter des donn√©es sp√©cifiques au type d'offre
        data.update({
            'libelle': self.__str__(),
            'is_personnalise': self.is_personnalise(),
            'formations_count': self.get_formations_count(),
            'badge_html': self.get_badge_html(),
        })
        
        return data
    
    def invalidate_caches(self):
        """
        üîÑ Invalide les caches associ√©s √† ce type d'offre.
        """
        super().invalidate_caches()
        
        # Invalider les caches sp√©cifiques aux types d'offre
        from django.core.cache import cache
        cache_keys = [
            f"typeoffre_{self.pk}",
            f"typeoffre_liste",
            f"typeoffre_{self.nom}",
            f"formations_par_typeoffre_{self.pk}"
        ]
        
        for key in cache_keys:
            cache.delete(key)

    class Meta:
        verbose_name = "Type d'offre"
        verbose_name_plural = "Types d'offres"
        ordering = ['nom']
        constraints = [
            models.UniqueConstraint(
                fields=['autre'],
                name='unique_autre_non_null',
                condition=models.Q(nom='autre', autre__isnull=False)
            )
        ]
        # Ajout d'index pour optimiser les requ√™tes fr√©quentes
        indexes = [
            models.Index(fields=['nom'], name='typeoffre_nom_idx'),
            models.Index(fields=['autre'], name='typeoffre_autre_idx'),
        ]