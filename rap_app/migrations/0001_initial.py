# Generated by Django 4.2.7 on 2025-07-12 09:43

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.datetime
import django.utils.timezone
import rap_app.models.documents
import rap_app.models.prepacomp


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': 'Un utilisateur avec cette adresse email existe déjà.'}, help_text='Adresse email utilisée pour la connexion', max_length=254, unique=True, verbose_name='Adresse email')),
                ('phone', models.CharField(blank=True, help_text="Numéro de téléphone de l'utilisateur", max_length=20, verbose_name='Téléphone')),
                ('avatar', models.ImageField(blank=True, help_text="Image de profil de l'utilisateur", null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('bio', models.TextField(blank=True, help_text='Texte de présentation ou informations supplémentaires', verbose_name='Biographie')),
                ('role', models.CharField(choices=[('superadmin', 'Super administrateur'), ('admin', 'Administrateur'), ('stagiaire', 'Stagiaire'), ('staff', 'Membre du staff'), ('test', 'Test')], db_index=True, default='stagiaire', help_text="Rôle ou niveau d'accès de l'utilisateur", max_length=20, verbose_name='Rôle')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-date_joined'],
                'permissions': [('can_view_all_users', 'Peut voir tous les utilisateurs'), ('can_export_users', 'Peut exporter les données utilisateurs')],
            },
        ),
        migrations.CreateModel(
            name='Appairage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_appairage', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de mise en relation')),
                ('statut', models.CharField(choices=[('transmis', 'Transmis au partenaire'), ('en_attente', 'En attente de réponse'), ('accepte', 'Accepté'), ('refuse', 'Refusé'), ('annule', 'Annulé')], default='transmis', max_length=20, verbose_name="Statut de l'appairage")),
                ('commentaire', models.TextField(blank=True, null=True, verbose_name='Commentaire')),
                ('retour_partenaire', models.TextField(blank=True, null=True, verbose_name='Retour du partenaire')),
                ('date_retour', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date du retour du partenaire')),
            ],
            options={
                'verbose_name': 'Appairage',
                'verbose_name_plural': 'Appairages',
                'ordering': ['-date_appairage'],
            },
        ),
        migrations.CreateModel(
            name='AtelierTRE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('type_atelier', models.CharField(choices=[('atelier_1', 'Atelier 1 - CV et lettre de motivation'), ('atelier_2', 'Atelier 2 - Simulation entretien'), ('atelier_3', 'Atelier 3 - Prospection entreprise'), ('atelier_4', 'Atelier 4 - Réseaux sociaux pro'), ('atelier_5', 'Atelier 5 - Posture professionnelle'), ('atelier_6', 'Atelier 6 - Bilan et plan d’action'), ('autre', 'Autre')], help_text='Type d’atelier collectif', max_length=30, verbose_name='Type d’atelier')),
                ('date', models.DateField(help_text="Date à laquelle l'atelier a eu lieu", verbose_name="Date de l'atelier")),
                ('remarque', models.TextField(blank=True, help_text='Commentaires ou contexte de l’atelier', null=True, verbose_name='Remarques globales')),
            ],
            options={
                'verbose_name': 'Atelier TRE',
                'verbose_name_plural': 'Ateliers TRE',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Candidat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('nom', models.CharField(max_length=100, verbose_name='Nom')),
                ('prenom', models.CharField(max_length=100, verbose_name='Prénom')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('telephone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Téléphone')),
                ('ville', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ville')),
                ('code_postal', models.CharField(blank=True, max_length=10, null=True, verbose_name='Code postal')),
                ('entretien_done', models.BooleanField(default=False, help_text='Le candidat a-t-il passé un entretien ?', verbose_name='Entretien réalisé')),
                ('test_is_ok', models.BooleanField(default=False, help_text="Le candidat a-t-il réussi les tests d'entrée ?", verbose_name="Test d'entrée réussi")),
                ('statut', models.CharField(choices=[('accompagnement', 'En accompagnement'), ('formation', 'En formation'), ('appairage', 'En appairage'), ('emploi', 'En emploi'), ('abandon', 'Abandon'), ('autre', 'Autre')], db_index=True, default='accompagnement', max_length=30, verbose_name='Statut du candidat')),
                ('notes', models.TextField(blank=True, help_text='Notes libres concernant le candidat', null=True, verbose_name='Notes')),
                ('date_inscription', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date d’inscription')),
                ('date_naissance', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('rqth', models.BooleanField(default=False, help_text='Reconnaissance qualité travailleur handicapé', verbose_name='RQTH')),
                ('type_contrat', models.CharField(blank=True, choices=[('apprentissage', 'Apprentissage'), ('professionnalisation', 'Professionnalisation'), ('sans_contrat', 'Sans contrat'), ('poei', 'POEI'), ('poec', 'POEC'), ('autre', 'Autre')], max_length=30, null=True, verbose_name='Type de contrat')),
                ('disponibilite', models.CharField(blank=True, choices=[('immediate', 'Immédiate'), ('2_3_mois', '2-3 mois'), ('6_mois', '6 mois')], max_length=30, null=True, verbose_name='Disponibilité')),
                ('permis_b', models.BooleanField(default=False, verbose_name='Permis B')),
                ('csp', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4')], null=True, verbose_name='CSP')),
                ('communication', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4')], null=True, verbose_name='Niveau de communication')),
                ('experience', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4')], null=True, verbose_name='Niveau d’expérience')),
                ('date_placement', models.DateField(blank=True, null=True, verbose_name='Date de placement')),
                ('resultat_placement', models.CharField(blank=True, choices=[('admis', 'Admis'), ('non_admis', 'Non admis'), ('second_entretien', 'Second entretien'), ('en_attente', 'En attente'), ('abandon_candidat', 'Abandon candidat'), ('abandon_ets', 'Abandon entreprise'), ('deja_place', 'Déjà placé'), ('absent', 'Absent')], max_length=30, null=True, verbose_name='Résultat du placement')),
                ('contrat_signe', models.CharField(blank=True, choices=[('en_cours', 'En cours'), ('oui', 'Oui'), ('non', 'Non')], max_length=10, null=True, verbose_name='Contrat signé')),
                ('courrier_rentree', models.BooleanField(default=False, verbose_name='Courrier de rentrée envoyé')),
                ('date_rentree', models.DateField(blank=True, null=True, verbose_name='Date de rentrée')),
                ('admissible', models.BooleanField(default=False, verbose_name='Admissible')),
                ('compte_utilisateur', models.OneToOneField(blank=True, help_text='Compte utilisateur associé à ce candidat', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='candidat_associe', to=settings.AUTH_USER_MODEL, verbose_name='Compte utilisateur')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
            ],
            options={
                'verbose_name': 'Candidat',
                'verbose_name_plural': 'Candidats',
                'ordering': ['-date_inscription'],
            },
        ),
        migrations.CreateModel(
            name='Centre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('nom', models.CharField(db_index=True, help_text='Nom complet du centre de formation (doit être unique)', max_length=255, unique=True, verbose_name='Nom du centre')),
                ('code_postal', models.CharField(blank=True, help_text='Code postal à 5 chiffres du centre', max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Le code postal doit contenir exactement 5 chiffres', regex='^\\d{5}$')], verbose_name='Code postal')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Centre',
                'verbose_name_plural': 'Centres',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Formation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('nom', models.CharField(help_text='Intitulé complet de la formation', max_length=255, verbose_name='Nom de la formation')),
                ('start_date', models.DateField(blank=True, help_text='Date de début de la formation', null=True, verbose_name='Date de début')),
                ('end_date', models.DateField(blank=True, help_text='Date de fin de la formation', null=True, verbose_name='Date de fin')),
                ('num_kairos', models.CharField(blank=True, help_text='Identifiant Kairos de la formation', max_length=50, null=True, verbose_name='Numéro Kairos')),
                ('num_offre', models.CharField(blank=True, help_text="Identifiant de l'offre", max_length=50, null=True, verbose_name="Numéro de l'offre")),
                ('num_produit', models.CharField(blank=True, help_text='Identifiant du produit de formation', max_length=50, null=True, verbose_name='Numéro du produit')),
                ('prevus_crif', models.PositiveIntegerField(default=0, help_text='Nombre de places disponibles CRIF', verbose_name='Places prévues CRIF')),
                ('prevus_mp', models.PositiveIntegerField(default=0, help_text='Nombre de places disponibles MP', verbose_name='Places prévues MP')),
                ('inscrits_crif', models.PositiveIntegerField(default=0, help_text="Nombre d'inscrits CRIF", verbose_name='Inscrits CRIF')),
                ('inscrits_mp', models.PositiveIntegerField(default=0, help_text="Nombre d'inscrits MP", verbose_name='Inscrits MP')),
                ('saturation', models.FloatField(blank=True, editable=False, help_text='Pourcentage moyen de saturation basé sur le taux d’inscrits', null=True, verbose_name='Niveau de saturation moyen')),
                ('assistante', models.CharField(blank=True, help_text="Nom de l'assistante responsable", max_length=255, null=True, verbose_name='Assistante')),
                ('cap', models.PositiveIntegerField(blank=True, help_text="Capacité maximale d'accueil", null=True, verbose_name='Capacité maximale')),
                ('convocation_envoie', models.BooleanField(default=False, help_text='Indique si les convocations ont été envoyées', verbose_name='Convocation envoyée')),
                ('entree_formation', models.PositiveIntegerField(default=0, help_text='Nombre de personnes entrées en formation', verbose_name='Entrées en formation')),
                ('nombre_candidats', models.PositiveIntegerField(default=0, help_text='Nombre total de candidats pour cette formation', verbose_name='Nombre de candidats')),
                ('nombre_entretiens', models.PositiveIntegerField(default=0, help_text="Nombre d'entretiens réalisés", verbose_name="Nombre d'entretiens")),
                ('nombre_evenements', models.PositiveIntegerField(default=0, help_text="Nombre d'événements liés à cette formation", verbose_name="Nombre d'événements")),
                ('dernier_commentaire', models.TextField(blank=True, help_text='Contenu du dernier commentaire ajouté', null=True, verbose_name='Dernier commentaire')),
                ('centre', models.ForeignKey(blank=True, help_text='Centre où se déroule la formation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='formations', to='rap_app.centre', verbose_name='Centre de formation')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
            ],
            options={
                'verbose_name': 'Formation',
                'verbose_name_plural': 'Formations',
                'ordering': ['-start_date', 'nom'],
            },
        ),
        migrations.CreateModel(
            name='Partenaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('type', models.CharField(choices=[('entreprise', 'Entreprise'), ('partenaire', 'Partenaire institutionnel'), ('personne', 'Personne physique')], db_index=True, default='partenaire', help_text="Définit s'il s'agit d'une entreprise, d'un partenaire ou d'une personne physique", max_length=20, verbose_name='Type de partenaire')),
                ('nom', models.CharField(help_text="Nom complet de l'entité", max_length=255, unique=True, verbose_name='Nom')),
                ('secteur_activite', models.CharField(blank=True, help_text="Domaine d'activité principal", max_length=255, null=True, verbose_name="Secteur d'activité")),
                ('street_name', models.CharField(blank=True, help_text='Adresse postale (rue, numéro)', max_length=200, null=True, verbose_name='Adresse')),
                ('zip_code', models.CharField(blank=True, help_text='Code postal à 5 chiffres', max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Le code postal doit être composé de 5 chiffres.', regex='^[0-9]{5}$')], verbose_name='Code postal')),
                ('city', models.CharField(blank=True, help_text='Ville', max_length=100, null=True, verbose_name='Ville')),
                ('country', models.CharField(blank=True, default='France', help_text='Pays (France par défaut)', max_length=100, null=True, verbose_name='Pays')),
                ('contact_nom', models.CharField(blank=True, help_text='Nom et prénom du contact principal', max_length=255, null=True, verbose_name='Nom du contact')),
                ('contact_poste', models.CharField(blank=True, help_text='Fonction occupée par le contact', max_length=255, null=True, verbose_name='Poste du contact')),
                ('contact_telephone', models.CharField(blank=True, help_text='Numéro de téléphone au format français', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Entrez un numéro de téléphone français valide.', regex='^(0[1-9]\\d{8})$|^(?:\\+33|0033)[1-9]\\d{8}$')], verbose_name='Téléphone')),
                ('contact_email', models.EmailField(blank=True, help_text='Adresse email du contact', max_length=254, null=True, verbose_name='Email')),
                ('website', models.URLField(blank=True, help_text='Site web officiel (http:// ou https://)', null=True, validators=[django.core.validators.RegexValidator(message="L'URL doit commencer par http:// ou https://", regex='^(http|https)://')], verbose_name='Site web')),
                ('social_network_url', models.URLField(blank=True, help_text="URL d'un profil LinkedIn, Twitter, etc.", null=True, verbose_name='Réseau social')),
                ('actions', models.CharField(blank=True, choices=[('recrutement_emploi', 'Recrutement - Emploi'), ('recrutement_stage', 'Recrutement - Stage'), ('recrutement_apprentissage', 'Recrutement - Apprentissage'), ('presentation_metier_entreprise', 'Présentation métier/entreprise'), ('visite_entreprise', "Visite d'entreprise"), ('coaching', 'Coaching'), ('partenariat', 'Partenariat'), ('autre', 'Autre'), ('non_definie', 'Non définie')], help_text="Catégorie principale d'interaction avec ce partenaire", max_length=50, null=True, verbose_name="Type d'action")),
                ('action_description', models.TextField(blank=True, help_text='Détails sur les actions menées ou envisagées', null=True, verbose_name="Description de l'action")),
                ('description', models.TextField(blank=True, help_text='Informations générales sur le partenaire', null=True, verbose_name='Description générale')),
                ('slug', models.SlugField(blank=True, help_text='Identifiant URL unique généré automatiquement à partir du nom', max_length=255, null=True, unique=True, verbose_name='Slug')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Partenaire',
                'verbose_name_plural': 'Partenaires',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='VAE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('reference', models.CharField(blank=True, help_text='Référence unique de la VAE (générée automatiquement si vide)', max_length=50, verbose_name='Référence')),
                ('statut', models.CharField(choices=[('info', "Demande d'informations"), ('dossier', 'Dossier en cours'), ('attente_financement', 'En attente de financement'), ('accompagnement', 'Accompagnement en cours'), ('jury', 'En attente de jury'), ('terminee', 'VAE terminée'), ('abandonnee', 'VAE abandonnée')], default='info', help_text='Statut actuel de la VAE', max_length=20, verbose_name='Statut')),
                ('commentaire', models.TextField(blank=True, help_text='Notes ou informations supplémentaires sur cette VAE', verbose_name='Commentaire')),
                ('centre', models.ForeignKey(help_text='Centre responsable de cette VAE', on_delete=django.db.models.deletion.CASCADE, related_name='vaes', to='rap_app.centre', verbose_name='Centre')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'VAE',
                'verbose_name_plural': 'VAEs',
                'ordering': ['-created_at', 'centre'],
            },
        ),
        migrations.CreateModel(
            name='TypeOffre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('nom', models.CharField(choices=[('crif', 'CRIF'), ('alternance', 'Alternance'), ('poec', 'POEC'), ('poei', 'POEI'), ('tosa', 'TOSA'), ('autre', 'Autre'), ('non_defini', 'Non défini')], default='non_defini', help_text="Sélectionnez le type d'offre de formation parmi les choix prédéfinis", max_length=100, verbose_name="Type d'offre")),
                ('autre', models.CharField(blank=True, help_text="Si vous avez choisi 'Autre', précisez le type d'offre personnalisé", max_length=255, verbose_name='Autre (personnalisé)')),
                ('couleur', models.CharField(blank=True, help_text="Code couleur hexadécimal (ex: #FF5733) pour l'affichage visuel", max_length=7, null=True, verbose_name='Couleur associée (hexadécimal)')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': "Type d'offre",
                'verbose_name_plural': "Types d'offres",
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='SuiviJury',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('annee', models.PositiveIntegerField(default=2025, help_text='Année au format YYYY (ex: 2024)', validators=[django.core.validators.MinValueValidator(2000)], verbose_name='Année')),
                ('mois', models.PositiveSmallIntegerField(choices=[(1, 'Janvier'), (2, 'Février'), (3, 'Mars'), (4, 'Avril'), (5, 'Mai'), (6, 'Juin'), (7, 'Juillet'), (8, 'Août'), (9, 'Septembre'), (10, 'Octobre'), (11, 'Novembre'), (12, 'Décembre')], default=7, help_text="Mois de l'année (1-12)", verbose_name='Mois')),
                ('objectif_jury', models.PositiveIntegerField(default=0, help_text='Nombre de jurys à réaliser pour le mois', verbose_name='Objectif jury')),
                ('jurys_realises', models.PositiveIntegerField(default=0, help_text='Nombre de jurys effectivement réalisés ce mois', verbose_name='Jurys réalisés')),
                ('pourcentage_mensuel', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, help_text="Pourcentage d'atteinte de l'objectif mensuel (calculé automatiquement)", max_digits=6, verbose_name='Pourcentage mensuel')),
                ('centre', models.ForeignKey(help_text='Centre associé à cet enregistrement', on_delete=django.db.models.deletion.CASCADE, to='rap_app.centre', verbose_name='Centre')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Suivi des jurys',
                'verbose_name_plural': 'Suivis des jurys',
                'ordering': ['annee', 'mois', 'centre'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Statut',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('nom', models.CharField(choices=[('non_defini', 'Non défini'), ('recrutement_en_cours', 'Recrutement en cours'), ('formation_en_cours', 'Formation en cours'), ('formation_a_annuler', 'Formation à annuler'), ('formation_a_repousser', 'Formation à repousser'), ('formation_annulee', 'Formation annulée'), ('pleine', 'Pleine'), ('quasi_pleine', 'Quasi-pleine'), ('autre', 'Autre')], help_text='Identifiant du statut parmi les choix prédéfinis', max_length=100, verbose_name='Nom du statut')),
                ('couleur', models.CharField(blank=True, help_text="Couleur hexadécimale (#RRGGBB) pour l'affichage visuel", max_length=7, verbose_name='Couleur')),
                ('description_autre', models.CharField(blank=True, help_text="Description détaillée requise quand le statut est 'Autre'", max_length=255, null=True, verbose_name='Description personnalisée')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Statut',
                'verbose_name_plural': 'Statuts',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Semaine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('annee', models.PositiveIntegerField(default=0, help_text='Année de la semaine', verbose_name='Année')),
                ('mois', models.PositiveIntegerField(default=1, help_text='Mois de la semaine (1-12)', verbose_name='Mois')),
                ('numero_semaine', models.PositiveIntegerField(default=1, help_text="Numéro de la semaine dans l'année", verbose_name='Numéro de semaine')),
                ('date_debut_semaine', models.DateField(help_text='Premier jour de la semaine', verbose_name='Date de début')),
                ('date_fin_semaine', models.DateField(help_text='Dernier jour de la semaine', verbose_name='Date de fin')),
                ('objectif_annuel_prepa', models.PositiveIntegerField(default=0, help_text='Objectif annuel de préparation', verbose_name='Objectif annuel')),
                ('objectif_mensuel_prepa', models.PositiveIntegerField(default=0, help_text='Objectif mensuel de préparation', verbose_name='Objectif mensuel')),
                ('objectif_hebdo_prepa', models.PositiveIntegerField(default=0, help_text='Objectif hebdomadaire de préparation', verbose_name='Objectif hebdomadaire')),
                ('nombre_places_ouvertes', models.PositiveIntegerField(default=0, help_text='Nombre de places ouvertes pour la semaine', verbose_name='Places ouvertes')),
                ('nombre_prescriptions', models.PositiveIntegerField(default=0, help_text='Nombre de prescriptions reçues', verbose_name='Prescriptions')),
                ('nombre_presents_ic', models.PositiveIntegerField(default=0, help_text='Nombre de personnes présentes en information collective', verbose_name='Présents IC')),
                ('nombre_adhesions', models.PositiveIntegerField(default=0, help_text="Nombre d'adhésions réalisées", verbose_name='Adhésions')),
                ('departements', models.JSONField(blank=True, default=dict, help_text="Nombre d'adhésions par département (format JSON)", null=True, verbose_name='Répartition par département')),
                ('nombre_par_atelier', models.JSONField(blank=True, default=dict, help_text='Nombre de participants par atelier (format JSON)', null=True, verbose_name='Répartition par atelier')),
                ('centre', models.ForeignKey(blank=True, help_text='Centre auquel cette semaine est rattachée', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='semaines', to='rap_app.centre', verbose_name='Centre de formation')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Semaine',
                'verbose_name_plural': 'Semaines',
                'ordering': ['-date_debut_semaine'],
            },
        ),
        migrations.CreateModel(
            name='Rapport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('nom', models.CharField(help_text='Titre descriptif du rapport', max_length=255, verbose_name='Nom du rapport')),
                ('type_rapport', models.CharField(choices=[('occupation', "Rapport d'occupation des formations"), ('centre', 'Rapport de performance par centre'), ('statut', 'Rapport de suivi des statuts'), ('evenement', "Rapport d'efficacité des événements"), ('recrutement', 'Rapport de suivi du recrutement'), ('partenaire', "Rapport d'activité des partenaires"), ('repartition', 'Rapport de répartition des partenaires'), ('periodique', 'Rapport périodique'), ('annuel', 'Rapport annuel consolidé'), ('utilisateur', "Rapport d'activité utilisateurs")], help_text='Catégorie du rapport déterminant son contenu', max_length=50, verbose_name='Type de rapport')),
                ('periode', models.CharField(choices=[('quotidien', 'Quotidien'), ('hebdomadaire', 'Hebdomadaire'), ('mensuel', 'Mensuel'), ('trimestriel', 'Trimestriel'), ('annuel', 'Annuel'), ('personnalise', 'Période personnalisée')], help_text='Fréquence du rapport (pour les rapports récurrents)', max_length=50, verbose_name='Périodicité')),
                ('date_debut', models.DateField(help_text='Date de début de la période couverte par le rapport', verbose_name='Date de début')),
                ('date_fin', models.DateField(help_text='Date de fin de la période couverte par le rapport', verbose_name='Date de fin')),
                ('format', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('csv', 'CSV'), ('html', 'HTML')], default='html', help_text='Format de génération du rapport (PDF, Excel, etc.)', max_length=10, verbose_name='Format')),
                ('donnees', models.JSONField(default=dict, help_text='Contenu du rapport au format JSON', verbose_name='Données du rapport')),
                ('temps_generation', models.FloatField(blank=True, help_text='Durée de génération du rapport en secondes', null=True, verbose_name='Temps de génération (s)')),
                ('centre', models.ForeignKey(blank=True, help_text='Centre optionnel pour filtrer les données du rapport', null=True, on_delete=django.db.models.deletion.SET_NULL, to='rap_app.centre', verbose_name='Centre')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('formation', models.ForeignKey(blank=True, help_text='Formation spécifique pour les rapports ciblés', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rapports', to='rap_app.formation', verbose_name='Formation')),
                ('statut', models.ForeignKey(blank=True, help_text='Statut optionnel pour filtrer les données du rapport', null=True, on_delete=django.db.models.deletion.SET_NULL, to='rap_app.statut', verbose_name='Statut')),
                ('type_offre', models.ForeignKey(blank=True, help_text="Type d'offre optionnel pour filtrer les données du rapport", null=True, on_delete=django.db.models.deletion.SET_NULL, to='rap_app.typeoffre', verbose_name="Type d'offre")),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Rapport',
                'verbose_name_plural': 'Rapports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Prospection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('date_prospection', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la prospection', verbose_name='Date de prospection')),
                ('type_contact', models.CharField(choices=[('premier_contact', 'Premier contact'), ('relance', 'Relance')], default='premier_contact', help_text="Indique s'il s'agit d'un premier contact ou d'une relance", max_length=20, verbose_name='Type de contact')),
                ('motif', models.CharField(choices=[('POEI', 'POEI'), ('apprentissage', 'Apprentissage'), ('VAE', 'VAE'), ('partenariat', 'Établir un partenariat'), ('autre', 'Autre')], help_text='Motif principal de la prospection', max_length=30, verbose_name='Motif')),
                ('statut', models.CharField(choices=[('a_faire', 'À faire'), ('en_cours', 'En cours'), ('a_relancer', 'À relancer'), ('acceptee', 'Acceptée'), ('refusee', 'Refusée'), ('annulee', 'Annulée'), ('non_renseigne', 'Non renseigné')], default='a_faire', help_text='État actuel de la prospection', max_length=20, verbose_name='Statut')),
                ('objectif', models.CharField(choices=[('prise_contact', 'Prise de contact'), ('rendez_vous', 'Obtenir un rendez-vous'), ('presentation_offre', "Présentation d'une offre"), ('contrat', 'Signer un contrat'), ('partenariat', 'Établir un partenariat'), ('autre', 'Autre')], default='prise_contact', help_text='Objectif visé par cette prospection', max_length=30, verbose_name='Objectif')),
                ('commentaire', models.TextField(blank=True, help_text='Notes ou commentaires sur cette prospection', null=True, verbose_name='Commentaire')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('formation', models.ForeignKey(blank=True, help_text='Formation associée à cette prospection (optionnel)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prospections', to='rap_app.formation', verbose_name='Formation')),
                ('partenaire', models.ForeignKey(help_text='Partenaire concerné par cette prospection', on_delete=django.db.models.deletion.CASCADE, related_name='prospections', to='rap_app.partenaire', verbose_name='Partenaire')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Suivi de prospection',
                'verbose_name_plural': 'Suivis de prospections',
                'ordering': ['-date_prospection'],
            },
        ),
        migrations.CreateModel(
            name='PrepaCompGlobal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('annee', models.PositiveIntegerField(default=rap_app.models.prepacomp.PrepaCompGlobal.default_annee, help_text='Année concernée', verbose_name='Année')),
                ('total_candidats', models.PositiveIntegerField(default=0, help_text="Nombre total de candidats pour l'année", verbose_name='Total candidats')),
                ('total_prescriptions', models.PositiveIntegerField(default=0, help_text="Nombre total de prescriptions pour l'année", verbose_name='Total prescriptions')),
                ('adhesions', models.PositiveIntegerField(default=0, help_text="Nombre total d'adhésions pour l'année", verbose_name='Adhésions')),
                ('total_presents', models.PositiveIntegerField(default=0, help_text="Nombre total de personnes présentes en IC pour l'année", verbose_name='Total présents')),
                ('total_places_ouvertes', models.PositiveIntegerField(default=0, help_text="Nombre total de places ouvertes pour l'année", verbose_name='Total places ouvertes')),
                ('objectif_annuel_prepa', models.PositiveIntegerField(default=0, help_text='Objectif annuel de préparation', verbose_name='Objectif annuel prépa')),
                ('objectif_hebdomadaire_prepa', models.PositiveIntegerField(default=0, help_text='Objectif hebdomadaire de préparation', verbose_name='Objectif hebdomadaire prépa')),
                ('objectif_annuel_jury', models.PositiveIntegerField(default=0, help_text='Objectif annuel pour les jurys', verbose_name='Objectif annuel jury')),
                ('objectif_mensuel_jury', models.PositiveIntegerField(default=0, help_text='Objectif mensuel pour les jurys', verbose_name='Objectif mensuel jury')),
                ('centre', models.ForeignKey(blank=True, help_text='Centre auquel ces statistiques sont rattachées', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prepa_globaux', to='rap_app.centre', verbose_name='Centre')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Bilan global PrépaComp',
                'verbose_name_plural': 'Bilans globaux PrépaComp',
                'ordering': ['-annee'],
            },
        ),
        migrations.CreateModel(
            name='ParticipationAtelierTRE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('present', models.BooleanField(default=False, verbose_name='Présent ?')),
                ('commentaire_individuel', models.TextField(blank=True, help_text='Remarques ou observations individuelles', null=True, verbose_name='Commentaire')),
                ('ateliertre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rap_app.ateliertre')),
                ('candidat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rap_app.candidat')),
            ],
            options={
                'verbose_name': 'Participation à un atelier TRE',
                'verbose_name_plural': 'Participations à des ateliers TRE',
            },
        ),
        migrations.CreateModel(
            name='LogUtilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name="ID de l'objet")),
                ('action', models.CharField(db_index=True, max_length=255, verbose_name='Action')),
                ('details', models.TextField(blank=True, null=True, verbose_name='Détails')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs_utilisateurs', to='contenttypes.contenttype', verbose_name="Type d'objet")),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Log utilisateur',
                'verbose_name_plural': 'Logs utilisateurs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueStatutVAE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('statut', models.CharField(choices=[('info', "Demande d'informations"), ('dossier', 'Dossier en cours'), ('attente_financement', 'En attente de financement'), ('accompagnement', 'Accompagnement en cours'), ('jury', 'En attente de jury'), ('terminee', 'VAE terminée'), ('abandonnee', 'VAE abandonnée')], help_text='Nouveau statut de la VAE', max_length=20, verbose_name='Statut')),
                ('date_changement_effectif', models.DateField(help_text="Date à laquelle le changement de statut a eu lieu (pas nécessairement aujourd'hui)", verbose_name='Date effective du changement')),
                ('commentaire', models.TextField(blank=True, help_text='Notes ou informations supplémentaires sur ce changement de statut', verbose_name='Commentaire')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
                ('vae', models.ForeignKey(help_text='VAE concernée par ce changement de statut', on_delete=django.db.models.deletion.CASCADE, related_name='historique_statuts', to='rap_app.vae', verbose_name='VAE')),
            ],
            options={
                'verbose_name': 'Historique de statut VAE',
                'verbose_name_plural': 'Historiques de statuts VAE',
                'ordering': ['-date_changement_effectif', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueProspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('date_modification', models.DateTimeField(auto_now_add=True, help_text='Date et heure de la modification', verbose_name='Date de modification')),
                ('ancien_statut', models.CharField(choices=[('a_faire', 'À faire'), ('en_cours', 'En cours'), ('a_relancer', 'À relancer'), ('acceptee', 'Acceptée'), ('refusee', 'Refusée'), ('annulee', 'Annulée'), ('non_renseigne', 'Non renseigné')], help_text='Statut avant la modification', max_length=20, verbose_name='Ancien statut')),
                ('nouveau_statut', models.CharField(choices=[('a_faire', 'À faire'), ('en_cours', 'En cours'), ('a_relancer', 'À relancer'), ('acceptee', 'Acceptée'), ('refusee', 'Refusée'), ('annulee', 'Annulée'), ('non_renseigne', 'Non renseigné')], help_text='Statut après la modification', max_length=20, verbose_name='Nouveau statut')),
                ('type_contact', models.CharField(choices=[('premier_contact', 'Premier contact'), ('relance', 'Relance')], default='premier_contact', help_text='Type de contact utilisé', max_length=20, verbose_name='Type de contact')),
                ('commentaire', models.TextField(blank=True, help_text='Commentaire ou note sur la modification', null=True, verbose_name='Commentaire')),
                ('resultat', models.TextField(blank=True, help_text="Résultat ou conséquence de l'action", null=True, verbose_name='Résultat')),
                ('prochain_contact', models.DateField(blank=True, help_text='Date prévue pour le prochain contact', null=True, verbose_name='Prochain contact')),
                ('moyen_contact', models.CharField(blank=True, choices=[('email', 'Email'), ('telephone', 'Téléphone'), ('visite', 'Visite'), ('reseaux', 'Réseaux sociaux')], help_text='Moyen de communication utilisé', max_length=50, null=True, verbose_name='Moyen de contact')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('prospection', models.ForeignKey(help_text='Prospection concernée par cet historique', on_delete=django.db.models.deletion.CASCADE, related_name='historiques', to='rap_app.prospection', verbose_name='Prospection')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Historique de prospection',
                'verbose_name_plural': 'Historiques de prospections',
                'ordering': ['-date_modification'],
            },
        ),
        migrations.CreateModel(
            name='HistoriquePlacement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('date', models.DateField(verbose_name='Date du placement')),
                ('resultat', models.CharField(choices=[('admis', 'Admis'), ('non_admis', 'Non admis'), ('second_entretien', 'Second entretien'), ('en_attente', 'En attente'), ('abandon_candidat', 'Abandon candidat'), ('abandon_ets', 'Abandon entreprise'), ('deja_place', 'Déjà placé'), ('absent', 'Absent')], max_length=30, verbose_name='Résultat')),
                ('commentaire', models.TextField(blank=True, help_text='Détails complémentaires sur le placement', null=True, verbose_name='Commentaire')),
                ('candidat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historique_placements', to='rap_app.candidat', verbose_name='Candidat')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('entreprise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='placements_historique', to='rap_app.partenaire', verbose_name='Entreprise')),
                ('responsable', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='placements_realises', to=settings.AUTH_USER_MODEL, verbose_name='Responsable')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Historique de placement',
                'verbose_name_plural': 'Historique de placements',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueFormation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('action', models.CharField(choices=[('modification', 'Modification'), ('ajout', 'Ajout'), ('suppression', 'Suppression'), ('commentaire', 'Commentaire'), ('document', 'Document'), ('evenement', 'Événement')], default='modification', help_text="Nature de l'action réalisée (ex : modification, ajout)", max_length=100, verbose_name="Type d'action")),
                ('champ_modifie', models.CharField(help_text='Nom du champ ayant été modifié', max_length=100, verbose_name='Champ modifié')),
                ('ancienne_valeur', models.TextField(blank=True, help_text='Valeur avant la modification', null=True, verbose_name='Ancienne valeur')),
                ('nouvelle_valeur', models.TextField(blank=True, help_text='Valeur après la modification', null=True, verbose_name='Nouvelle valeur')),
                ('commentaire', models.TextField(blank=True, help_text='Commentaire explicatif (facultatif)', null=True, verbose_name='Commentaire de modification')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Données contextuelles (ex : ID utilisateur, origine, etc.)', verbose_name='Détails supplémentaires')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('formation', models.ForeignKey(blank=True, help_text='Formation liée (null si supprimée)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='historiques', to='rap_app.formation', verbose_name='Formation concernée')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Historique de modification de formation',
                'verbose_name_plural': 'Historiques de modifications de formations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueAppairage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('statut', models.CharField(choices=[('transmis', 'Transmis au partenaire'), ('en_attente', 'En attente de réponse'), ('accepte', 'Accepté'), ('refuse', 'Refusé'), ('annule', 'Annulé')], max_length=20)),
                ('commentaire', models.TextField(blank=True, verbose_name='Commentaire')),
                ('appairage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historiques', to='rap_app.appairage')),
                ('auteur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Auteur')),
            ],
            options={
                'verbose_name': 'Historique d’appairage',
                'verbose_name_plural': 'Historiques d’appairages',
                'ordering': ['-date'],
            },
        ),
        migrations.AddField(
            model_name='formation',
            name='partenaires',
            field=models.ManyToManyField(blank=True, help_text='Partenaires associés à cette formation', related_name='formations', to='rap_app.partenaire', verbose_name='Partenaires'),
        ),
        migrations.AddField(
            model_name='formation',
            name='statut',
            field=models.ForeignKey(blank=True, help_text='État actuel de la formation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='formations', to='rap_app.statut', verbose_name='Statut de la formation'),
        ),
        migrations.AddField(
            model_name='formation',
            name='type_offre',
            field=models.ForeignKey(blank=True, help_text="Catégorie d'offre de formation", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='formations', to='rap_app.typeoffre', verbose_name="Type d'offre"),
        ),
        migrations.AddField(
            model_name='formation',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par'),
        ),
        migrations.CreateModel(
            name='Evenement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('type_evenement', models.CharField(choices=[('info_collective_presentiel', 'Information collective présentiel'), ('info_collective_distanciel', 'Information collective distanciel'), ('job_dating', 'Job dating'), ('evenement_emploi', 'Événement emploi'), ('forum', 'Forum'), ('jpo', 'Journée Portes Ouvertes'), ('autre', 'Autre')], db_index=True, help_text="Catégorie de l'événement (ex : forum, job dating, etc.)", max_length=100, verbose_name="Type d'événement")),
                ('description_autre', models.CharField(blank=True, help_text="Détail du type si 'Autre' est sélectionné", max_length=255, null=True, verbose_name='Description personnalisée')),
                ('details', models.TextField(blank=True, help_text='Détails ou informations supplémentaires', null=True, verbose_name='Détails complémentaires')),
                ('event_date', models.DateField(blank=True, help_text="Date prévue pour l'événement", null=True, verbose_name="Date de l'événement")),
                ('lieu', models.CharField(blank=True, help_text="Lieu où se déroule l'événement", max_length=255, null=True, verbose_name='Lieu')),
                ('participants_prevus', models.PositiveIntegerField(blank=True, help_text='Nombre de personnes attendues', null=True, verbose_name='Participants prévus')),
                ('participants_reels', models.PositiveIntegerField(blank=True, help_text='Nombre de participants présents', null=True, verbose_name='Participants réels')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('formation', models.ForeignKey(blank=True, help_text="Formation associée à l'événement", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evenements', to='rap_app.formation', verbose_name='Formation')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Événement',
                'verbose_name_plural': 'Événements',
                'ordering': ['-event_date'],
            },
        ),
        migrations.CreateModel(
            name='DummyModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('name', models.CharField(max_length=100)),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Objet de base',
                'verbose_name_plural': 'Objets de base',
                'ordering': ['-created_at'],
                'get_latest_by': 'created_at',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('nom_fichier', models.CharField(db_index=True, help_text='Nom lisible du fichier (sera nettoyé automatiquement)', max_length=255, verbose_name='Nom du fichier')),
                ('fichier', models.FileField(help_text='Fichier à téléverser (PDF, image, etc.). Max : 10 Mo', upload_to=rap_app.models.documents.filepath_for_document, verbose_name='Fichier')),
                ('type_document', models.CharField(choices=[('pdf', 'PDF'), ('image', 'Image'), ('contrat', 'Contrat signé'), ('autre', 'Autre')], db_index=True, default='autre', help_text='Catégorie du document selon son usage ou son format', max_length=20, verbose_name='Type de document')),
                ('source', models.TextField(blank=True, help_text='Texte optionnel indiquant la provenance du document', null=True, verbose_name='Source')),
                ('taille_fichier', models.PositiveIntegerField(blank=True, help_text='Taille du fichier en kilo-octets (calculée automatiquement)', null=True, verbose_name='Taille (Ko)')),
                ('mime_type', models.CharField(blank=True, help_text='Type MIME détecté automatiquement (ex : application/pdf)', max_length=100, null=True, verbose_name='Type MIME')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('formation', models.ForeignKey(help_text='Formation à laquelle ce document est rattaché', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='rap_app.formation', verbose_name='Formation associée')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Commentaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'objet est actif ou archivé", verbose_name='Actif')),
                ('contenu', models.TextField(help_text='Texte du commentaire (le HTML est automatiquement nettoyé)', verbose_name='Contenu du commentaire')),
                ('saturation', models.PositiveIntegerField(blank=True, help_text='Pourcentage de saturation perçue dans la formation (entre 0 et 100)', null=True, validators=[django.core.validators.MinValueValidator(0, message='La saturation ne peut pas être négative'), django.core.validators.MaxValueValidator(100, message='La saturation ne peut pas dépasser 100%')], verbose_name='Niveau de saturation (%)')),
                ('saturation_formation', models.PositiveIntegerField(blank=True, help_text='Valeur de la saturation de la formation au moment du commentaire', null=True, verbose_name='Saturation de la formation (copiée)')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('formation', models.ForeignKey(help_text='Formation à laquelle ce commentaire est associé', on_delete=django.db.models.deletion.CASCADE, related_name='commentaires', to='rap_app.formation', verbose_name='Formation')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Commentaire',
                'verbose_name_plural': 'Commentaires',
                'ordering': ['formation', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='candidat',
            name='entreprise_placement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='placements', to='rap_app.partenaire', verbose_name='Entreprise de placement'),
        ),
        migrations.AddField(
            model_name='candidat',
            name='entreprise_validee',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entreprises_validees', to='rap_app.partenaire', verbose_name='Entreprise validée'),
        ),
        migrations.AddField(
            model_name='candidat',
            name='evenement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidats', to='rap_app.evenement', verbose_name='Événement'),
        ),
        migrations.AddField(
            model_name='candidat',
            name='formation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='candidats', to='rap_app.formation', verbose_name='Formation'),
        ),
        migrations.AddField(
            model_name='candidat',
            name='responsable_placement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='candidats_gérés', to=settings.AUTH_USER_MODEL, verbose_name='Responsable placement'),
        ),
        migrations.AddField(
            model_name='candidat',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par'),
        ),
        migrations.AddField(
            model_name='candidat',
            name='vu_par',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='candidats_vus', to=settings.AUTH_USER_MODEL, verbose_name='Vu par (staff)'),
        ),
        migrations.AddField(
            model_name='ateliertre',
            name='candidats',
            field=models.ManyToManyField(help_text='Candidats ayant participé à cet atelier', related_name='ateliers_tre_collectifs', through='rap_app.ParticipationAtelierTRE', to='rap_app.candidat', verbose_name='Candidats inscrits'),
        ),
        migrations.AddField(
            model_name='ateliertre',
            name='created_by',
            field=models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Créé par'),
        ),
        migrations.AddField(
            model_name='ateliertre',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par'),
        ),
        migrations.AddField(
            model_name='appairage',
            name='candidat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appairages', to='rap_app.candidat'),
        ),
        migrations.AddField(
            model_name='appairage',
            name='formation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appairages', to='rap_app.formation'),
        ),
        migrations.AddField(
            model_name='appairage',
            name='partenaire',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appairages', to='rap_app.partenaire'),
        ),
        migrations.AddIndex(
            model_name='vae',
            index=models.Index(fields=['statut'], name='vae_statut_idx'),
        ),
        migrations.AddIndex(
            model_name='vae',
            index=models.Index(fields=['created_at'], name='vae_created_idx'),
        ),
        migrations.AddIndex(
            model_name='vae',
            index=models.Index(fields=['reference'], name='vae_reference_idx'),
        ),
        migrations.AddIndex(
            model_name='vae',
            index=models.Index(fields=['centre', 'statut'], name='vae_centre_statut_idx'),
        ),
        migrations.AddIndex(
            model_name='vae',
            index=models.Index(fields=['centre', 'created_at'], name='vae_centre_created_idx'),
        ),
        migrations.AddIndex(
            model_name='typeoffre',
            index=models.Index(fields=['nom'], name='typeoffre_nom_idx'),
        ),
        migrations.AddIndex(
            model_name='typeoffre',
            index=models.Index(fields=['autre'], name='typeoffre_autre_idx'),
        ),
        migrations.AddConstraint(
            model_name='typeoffre',
            constraint=models.UniqueConstraint(condition=models.Q(('autre__isnull', False), ('nom', 'autre')), fields=('autre',), name='unique_autre_non_null'),
        ),
        migrations.AddIndex(
            model_name='suivijury',
            index=models.Index(fields=['annee', 'mois'], name='periode_idx'),
        ),
        migrations.AddIndex(
            model_name='suivijury',
            index=models.Index(fields=['centre', 'annee', 'mois'], name='cent_periode_idx'),
        ),
        migrations.AddIndex(
            model_name='suivijury',
            index=models.Index(fields=['pourcentage_mensuel'], name='sj_pct_idx'),
        ),
        migrations.AddIndex(
            model_name='suivijury',
            index=models.Index(fields=['objectif_jury', 'jurys_realises'], name='sj_obj_jr_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='suivijury',
            unique_together={('centre', 'annee', 'mois')},
        ),
        migrations.AddIndex(
            model_name='statut',
            index=models.Index(fields=['nom'], name='statut_nom_idx'),
        ),
        migrations.AddIndex(
            model_name='statut',
            index=models.Index(fields=['couleur'], name='statut_couleur_idx'),
        ),
        migrations.AddIndex(
            model_name='semaine',
            index=models.Index(fields=['annee', 'mois'], name='semaine_annee_mois_idx'),
        ),
        migrations.AddIndex(
            model_name='semaine',
            index=models.Index(fields=['centre', 'annee'], name='semaine_centre_annee_idx'),
        ),
        migrations.AddIndex(
            model_name='semaine',
            index=models.Index(fields=['date_debut_semaine'], name='semaine_debut_idx'),
        ),
        migrations.AddIndex(
            model_name='semaine',
            index=models.Index(fields=['date_fin_semaine'], name='semaine_fin_idx'),
        ),
        migrations.AddIndex(
            model_name='semaine',
            index=models.Index(fields=['numero_semaine'], name='semaine_numero_idx'),
        ),
        migrations.AddConstraint(
            model_name='semaine',
            constraint=models.CheckConstraint(check=models.Q(('date_debut_semaine__lte', models.F('date_fin_semaine'))), name='semaine_dates_coherentes'),
        ),
        migrations.AlterUniqueTogether(
            name='semaine',
            unique_together={('numero_semaine', 'annee', 'centre')},
        ),
        migrations.AddIndex(
            model_name='rapport',
            index=models.Index(fields=['created_at'], name='rapport_created_idx'),
        ),
        migrations.AddIndex(
            model_name='rapport',
            index=models.Index(fields=['date_debut', 'date_fin'], name='rapport_periode_idx'),
        ),
        migrations.AddIndex(
            model_name='rapport',
            index=models.Index(fields=['type_rapport'], name='rapport_type_idx'),
        ),
        migrations.AddIndex(
            model_name='rapport',
            index=models.Index(fields=['format'], name='rapport_format_idx'),
        ),
        migrations.AddIndex(
            model_name='rapport',
            index=models.Index(fields=['centre'], name='rapport_centre_idx'),
        ),
        migrations.AddIndex(
            model_name='rapport',
            index=models.Index(fields=['formation'], name='rapport_formation_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['statut'], name='prosp_statut_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['date_prospection'], name='prosp_date_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['partenaire'], name='prosp_partenaire_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['formation'], name='prosp_formation_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['created_by'], name='prosp_createdby_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['motif'], name='prosp_motif_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['objectif'], name='prosp_objectif_idx'),
        ),
        migrations.AddConstraint(
            model_name='prospection',
            constraint=models.CheckConstraint(check=models.Q(('date_prospection__lte', django.db.models.functions.datetime.Now())), name='prosp_date_not_future'),
        ),
        migrations.AddConstraint(
            model_name='prospection',
            constraint=models.CheckConstraint(check=models.Q(('statut', 'acceptee'), models.Q(('objectif', 'contrat'), _negated=True), _negated=True), name='prosp_acceptee_contrat'),
        ),
        migrations.AddIndex(
            model_name='prepacompglobal',
            index=models.Index(fields=['centre', 'annee'], name='prepaglobal_centre_annee_idx'),
        ),
        migrations.AddIndex(
            model_name='prepacompglobal',
            index=models.Index(fields=['annee'], name='prepaglobal_annee_idx'),
        ),
        migrations.AddConstraint(
            model_name='prepacompglobal',
            constraint=models.CheckConstraint(check=models.Q(('annee__gte', 2020), ('annee__lte', 2100)), name='prepaglobal_annee_valide'),
        ),
        migrations.AlterUniqueTogether(
            name='prepacompglobal',
            unique_together={('centre', 'annee')},
        ),
        migrations.AlterUniqueTogether(
            name='participationateliertre',
            unique_together={('candidat', 'ateliertre')},
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['nom'], name='partenaire_nom_idx'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['secteur_activite'], name='partenaire_secteur_idx'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['slug'], name='partenaire_slug_idx'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['zip_code'], name='partenaire_cp_idx'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['type'], name='partenaire_type_idx'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['actions'], name='partenaire_actions_idx'),
        ),
        migrations.AddConstraint(
            model_name='partenaire',
            constraint=models.CheckConstraint(check=models.Q(('nom', ''), _negated=True), name='partenaire_nom_not_empty'),
        ),
        migrations.AddIndex(
            model_name='logutilisateur',
            index=models.Index(fields=['content_type', 'object_id'], name='rap_app_log_content_04adbe_idx'),
        ),
        migrations.AddIndex(
            model_name='logutilisateur',
            index=models.Index(fields=['created_at'], name='rap_app_log_created_78479c_idx'),
        ),
        migrations.AddIndex(
            model_name='logutilisateur',
            index=models.Index(fields=['action'], name='rap_app_log_action_3ca38c_idx'),
        ),
        migrations.AddIndex(
            model_name='historiquestatutvae',
            index=models.Index(fields=['vae', 'statut'], name='hist_vae_statut_idx'),
        ),
        migrations.AddIndex(
            model_name='historiquestatutvae',
            index=models.Index(fields=['date_changement_effectif'], name='hist_vae_date_idx'),
        ),
        migrations.AddIndex(
            model_name='historiquestatutvae',
            index=models.Index(fields=['vae', 'date_changement_effectif'], name='hist_vae_vae_date_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueprospection',
            index=models.Index(fields=['prospection'], name='histprosp_prosp_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueprospection',
            index=models.Index(fields=['date_modification'], name='histprosp_date_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueprospection',
            index=models.Index(fields=['prochain_contact'], name='histprosp_next_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueprospection',
            index=models.Index(fields=['nouveau_statut'], name='histprosp_statut_idx'),
        ),
        migrations.AddConstraint(
            model_name='historiqueprospection',
            constraint=models.CheckConstraint(check=models.Q(('prochain_contact__isnull', True), ('prochain_contact__gte', django.db.models.functions.datetime.Now()), _connector='OR'), name='histprosp_prochain_contact_futur'),
        ),
        migrations.AddIndex(
            model_name='historiqueformation',
            index=models.Index(fields=['-created_at'], name='hist_form_date_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueformation',
            index=models.Index(fields=['formation'], name='hist_form_formation_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueformation',
            index=models.Index(fields=['action'], name='hist_form_action_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueformation',
            index=models.Index(fields=['champ_modifie'], name='hist_form_champ_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['start_date'], name='form_start_date_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['end_date'], name='form_end_date_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['nom'], name='form_nom_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['statut'], name='form_statut_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['type_offre'], name='form_type_offre_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['convocation_envoie'], name='form_convoc_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['centre'], name='form_centre_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['start_date', 'end_date'], name='form_dates_idx'),
        ),
        migrations.AddConstraint(
            model_name='formation',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('start_date__isnull', True), ('end_date__isnull', True), ('start_date__lte', models.F('end_date')), _connector='OR')), name='formation_dates_coherentes'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['event_date'], name='event_date_idx'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['type_evenement'], name='event_type_idx'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['formation'], name='event_formation_idx'),
        ),
        migrations.AddConstraint(
            model_name='evenement',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('description_autre__isnull', False), ('type_evenement', 'autre')), models.Q(('type_evenement', 'autre'), _negated=True), _connector='OR'), name='autre_needs_description'),
        ),
        migrations.AddIndex(
            model_name='dummymodel',
            index=models.Index(fields=['is_active'], name='rap_app_dummymodel_active_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['nom_fichier'], name='doc_filename_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['formation'], name='doc_formation_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['type_document'], name='doc_type_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['created_at'], name='doc_created_idx'),
        ),
        migrations.AddConstraint(
            model_name='document',
            constraint=models.CheckConstraint(check=models.Q(('nom_fichier__isnull', False), models.Q(('nom_fichier', ''), _negated=True)), name='doc_filename_not_empty'),
        ),
        migrations.AddIndex(
            model_name='commentaire',
            index=models.Index(fields=['created_at'], name='comment_created_idx'),
        ),
        migrations.AddIndex(
            model_name='commentaire',
            index=models.Index(fields=['formation', 'created_at'], name='comment_form_date_idx'),
        ),
        migrations.AddIndex(
            model_name='commentaire',
            index=models.Index(fields=['created_by'], name='comment_author_idx'),
        ),
        migrations.AddIndex(
            model_name='commentaire',
            index=models.Index(fields=['saturation'], name='comment_satur_idx'),
        ),
        migrations.AddConstraint(
            model_name='commentaire',
            constraint=models.CheckConstraint(check=models.Q(('saturation__isnull', True), models.Q(('saturation__gte', 0), ('saturation__lte', 100)), _connector='OR'), name='commentaire_saturation_range'),
        ),
        migrations.AddIndex(
            model_name='centre',
            index=models.Index(fields=['nom'], name='centre_nom_idx'),
        ),
        migrations.AddIndex(
            model_name='centre',
            index=models.Index(fields=['code_postal'], name='centre_cp_idx'),
        ),
        migrations.AddConstraint(
            model_name='centre',
            constraint=models.CheckConstraint(check=models.Q(('nom', ''), _negated=True), name='centre_nom_not_empty'),
        ),
        migrations.AddIndex(
            model_name='candidat',
            index=models.Index(fields=['evenement'], name='rap_app_can_eveneme_67df5e_idx'),
        ),
        migrations.AddIndex(
            model_name='candidat',
            index=models.Index(fields=['nom', 'prenom'], name='rap_app_can_nom_38e298_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ateliertre',
            unique_together={('type_atelier', 'date')},
        ),
        migrations.AddConstraint(
            model_name='appairage',
            constraint=models.UniqueConstraint(fields=('candidat', 'partenaire', 'formation'), name='unique_appairage'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['role'], name='customuser_role_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='customuser_email_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['is_active'], name='customuser_active_idx'),
        ),
    ]
