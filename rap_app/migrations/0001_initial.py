# Generated by Django 4.2.7 on 2025-05-06 12:12

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Adresse email utilisée pour la connexion', max_length=254, unique=True, verbose_name='Adresse email')),
                ('phone', models.CharField(blank=True, help_text="Numéro de téléphone de l'utilisateur", max_length=20, verbose_name='Téléphone')),
                ('avatar', models.ImageField(blank=True, help_text="Image de profil de l'utilisateur", null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('bio', models.TextField(blank=True, help_text='Texte de présentation ou informations supplémentaires', verbose_name='Biographie')),
                ('role', models.CharField(choices=[('superadmin', 'Super administrateur'), ('admin', 'Administrateur'), ('stagiaire', 'Stagiaire'), ('staff', 'Membre du staff'), ('test', 'Test')], default='stagiaire', help_text="Rôle ou niveau d'accès de l'utilisateur", max_length=20, verbose_name='Rôle')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Centre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('nom', models.CharField(help_text='Nom complet du centre de formation (doit être unique)', max_length=255, unique=True, verbose_name='Nom du centre')),
                ('code_postal', models.CharField(blank=True, help_text='Code postal à 5 chiffres du centre', max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Le code postal doit contenir exactement 5 chiffres', regex='^\\d{5}$')], verbose_name='Code postal')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Centre',
                'verbose_name_plural': 'Centres',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Formation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom de la formation')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Date de début')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Date de fin')),
                ('num_kairos', models.CharField(blank=True, max_length=50, null=True, verbose_name='Numéro Kairos')),
                ('num_offre', models.CharField(blank=True, max_length=50, null=True, verbose_name="Numéro de l'offre")),
                ('num_produit', models.CharField(blank=True, max_length=50, null=True, verbose_name='Numéro du produit')),
                ('prevus_crif', models.PositiveIntegerField(default=0, verbose_name='Places prévues CRIF')),
                ('prevus_mp', models.PositiveIntegerField(default=0, verbose_name='Places prévues MP')),
                ('inscrits_crif', models.PositiveIntegerField(default=0, verbose_name='Inscrits CRIF')),
                ('inscrits_mp', models.PositiveIntegerField(default=0, verbose_name='Inscrits MP')),
                ('saturation', models.FloatField(blank=True, help_text='Pourcentage moyen de saturation basé sur les commentaires', null=True, verbose_name='Niveau de saturation moyen')),
                ('assistante', models.CharField(blank=True, max_length=255, null=True, verbose_name='Assistante')),
                ('cap', models.PositiveIntegerField(blank=True, null=True, verbose_name='Capacité maximale')),
                ('convocation_envoie', models.BooleanField(default=False, verbose_name='Convocation envoyée')),
                ('entresformation', models.PositiveIntegerField(default=0, verbose_name='Entrées en formation')),
                ('nombre_candidats', models.PositiveIntegerField(default=0, verbose_name='Nombre de candidats')),
                ('nombre_entretiens', models.PositiveIntegerField(default=0, verbose_name="Nombre d'entretiens")),
                ('nombre_evenements', models.PositiveIntegerField(default=0, verbose_name="Nombre d'événements")),
                ('dernier_commentaire', models.TextField(blank=True, null=True, verbose_name='Dernier commentaire')),
                ('centre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formations', to='rap_app.centre', verbose_name='Centre de formation')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
            ],
            options={
                'verbose_name': 'Formation',
                'verbose_name_plural': 'Formations',
                'ordering': ['-start_date', 'nom'],
            },
        ),
        migrations.CreateModel(
            name='Partenaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('type', models.CharField(choices=[('entreprise', 'Entreprise'), ('partenaire', 'Partenaire institutionnel'), ('personne', 'Personne physique')], default='partenaire', help_text="Définit s'il s'agit d'une entreprise, d'un partenaire ou d'une personne physique", max_length=20, verbose_name='Type de partenaire')),
                ('nom', models.CharField(max_length=255, unique=True, verbose_name='Nom')),
                ('secteur_activite', models.CharField(blank=True, max_length=255, null=True, verbose_name="Secteur d'activité")),
                ('street_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Adresse')),
                ('zip_code', models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Le code postal doit être composé de 5 chiffres.', regex='^[0-9]{5}$')], verbose_name='Code postal')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ville')),
                ('country', models.CharField(blank=True, default='France', max_length=100, null=True, verbose_name='Pays')),
                ('contact_nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nom du contact')),
                ('contact_poste', models.CharField(blank=True, max_length=255, null=True, verbose_name='Poste du contact')),
                ('contact_telephone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Entrez un numéro de téléphone français valide.', regex='^(0[1-9]\\d{8})$|^(?:\\+33|0033)[1-9]\\d{8}$')], verbose_name='Téléphone')),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('website', models.URLField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message="L'URL doit commencer par http:// ou https://", regex='^(http|https)://')], verbose_name='Site web')),
                ('social_network_url', models.URLField(blank=True, null=True, verbose_name='Réseau social')),
                ('actions', models.CharField(blank=True, choices=[('recrutement_emploi', 'Recrutement - Emploi'), ('recrutement_stage', 'Recrutement - Stage'), ('recrutement_apprentissage', 'Recrutement - Apprentissage'), ('presentation_metier_entreprise', 'Présentation métier/entreprise'), ('visite_entreprise', "Visite d'entreprise"), ('coaching', 'Coaching'), ('autre', 'Autre'), ('partenariat', 'Partenariat'), ('non_definie', 'Non définie')], max_length=50, null=True, verbose_name="Type d'action")),
                ('action_description', models.TextField(blank=True, null=True, verbose_name="Description de l'action")),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description générale')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Partenaire',
                'verbose_name_plural': 'Partenaires',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='VAE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('reference', models.CharField(blank=True, help_text='Référence unique de la VAE (générée automatiquement si vide)', max_length=50, verbose_name='Référence')),
                ('date_saisie', models.DateTimeField(auto_now_add=True, help_text="Date et heure auxquelles la VAE a été saisie dans l'application", verbose_name='Date de saisie dans le système')),
                ('statut', models.CharField(choices=[('info', "Demande d'informations"), ('dossier', 'Dossier en cours'), ('attente_financement', 'En attente de financement'), ('accompagnement', 'Accompagnement en cours'), ('jury', 'En attente de jury'), ('terminee', 'VAE terminée'), ('abandonnee', 'VAE abandonnée')], default='info', help_text='Statut actuel de la VAE', max_length=20, verbose_name='Statut')),
                ('commentaire', models.TextField(blank=True, help_text='Notes ou informations supplémentaires sur cette VAE', verbose_name='Commentaire')),
                ('centre', models.ForeignKey(help_text='Centre responsable de cette VAE', on_delete=django.db.models.deletion.CASCADE, related_name='vaes', to='rap_app.centre', verbose_name='Centre')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'VAE',
                'verbose_name_plural': 'VAEs',
                'ordering': ['-created_at', 'centre'],
            },
        ),
        migrations.CreateModel(
            name='TypeOffre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('nom', models.CharField(choices=[('crif', 'CRIF'), ('alternance', 'Alternance'), ('poec', 'POEC'), ('poei', 'POEI'), ('tosa', 'TOSA'), ('autre', 'Autre'), ('non_defini', 'Non défini')], default='non_defini', help_text="Sélectionnez le type d'offre de formation parmi les choix prédéfinis", max_length=100, verbose_name="Type d'offre")),
                ('autre', models.CharField(blank=True, help_text="Si vous avez choisi 'Autre', précisez le type d'offre personnalisé", max_length=255, verbose_name='Autre (personnalisé)')),
                ('couleur', models.CharField(default='#6c757d', help_text="Code couleur hexadécimal (ex: #FF5733) pour l'affichage visuel", max_length=7, verbose_name='Couleur associée (hexadécimal)')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': "Type d'offre",
                'verbose_name_plural': "Types d'offres",
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='SuiviJury',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('annee', models.PositiveIntegerField(help_text='Année au format YYYY (ex: 2024)', validators=[django.core.validators.MinValueValidator(2000)], verbose_name='Année')),
                ('mois', models.PositiveSmallIntegerField(choices=[(1, 'Janvier'), (2, 'Février'), (3, 'Mars'), (4, 'Avril'), (5, 'Mai'), (6, 'Juin'), (7, 'Juillet'), (8, 'Août'), (9, 'Septembre'), (10, 'Octobre'), (11, 'Novembre'), (12, 'Décembre')], help_text="Mois de l'année (1-12)", verbose_name='Mois')),
                ('objectif_jury', models.PositiveIntegerField(default=0, help_text='Nombre de jurys à réaliser pour le mois', verbose_name='Objectif jury')),
                ('jurys_realises', models.PositiveIntegerField(default=0, help_text='Nombre de jurys effectivement réalisés ce mois', verbose_name='Jurys réalisés')),
                ('pourcentage_mensuel', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, help_text="Pourcentage d'atteinte de l'objectif mensuel (calculé automatiquement)", max_digits=6, verbose_name='Pourcentage mensuel')),
                ('centre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rap_app.centre', verbose_name='Centre')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Suivi des jurys',
                'verbose_name_plural': 'Suivis des jurys',
                'ordering': ['annee', 'mois', 'centre'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Statut',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('nom', models.CharField(choices=[('non_defini', 'Non défini'), ('recrutement_en_cours', 'Recrutement en cours'), ('formation_en_cours', 'Formation en cours'), ('formation_a_annuler', 'Formation à annuler'), ('formation_a_repousser', 'Formation à repousser'), ('formation_annulee', 'Formation annulée'), ('pleine', 'Pleine'), ('quasi_pleine', 'Quasi-pleine'), ('autre', 'Autre')], max_length=100, verbose_name='Nom du statut')),
                ('couleur', models.CharField(blank=True, help_text='Couleur hexadécimale (#RRGGBB).', max_length=7, verbose_name='Couleur')),
                ('description_autre', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description personnalisée')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Statut',
                'verbose_name_plural': 'Statuts',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Semaine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('annee', models.PositiveIntegerField(help_text='Année concernée (ex: 2023)', verbose_name='Année')),
                ('mois', models.PositiveIntegerField(help_text='Numéro du mois (1-12)', verbose_name='Mois')),
                ('numero_semaine', models.PositiveIntegerField(help_text="Numéro de la semaine dans l'année (1-53)", verbose_name='Numéro de semaine')),
                ('date_debut_semaine', models.DateField(help_text='Premier jour de la semaine (lundi)', verbose_name='Date de début')),
                ('date_fin_semaine', models.DateField(help_text='Dernier jour de la semaine (dimanche)', verbose_name='Date de fin')),
                ('objectif_annuel_prepa', models.PositiveIntegerField(default=0, help_text='Objectif annuel pour la préparation aux compétences', verbose_name='Objectif annuel prépa')),
                ('objectif_mensuel_prepa', models.PositiveIntegerField(default=0, help_text='Objectif mensuel pour la préparation aux compétences', verbose_name='Objectif mensuel prépa')),
                ('objectif_hebdo_prepa', models.PositiveIntegerField(default=0, help_text='Objectif hebdomadaire pour la préparation aux compétences', verbose_name='Objectif hebdomadaire prépa')),
                ('nombre_places_ouvertes', models.PositiveIntegerField(default=0, help_text='Nombre de places disponibles pour la semaine', verbose_name='Places ouvertes')),
                ('nombre_prescriptions', models.PositiveIntegerField(default=0, help_text='Nombre de prescriptions reçues pour la semaine', verbose_name='Prescriptions')),
                ('nombre_presents_ic', models.PositiveIntegerField(default=0, help_text="Nombre de personnes présentes pour l'Information Collective", verbose_name='Présents IC')),
                ('nombre_adhesions', models.PositiveIntegerField(default=0, help_text="Nombre d'adhésions cette semaine", verbose_name='Adhésions')),
                ('departements', models.JSONField(blank=True, default=dict, help_text='Dictionnaire avec codes départements comme clés et nombres comme valeurs', null=True, verbose_name='Répartition par département')),
                ('nombre_par_atelier', models.JSONField(blank=True, default=dict, help_text='Dictionnaire avec codes ateliers comme clés et nombres comme valeurs', null=True, verbose_name='Répartition par atelier')),
                ('centre', models.ForeignKey(blank=True, help_text='Centre auquel cette semaine est rattachée', null=True, on_delete=django.db.models.deletion.CASCADE, to='rap_app.centre', verbose_name='Centre de formation')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Semaine',
                'verbose_name_plural': 'Semaines',
                'ordering': ['-date_debut_semaine'],
            },
        ),
        migrations.CreateModel(
            name='Rapport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom du rapport')),
                ('type_rapport', models.CharField(choices=[('occupation', "Rapport d'occupation des formations"), ('centre', 'Rapport de performance par centre'), ('statut', 'Rapport de suivi des statuts'), ('evenement', "Rapport d'efficacité des événements"), ('recrutement', 'Rapport de suivi du recrutement'), ('partenaire', "Rapport d'activité des partenaires"), ('repartition', 'Rapport de répartition des partenaires'), ('periodique', 'Rapport périodique'), ('annuel', 'Rapport annuel consolidé'), ('utilisateur', "Rapport d'activité utilisateurs")], max_length=50, verbose_name='Type de rapport')),
                ('periode', models.CharField(choices=[('quotidien', 'Quotidien'), ('hebdomadaire', 'Hebdomadaire'), ('mensuel', 'Mensuel'), ('trimestriel', 'Trimestriel'), ('annuel', 'Annuel'), ('personnalise', 'Période personnalisée')], max_length=50, verbose_name='Périodicité')),
                ('date_debut', models.DateField(verbose_name='Date de début')),
                ('date_fin', models.DateField(verbose_name='Date de fin')),
                ('format', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('csv', 'CSV'), ('html', 'HTML')], default='html', max_length=10, verbose_name='Format')),
                ('donnees', models.JSONField(default=dict, verbose_name='Données du rapport')),
                ('temps_generation', models.FloatField(blank=True, null=True, verbose_name='Temps de génération (s)')),
                ('centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rap_app.centre', verbose_name='Centre')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('formation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rapports', to='rap_app.formation')),
                ('statut', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rap_app.statut', verbose_name='Statut')),
                ('type_offre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rap_app.typeoffre', verbose_name="Type d'offre")),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Rapport',
                'verbose_name_plural': 'Rapports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Prospection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('date_prospection', models.DateTimeField(default=django.utils.timezone.now, help_text='Date à laquelle la prospection a eu lieu', verbose_name='Date de prospection')),
                ('motif', models.CharField(choices=[('POEI', 'POEI'), ('apprentissage', 'Apprentissage'), ('VAE', 'VAE'), ('partenariat', 'Établir un partenariat'), ('autre', 'Autre')], default='prise_contact', help_text='Motif principal de la prospection', max_length=30, verbose_name='Motif')),
                ('statut', models.CharField(choices=[('a_faire', 'À faire'), ('en_cours', 'En cours'), ('a_relancer', 'À relancer'), ('acceptee', 'Acceptée'), ('refusee', 'Refusée'), ('annulee', 'Annulée'), ('non_renseigne', 'Non renseigné')], default='a_faire', help_text='Statut actuel de la prospection', max_length=20, verbose_name='Statut')),
                ('objectif', models.CharField(choices=[('prise_contact', 'Prise de contact'), ('rendez_vous', 'Obtenir un rendez-vous'), ('presentation_offre', 'Présentation d’une offre'), ('contrat', 'Signer un contrat'), ('partenariat', 'Établir un partenariat'), ('autre', 'Autre')], default='prise_contact', help_text='Objectif visé par la prospection', max_length=30, verbose_name='Objectif')),
                ('commentaire', models.TextField(blank=True, help_text='Remarques ou suivi concernant la prospection', null=True, verbose_name='Commentaire')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('formation', models.ForeignKey(blank=True, help_text='Formation liée à cette prospection (facultatif)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prospections', to='rap_app.formation', verbose_name='Formation')),
                ('partenaire', models.ForeignKey(help_text='Partenaire concerné par cette prospection', on_delete=django.db.models.deletion.CASCADE, related_name='prospections', to='rap_app.partenaire', verbose_name='Partenaire')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Suivi de la prospection',
                'verbose_name_plural': 'Suivis des prospections',
                'ordering': ['-date_prospection'],
            },
        ),
        migrations.CreateModel(
            name='PrepaCompGlobal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('annee', models.PositiveIntegerField(help_text='Année concernée par ce bilan', verbose_name='Année')),
                ('total_candidats', models.PositiveIntegerField(default=0, help_text="Nombre total de candidats sur l'année", verbose_name='Total candidats')),
                ('total_prescriptions', models.PositiveIntegerField(default=0, help_text="Nombre total de prescriptions sur l'année", verbose_name='Total prescriptions')),
                ('adhesions', models.PositiveIntegerField(default=0, help_text="Nombre total d'adhésions sur l'année", verbose_name='Adhésions')),
                ('total_presents', models.PositiveIntegerField(default=0, help_text="Nombre total de personnes présentes sur l'année", verbose_name='Total présents')),
                ('total_places_ouvertes', models.PositiveIntegerField(default=0, help_text="Nombre total de places ouvertes sur l'année", verbose_name='Total places ouvertes')),
                ('objectif_annuel_prepa', models.PositiveIntegerField(default=0, help_text="Objectif annuel d'adhésions pour la préparation aux compétences", verbose_name='Objectif annuel prépa')),
                ('objectif_hebdomadaire_prepa', models.PositiveIntegerField(default=0, help_text="Objectif hebdomadaire d'adhésions pour la prépa compétences", verbose_name='Objectif hebdomadaire prépa')),
                ('objectif_annuel_jury', models.PositiveIntegerField(default=0, help_text='Objectif annuel pour les jurys', verbose_name='Objectif annuel jury')),
                ('objectif_mensuel_jury', models.PositiveIntegerField(default=0, help_text='Objectif mensuel pour les jurys', verbose_name='Objectif mensuel jury')),
                ('centre', models.ForeignKey(blank=True, help_text='Centre auquel ce bilan est rattaché', null=True, on_delete=django.db.models.deletion.CASCADE, to='rap_app.centre', verbose_name='Centre de formation')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Bilan global PrépaComp',
                'verbose_name_plural': 'Bilans globaux PrépaComp',
            },
        ),
        migrations.CreateModel(
            name='LogUtilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('action', models.CharField(help_text="Type d'action (création, modification, suppression...)", max_length=255, verbose_name='Action')),
                ('details', models.TextField(blank=True, help_text="Informations supplémentaires sur l'action", null=True, verbose_name='Détails')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Log utilisateur',
                'verbose_name_plural': 'Logs utilisateurs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueStatutVAE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statut', models.CharField(choices=[('info', "Demande d'informations"), ('dossier', 'Dossier en cours'), ('attente_financement', 'En attente de financement'), ('accompagnement', 'Accompagnement en cours'), ('jury', 'En attente de jury'), ('terminee', 'VAE terminée'), ('abandonnee', 'VAE abandonnée')], help_text='Nouveau statut de la VAE', max_length=20, verbose_name='Statut')),
                ('date_changement_effectif', models.DateField(help_text="Date à laquelle le changement de statut a eu lieu (pas nécessairement aujourd'hui)", verbose_name='Date effective du changement')),
                ('date_saisie', models.DateTimeField(auto_now_add=True, help_text='Date et heure auxquelles ce changement a été enregistré', verbose_name='Date de saisie dans le système')),
                ('commentaire', models.TextField(blank=True, help_text='Notes ou informations supplémentaires sur ce changement de statut', verbose_name='Commentaire')),
                ('vae', models.ForeignKey(help_text='VAE concernée par ce changement de statut', on_delete=django.db.models.deletion.CASCADE, related_name='historique_statuts', to='rap_app.vae', verbose_name='VAE')),
            ],
            options={
                'verbose_name': 'Historique de statut VAE',
                'verbose_name_plural': 'Historiques de statuts VAE',
                'ordering': ['-date_changement_effectif', '-date_saisie'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueProspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_modification', models.DateTimeField(auto_now_add=True, help_text='Date de la modification', verbose_name='Date')),
                ('ancien_statut', models.CharField(choices=[('a_faire', 'À faire'), ('en_cours', 'En cours'), ('a_relancer', 'À relancer'), ('acceptee', 'Acceptée'), ('refusee', 'Refusée'), ('annulee', 'Annulée'), ('non_renseigne', 'Non renseigné')], max_length=20, verbose_name='Ancien statut')),
                ('nouveau_statut', models.CharField(choices=[('a_faire', 'À faire'), ('en_cours', 'En cours'), ('a_relancer', 'À relancer'), ('acceptee', 'Acceptée'), ('refusee', 'Refusée'), ('annulee', 'Annulée'), ('non_renseigne', 'Non renseigné')], max_length=20, verbose_name='Nouveau statut')),
                ('commentaire', models.TextField(blank=True, help_text='Commentaire éventuel de modification', null=True, verbose_name='Commentaire')),
                ('prochain_contact', models.DateField(blank=True, null=True, verbose_name='Date de relance')),
                ('resultat', models.TextField(blank=True, null=True, verbose_name='Résultat')),
                ('moyen_contact', models.CharField(blank=True, choices=[('email', 'Email'), ('telephone', 'Téléphone'), ('visite', 'Visite'), ('reseaux', 'Réseaux sociaux')], max_length=50, null=True, verbose_name='Moyen de contact')),
                ('prospection', models.ForeignKey(help_text='Prospection liée à cet historique', on_delete=django.db.models.deletion.CASCADE, related_name='historiques', to='rap_app.prospection', verbose_name='Prospection')),
            ],
            options={
                'verbose_name': 'Historique de prospection',
                'verbose_name_plural': 'Historiques de prospection',
                'ordering': ['-date_modification'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueFormation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('action', models.CharField(default='modification', max_length=100, verbose_name="Type d'action")),
                ('champ_modifie', models.CharField(max_length=100, verbose_name='Champ modifié')),
                ('ancienne_valeur', models.TextField(blank=True, null=True, verbose_name='Ancienne valeur')),
                ('nouvelle_valeur', models.TextField(blank=True, null=True, verbose_name='Nouvelle valeur')),
                ('commentaire', models.TextField(blank=True, null=True, verbose_name='Commentaire de modification')),
                ('details', models.JSONField(blank=True, default=dict, verbose_name='Détails supplémentaires')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('formation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historiques', to='rap_app.formation', verbose_name='Formation concernée')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Historique de modification de formation',
                'verbose_name_plural': 'Historiques de modifications de formations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='formation',
            name='partenaires',
            field=models.ManyToManyField(blank=True, related_name='formations', to='rap_app.partenaire', verbose_name='Partenaires'),
        ),
        migrations.AddField(
            model_name='formation',
            name='statut',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formations', to='rap_app.statut', verbose_name='Statut de la formation'),
        ),
        migrations.AddField(
            model_name='formation',
            name='type_offre',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formations', to='rap_app.typeoffre', verbose_name="Type d'offre"),
        ),
        migrations.AddField(
            model_name='formation',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par'),
        ),
        migrations.CreateModel(
            name='Evenement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('type_evenement', models.CharField(choices=[('info_collective_presentiel', 'Information collective présentiel'), ('info_collective_distanciel', 'Information collective distanciel'), ('job_dating', 'Job dating'), ('evenement_emploi', 'Événement emploi'), ('forum', 'Forum'), ('jpo', 'Journée Portes Ouvertes'), ('autre', 'Autre')], db_index=True, max_length=100)),
                ('description_autre', models.CharField(blank=True, max_length=255, null=True)),
                ('details', models.TextField(blank=True, null=True)),
                ('event_date', models.DateField(blank=True, null=True)),
                ('lieu', models.CharField(blank=True, max_length=255, null=True)),
                ('participants_prevus', models.PositiveIntegerField(blank=True, null=True)),
                ('participants_reels', models.PositiveIntegerField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evenements_crees', to=settings.AUTH_USER_MODEL)),
                ('formation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='evenements', to='rap_app.formation')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Événement',
                'verbose_name_plural': 'Événements',
                'ordering': ['-event_date'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('nom_fichier', models.CharField(db_index=True, max_length=255, verbose_name='Nom du fichier')),
                ('fichier', models.FileField(upload_to='formations/documents/', verbose_name='Fichier')),
                ('source', models.TextField(blank=True, null=True, verbose_name='Source')),
                ('type_document', models.CharField(choices=[('pdf', 'PDF'), ('image', 'Image'), ('contrat', 'Contrat signé'), ('autre', 'Autre')], default='autre', max_length=20, verbose_name='Type de document')),
                ('taille_fichier', models.PositiveIntegerField(blank=True, null=True, verbose_name='Taille (Ko)')),
                ('mime_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Type MIME')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('formation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='rap_app.formation', verbose_name='Formation associée')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Commentaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text="Date et heure de création de l'enregistrement", verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de la dernière modification', verbose_name='Date de mise à jour')),
                ('contenu', models.TextField(help_text='Texte du commentaire (sans HTML)', verbose_name='Contenu du commentaire')),
                ('saturation', models.PositiveIntegerField(blank=True, help_text='Pourcentage de saturation mentionné dans le commentaire (0-100)', null=True, verbose_name='Niveau de saturation (%)')),
                ('created_by', models.ForeignKey(blank=True, editable=False, help_text="Utilisateur ayant créé l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('formation', models.ForeignKey(help_text='Formation à laquelle ce commentaire est associé', on_delete=django.db.models.deletion.CASCADE, related_name='commentaires', to='rap_app.formation', verbose_name='Formation')),
                ('updated_by', models.ForeignKey(blank=True, help_text="Dernier utilisateur ayant modifié l'enregistrement", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Commentaire',
                'verbose_name_plural': 'Commentaires',
                'ordering': ['formation', '-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='vae',
            index=models.Index(fields=['centre', 'statut'], name='rap_app_vae_centre__309bad_idx'),
        ),
        migrations.AddIndex(
            model_name='vae',
            index=models.Index(fields=['created_at'], name='rap_app_vae_created_3edba0_idx'),
        ),
        migrations.AddIndex(
            model_name='vae',
            index=models.Index(fields=['reference'], name='rap_app_vae_referen_1f793b_idx'),
        ),
        migrations.AddIndex(
            model_name='typeoffre',
            index=models.Index(fields=['nom'], name='rap_app_typ_nom_d4cbe0_idx'),
        ),
        migrations.AddIndex(
            model_name='typeoffre',
            index=models.Index(fields=['autre'], name='rap_app_typ_autre_76e40c_idx'),
        ),
        migrations.AddConstraint(
            model_name='typeoffre',
            constraint=models.UniqueConstraint(condition=models.Q(('autre__isnull', False), ('nom', 'autre')), fields=('autre',), name='unique_autre_non_null'),
        ),
        migrations.AddIndex(
            model_name='suivijury',
            index=models.Index(fields=['centre', 'annee', 'mois'], name='rap_app_sui_centre__1773ec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='suivijury',
            unique_together={('centre', 'annee', 'mois')},
        ),
        migrations.AddIndex(
            model_name='semaine',
            index=models.Index(fields=['annee', 'mois'], name='rap_app_sem_annee_953e23_idx'),
        ),
        migrations.AddIndex(
            model_name='semaine',
            index=models.Index(fields=['centre', 'annee'], name='rap_app_sem_centre__5c1ac1_idx'),
        ),
        migrations.AddIndex(
            model_name='semaine',
            index=models.Index(fields=['date_debut_semaine'], name='rap_app_sem_date_de_356e48_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='semaine',
            unique_together={('numero_semaine', 'annee', 'centre')},
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['statut'], name='rap_app_pro_statut_84d25a_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['date_prospection'], name='rap_app_pro_date_pr_5d71cf_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['partenaire'], name='rap_app_pro_partena_379d92_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['formation'], name='rap_app_pro_formati_986a4a_idx'),
        ),
        migrations.AddIndex(
            model_name='prospection',
            index=models.Index(fields=['created_by'], name='rap_app_pro_created_4cb87b_idx'),
        ),
        migrations.AddIndex(
            model_name='prepacompglobal',
            index=models.Index(fields=['centre', 'annee'], name='rap_app_pre_centre__0620c8_idx'),
        ),
        migrations.AddIndex(
            model_name='prepacompglobal',
            index=models.Index(fields=['annee'], name='rap_app_pre_annee_b2cafd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='prepacompglobal',
            unique_together={('centre', 'annee')},
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['nom'], name='rap_app_par_nom_983061_idx'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['secteur_activite'], name='rap_app_par_secteur_455cf4_idx'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['slug'], name='rap_app_par_slug_09691e_idx'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['zip_code'], name='rap_app_par_zip_cod_213950_idx'),
        ),
        migrations.AddIndex(
            model_name='partenaire',
            index=models.Index(fields=['type'], name='rap_app_par_type_ef8a15_idx'),
        ),
        migrations.AddIndex(
            model_name='historiquestatutvae',
            index=models.Index(fields=['vae', 'statut'], name='rap_app_his_vae_id_fa0754_idx'),
        ),
        migrations.AddIndex(
            model_name='historiquestatutvae',
            index=models.Index(fields=['date_changement_effectif'], name='rap_app_his_date_ch_a4a2b4_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueprospection',
            index=models.Index(fields=['prospection'], name='rap_app_his_prospec_f00db9_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueprospection',
            index=models.Index(fields=['date_modification'], name='rap_app_his_date_mo_5b61b9_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueprospection',
            index=models.Index(fields=['prochain_contact'], name='rap_app_his_prochai_5f80db_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueformation',
            index=models.Index(fields=['-created_at'], name='rap_app_his_created_0f897e_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueformation',
            index=models.Index(fields=['formation'], name='rap_app_his_formati_aa2815_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['start_date'], name='rap_app_for_start_d_4c1834_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['end_date'], name='rap_app_for_end_dat_e7d2c9_idx'),
        ),
        migrations.AddIndex(
            model_name='formation',
            index=models.Index(fields=['nom'], name='rap_app_for_nom_27c494_idx'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['event_date'], name='rap_app_eve_event_d_758395_idx'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['type_evenement'], name='rap_app_eve_type_ev_11d24c_idx'),
        ),
        migrations.AddIndex(
            model_name='evenement',
            index=models.Index(fields=['formation'], name='rap_app_eve_formati_3e51e7_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['nom_fichier'], name='rap_app_doc_nom_fic_b4d61d_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['formation'], name='rap_app_doc_formati_399b58_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['type_document'], name='rap_app_doc_type_do_ef9a30_idx'),
        ),
        migrations.AddIndex(
            model_name='commentaire',
            index=models.Index(fields=['created_at'], name='rap_app_com_created_aad49b_idx'),
        ),
        migrations.AddIndex(
            model_name='commentaire',
            index=models.Index(fields=['formation', 'created_at'], name='rap_app_com_formati_4b5dd7_idx'),
        ),
        migrations.AddIndex(
            model_name='commentaire',
            index=models.Index(fields=['created_by'], name='rap_app_com_created_b4f799_idx'),
        ),
        migrations.AddIndex(
            model_name='centre',
            index=models.Index(fields=['nom'], name='rap_app_cen_nom_671da5_idx'),
        ),
        migrations.AddIndex(
            model_name='centre',
            index=models.Index(fields=['code_postal'], name='rap_app_cen_code_po_c9960c_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['role'], name='rap_app_cus_role_3bb12f_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='rap_app_cus_email_8d64bb_idx'),
        ),
    ]
